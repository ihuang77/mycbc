!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADD	ir/Op.java	/^    ADD,$/;"	e	enum:Op	file:
ARITH_RSHIFT	ir/Op.java	/^    ARITH_RSHIFT,$/;"	e	enum:Op	file:
AST	ast/AST.java	/^    public AST(Location source, Declarations declarations) {$/;"	m	class:AST
AST	ast/AST.java	/^public class AST extends Node {$/;"	c
ASTVisitor	ast/ASTVisitor.java	/^public interface ASTVisitor<S, E> {$/;"	i
AX	sysdep/x86/RegisterClass.java	/^    AX, BX, CX, DX, SI, DI, SP, BP;$/;"	e	enum:RegisterClass	file:
AbsoluteAddress	asm/AbsoluteAddress.java	/^    public AbsoluteAddress(Register reg) {$/;"	m	class:AbsoluteAddress
AbsoluteAddress	asm/AbsoluteAddress.java	/^public class AbsoluteAddress extends Operand {$/;"	c
AbstractAssignNode	ast/AbstractAssignNode.java	/^    public AbstractAssignNode(ExprNode lhs, ExprNode rhs) {$/;"	m	class:AbstractAssignNode
AbstractAssignNode	ast/AbstractAssignNode.java	/^abstract public class AbstractAssignNode extends ExprNode {$/;"	c
Addr	ir/Addr.java	/^    public Addr(Type type, Entity entity) {$/;"	m	class:Addr
Addr	ir/Addr.java	/^public class Addr extends Expr {$/;"	c
AddressNode	ast/AddressNode.java	/^    public AddressNode(ExprNode expr) {$/;"	m	class:AddressNode
AddressNode	ast/AddressNode.java	/^public class AddressNode extends ExprNode {$/;"	c
AnyRegisterPattern	sysdep/x86/PeepholeOptimizer.java	/^    class AnyRegisterPattern implements OperandPattern {$/;"	c	class:PeepholeOptimizer
ArefNode	ast/ArefNode.java	/^    public ArefNode(ExprNode expr, ExprNode index) {$/;"	m	class:ArefNode
ArefNode	ast/ArefNode.java	/^public class ArefNode extends LHSNode {$/;"	c
ArrayType	type/ArrayType.java	/^    public ArrayType(Type baseType, long length, long pointerSize) {$/;"	m	class:ArrayType
ArrayType	type/ArrayType.java	/^    public ArrayType(Type baseType, long pointerSize) {$/;"	m	class:ArrayType
ArrayType	type/ArrayType.java	/^public class ArrayType extends Type {$/;"	c
ArrayTypeRef	type/ArrayTypeRef.java	/^    public ArrayTypeRef(TypeRef baseType) {$/;"	m	class:ArrayTypeRef
ArrayTypeRef	type/ArrayTypeRef.java	/^    public ArrayTypeRef(TypeRef baseType, long length) {$/;"	m	class:ArrayTypeRef
ArrayTypeRef	type/ArrayTypeRef.java	/^public class ArrayTypeRef extends TypeRef {$/;"	c
AsmUtils	utils/AsmUtils.java	/^    private AsmUtils() {}$/;"	m	class:AsmUtils	file:
AsmUtils	utils/AsmUtils.java	/^public final class AsmUtils {$/;"	c
Assemble	compiler/CompilerMode.java	/^    Assemble ("-c"),$/;"	e	enum:CompilerMode	file:
Assembler	sysdep/Assembler.java	/^public interface Assembler {$/;"	i
AssemblerOptions	sysdep/AssemblerOptions.java	/^public class AssemblerOptions {$/;"	c
Assembly	asm/Assembly.java	/^abstract public class Assembly {$/;"	c
AssemblyCode	sysdep/AssemblyCode.java	/^public interface AssemblyCode {$/;"	i
AssemblyCode	sysdep/x86/AssemblyCode.java	/^    AssemblyCode(Type naturalType, long stackWordSize,$/;"	m	class:AssemblyCode
AssemblyCode	sysdep/x86/AssemblyCode.java	/^public class AssemblyCode implements net.loveruby.cflat.sysdep.AssemblyCode {$/;"	c
Assign	ir/Assign.java	/^    public Assign(Location loc, Expr lhs, Expr rhs) {$/;"	m	class:Assign
Assign	ir/Assign.java	/^public class Assign extends Stmt {$/;"	c
AssignNode	ast/AssignNode.java	/^    public AssignNode(ExprNode lhs, ExprNode rhs) {$/;"	m	class:AssignNode
AssignNode	ast/AssignNode.java	/^public class AssignNode extends AbstractAssignNode {$/;"	c
BIT_AND	ir/Op.java	/^    BIT_AND,$/;"	e	enum:Op	file:
BIT_LSHIFT	ir/Op.java	/^    BIT_LSHIFT,$/;"	e	enum:Op	file:
BIT_NOT	ir/Op.java	/^    BIT_NOT,$/;"	e	enum:Op	file:
BIT_OR	ir/Op.java	/^    BIT_OR,$/;"	e	enum:Op	file:
BIT_RSHIFT	ir/Op.java	/^    BIT_RSHIFT,$/;"	e	enum:Op	file:
BIT_XOR	ir/Op.java	/^    BIT_XOR,$/;"	e	enum:Op	file:
BP	sysdep/x86/RegisterClass.java	/^    AX, BX, CX, DX, SI, DI, SP, BP;$/;"	e	enum:RegisterClass	file:
BX	sysdep/x86/RegisterClass.java	/^    AX, BX, CX, DX, SI, DI, SP, BP;$/;"	e	enum:RegisterClass	file:
BaseSymbol	asm/BaseSymbol.java	/^abstract public class BaseSymbol implements Symbol {$/;"	c
Bin	ir/Bin.java	/^    public Bin(Type type, Op op, Expr left, Expr right) {$/;"	m	class:Bin
Bin	ir/Bin.java	/^public class Bin extends Expr {$/;"	c
BinaryOpNode	ast/BinaryOpNode.java	/^    public BinaryOpNode(ExprNode left, String op, ExprNode right) {$/;"	m	class:BinaryOpNode
BinaryOpNode	ast/BinaryOpNode.java	/^    public BinaryOpNode(Type t, ExprNode left, String op, ExprNode right) {$/;"	m	class:BinaryOpNode
BinaryOpNode	ast/BinaryOpNode.java	/^public class BinaryOpNode extends ExprNode {$/;"	c
BlockNode	ast/BlockNode.java	/^    public BlockNode(Location loc, List<DefinedVariable> vars, List<StmtNode> stmts) {$/;"	m	class:BlockNode
BlockNode	ast/BlockNode.java	/^public class BlockNode extends StmtNode {$/;"	c
BreakNode	ast/BreakNode.java	/^    public BreakNode(Location loc) {$/;"	m	class:BreakNode
BreakNode	ast/BreakNode.java	/^public class BreakNode extends StmtNode {$/;"	c
CALLEE_SAVE_REGISTERS	sysdep/x86/CodeGenerator.java	/^    static final RegisterClass[] CALLEE_SAVE_REGISTERS = {$/;"	f	class:CodeGenerator
CJump	ir/CJump.java	/^    public CJump(Location loc, Expr cond, Label thenLabel, Label elseLabel) {$/;"	m	class:CJump
CJump	ir/CJump.java	/^public class CJump extends Stmt {$/;"	c
CONST_SYMBOL_BASE	sysdep/x86/CodeGenerator.java	/^    static final String CONST_SYMBOL_BASE = ".LC";$/;"	f	class:CodeGenerator
CX	sysdep/x86/RegisterClass.java	/^    AX, BX, CX, DX, SI, DI, SP, BP;$/;"	e	enum:RegisterClass	file:
C_RUNTIME_FINI	sysdep/GNULinker.java	/^    static final private String C_RUNTIME_FINI      = "\/usr\/lib\/crtn.o";$/;"	f	class:GNULinker	file:
C_RUNTIME_INIT	sysdep/GNULinker.java	/^    static final private String C_RUNTIME_INIT      = "\/usr\/lib\/crti.o";$/;"	f	class:GNULinker	file:
C_RUNTIME_START	sysdep/GNULinker.java	/^    static final private String C_RUNTIME_START     = "\/usr\/lib\/crt1.o";$/;"	f	class:GNULinker	file:
C_RUNTIME_START_PIE	sysdep/GNULinker.java	/^    static final private String C_RUNTIME_START_PIE = "\/usr\/lib\/Scrt1.o";$/;"	f	class:GNULinker	file:
Call	ir/Call.java	/^    public Call(Type type, Expr expr, List<Expr> args) {$/;"	m	class:Call
Call	ir/Call.java	/^public class Call extends Expr {$/;"	c
Case	ir/Case.java	/^    public Case(long value, Label label) {$/;"	m	class:Case
Case	ir/Case.java	/^public class Case implements Dumpable {$/;"	c
CaseNode	ast/CaseNode.java	/^    public CaseNode(Location loc, List<ExprNode> values, BlockNode body) {$/;"	m	class:CaseNode
CaseNode	ast/CaseNode.java	/^public class CaseNode extends StmtNode {$/;"	c
CastNode	ast/CastNode.java	/^    public CastNode(Type t, ExprNode expr) {$/;"	m	class:CastNode
CastNode	ast/CastNode.java	/^    public CastNode(TypeNode t, ExprNode expr) {$/;"	m	class:CastNode
CastNode	ast/CastNode.java	/^public class CastNode extends ExprNode {$/;"	c
CflatToken	ast/CflatToken.java	/^    public CflatToken(Token token) {$/;"	m	class:CflatToken
CflatToken	ast/CflatToken.java	/^    public CflatToken(Token token, boolean isSpecial) {$/;"	m	class:CflatToken
CflatToken	ast/CflatToken.java	/^public class CflatToken implements Iterable<CflatToken> {$/;"	c
CheckSyntax	compiler/CompilerMode.java	/^    CheckSyntax ("--check-syntax"),$/;"	e	enum:CompilerMode	file:
CodeGenerator	sysdep/CodeGenerator.java	/^public interface CodeGenerator {$/;"	i
CodeGenerator	sysdep/x86/CodeGenerator.java	/^    public CodeGenerator(CodeGeneratorOptions options,$/;"	m	class:CodeGenerator
CodeGenerator	sysdep/x86/CodeGenerator.java	/^public class CodeGenerator implements net.loveruby.cflat.sysdep.CodeGenerator,$/;"	c
CodeGeneratorOptions	sysdep/CodeGeneratorOptions.java	/^    public CodeGeneratorOptions() {$/;"	m	class:CodeGeneratorOptions
CodeGeneratorOptions	sysdep/CodeGeneratorOptions.java	/^public class CodeGeneratorOptions {$/;"	c
CommandUtils	utils/CommandUtils.java	/^abstract public class CommandUtils {$/;"	c
Comment	asm/Comment.java	/^    public Comment(String string) {$/;"	m	class:Comment
Comment	asm/Comment.java	/^    public Comment(String string, int indentLevel) {$/;"	m	class:Comment
Comment	asm/Comment.java	/^public class Comment extends Assembly {$/;"	c
Compile	compiler/CompilerMode.java	/^    Compile ("-S"),$/;"	e	enum:CompilerMode	file:
CompileException	exception/CompileException.java	/^    public CompileException(String msg) {$/;"	m	class:CompileException
CompileException	exception/CompileException.java	/^public class CompileException extends Exception {$/;"	c
Compiler	compiler/Compiler.java	/^    public Compiler(String programName) {$/;"	m	class:Compiler
Compiler	compiler/Compiler.java	/^public class Compiler {$/;"	c
CompilerMode	compiler/CompilerMode.java	/^    CompilerMode(String option) {$/;"	m	class:CompilerMode
CompilerMode	compiler/CompilerMode.java	/^enum CompilerMode {$/;"	g
CompositeType	type/CompositeType.java	/^    public CompositeType(String name, List<Slot> membs, Location loc) {$/;"	m	class:CompositeType
CompositeType	type/CompositeType.java	/^abstract public class CompositeType extends NamedType {$/;"	c
CompositeTypeDefinition	ast/CompositeTypeDefinition.java	/^    public CompositeTypeDefinition(Location loc, TypeRef ref,$/;"	m	class:CompositeTypeDefinition
CompositeTypeDefinition	ast/CompositeTypeDefinition.java	/^abstract public class CompositeTypeDefinition extends TypeDefinition {$/;"	c
CondExprNode	ast/CondExprNode.java	/^    public CondExprNode(ExprNode cond, ExprNode t, ExprNode e) {$/;"	m	class:CondExprNode
CondExprNode	ast/CondExprNode.java	/^public class CondExprNode extends ExprNode {$/;"	c
Constant	entity/Constant.java	/^    public Constant(TypeNode type, String name, ExprNode value) {$/;"	m	class:Constant
Constant	entity/Constant.java	/^public class Constant extends Entity {$/;"	c
ConstantEntry	entity/ConstantEntry.java	/^    public ConstantEntry(String val) {$/;"	m	class:ConstantEntry
ConstantEntry	entity/ConstantEntry.java	/^public class ConstantEntry {$/;"	c
ConstantTable	entity/ConstantTable.java	/^    public ConstantTable() {$/;"	m	class:ConstantTable
ConstantTable	entity/ConstantTable.java	/^public class ConstantTable implements Iterable<ConstantEntry> {$/;"	c
ContinueNode	ast/ContinueNode.java	/^    public ContinueNode(Location loc) {$/;"	m	class:ContinueNode
ContinueNode	ast/ContinueNode.java	/^public class ContinueNode extends StmtNode {$/;"	c
Cursor	utils/Cursor.java	/^    protected Cursor(List<T> list, int index) {$/;"	m	class:Cursor
Cursor	utils/Cursor.java	/^    public Cursor(List<T> list) {$/;"	m	class:Cursor
Cursor	utils/Cursor.java	/^public class Cursor<T> implements Iterator {$/;"	c
DEFAULT_LINKER_OUTPUT	compiler/Options.java	/^    static private final String DEFAULT_LINKER_OUTPUT = "a.out";$/;"	f	class:Options	file:
DI	sysdep/x86/RegisterClass.java	/^    AX, BX, CX, DX, SI, DI, SP, BP;$/;"	e	enum:RegisterClass	file:
DUMMY_SYMBOL_BASE	asm/SymbolTable.java	/^    static private final String DUMMY_SYMBOL_BASE = "L";$/;"	f	class:SymbolTable	file:
DX	sysdep/x86/RegisterClass.java	/^    AX, BX, CX, DX, SI, DI, SP, BP;$/;"	e	enum:RegisterClass	file:
DYNAMIC_LINKER	sysdep/GNULinker.java	/^    static final private String DYNAMIC_LINKER      = "\/lib\/ld-linux.so.2";$/;"	f	class:GNULinker	file:
DeclarationVisitor	ast/DeclarationVisitor.java	/^public interface DeclarationVisitor<T> {$/;"	i
Declarations	ast/Declarations.java	/^public class Declarations {$/;"	c
DefinedFunction	entity/DefinedFunction.java	/^    public DefinedFunction(boolean priv, TypeNode type,$/;"	m	class:DefinedFunction
DefinedFunction	entity/DefinedFunction.java	/^public class DefinedFunction extends Function {$/;"	c
DefinedVariable	entity/DefinedVariable.java	/^    public DefinedVariable(boolean priv, TypeNode type,$/;"	m	class:DefinedVariable
DefinedVariable	entity/DefinedVariable.java	/^public class DefinedVariable extends Variable {$/;"	c
DereferenceChecker	compiler/DereferenceChecker.java	/^    public DereferenceChecker(TypeTable typeTable, ErrorHandler h) {$/;"	m	class:DereferenceChecker
DereferenceChecker	compiler/DereferenceChecker.java	/^class DereferenceChecker extends Visitor {$/;"	c
DereferenceNode	ast/DereferenceNode.java	/^    public DereferenceNode(ExprNode expr) {$/;"	m	class:DereferenceNode
DereferenceNode	ast/DereferenceNode.java	/^public class DereferenceNode extends LHSNode {$/;"	c
DirectMemoryReference	asm/DirectMemoryReference.java	/^    public DirectMemoryReference(Literal val) {$/;"	m	class:DirectMemoryReference
DirectMemoryReference	asm/DirectMemoryReference.java	/^public class DirectMemoryReference extends MemoryReference {$/;"	c
Directive	asm/Directive.java	/^    public Directive(String content) {$/;"	m	class:Directive
Directive	asm/Directive.java	/^public class Directive extends Assembly {$/;"	c
DoWhileNode	ast/DoWhileNode.java	/^    public DoWhileNode(Location loc, StmtNode body, ExprNode cond) {$/;"	m	class:DoWhileNode
DoWhileNode	ast/DoWhileNode.java	/^public class DoWhileNode extends StmtNode {$/;"	c
DumpAST	compiler/CompilerMode.java	/^    DumpAST ("--dump-ast"),$/;"	e	enum:CompilerMode	file:
DumpAsm	compiler/CompilerMode.java	/^    DumpAsm ("--dump-asm"),$/;"	e	enum:CompilerMode	file:
DumpExpr	compiler/CompilerMode.java	/^    DumpExpr ("--dump-expr"),$/;"	e	enum:CompilerMode	file:
DumpIR	compiler/CompilerMode.java	/^    DumpIR ("--dump-ir"),$/;"	e	enum:CompilerMode	file:
DumpReference	compiler/CompilerMode.java	/^    DumpReference ("--dump-reference"),$/;"	e	enum:CompilerMode	file:
DumpSemantic	compiler/CompilerMode.java	/^    DumpSemantic ("--dump-semantic"),$/;"	e	enum:CompilerMode	file:
DumpStmt	compiler/CompilerMode.java	/^    DumpStmt ("--dump-stmt"),$/;"	e	enum:CompilerMode	file:
DumpTokens	compiler/CompilerMode.java	/^    DumpTokens ("--dump-tokens"),$/;"	e	enum:CompilerMode	file:
Dumpable	ast/Dumpable.java	/^public interface Dumpable {$/;"	i
Dumpable	ir/Dumpable.java	/^public interface Dumpable {$/;"	i
Dumper	ast/Dumper.java	/^    public Dumper(PrintStream s) {$/;"	m	class:Dumper
Dumper	ast/Dumper.java	/^public class Dumper {$/;"	c
Dumper	ir/Dumper.java	/^    Dumper(PrintStream s) {$/;"	m	class:Dumper
Dumper	ir/Dumper.java	/^public class Dumper {$/;"	c
ELFConstants	sysdep/x86/ELFConstants.java	/^public interface ELFConstants {$/;"	i
EQ	ir/Op.java	/^    EQ,$/;"	e	enum:Op	file:
EXT_ASSEMBLY_SOURCE	compiler/SourceFile.java	/^    static final String EXT_ASSEMBLY_SOURCE = ".s";$/;"	f	class:SourceFile
EXT_CFLAT_SOURCE	compiler/SourceFile.java	/^    static final String EXT_CFLAT_SOURCE = ".cb";$/;"	f	class:SourceFile
EXT_EXECUTABLE_FILE	compiler/SourceFile.java	/^    static final String EXT_EXECUTABLE_FILE = "";$/;"	f	class:SourceFile
EXT_OBJECT_FILE	compiler/SourceFile.java	/^    static final String EXT_OBJECT_FILE = ".o";$/;"	f	class:SourceFile
EXT_SHARED_LIBRARY	compiler/SourceFile.java	/^    static final String EXT_SHARED_LIBRARY = ".so";$/;"	f	class:SourceFile
EXT_STATIC_LIBRARY	compiler/SourceFile.java	/^    static final String EXT_STATIC_LIBRARY = ".a";$/;"	f	class:SourceFile
Entity	entity/Entity.java	/^    public Entity(boolean priv, TypeNode type, String name) {$/;"	m	class:Entity
Entity	entity/Entity.java	/^abstract public class Entity$/;"	c
EntityVisitor	entity/EntityVisitor.java	/^public interface EntityVisitor<T> {$/;"	i
ErrorHandler	utils/ErrorHandler.java	/^    public ErrorHandler(String progid) {$/;"	m	class:ErrorHandler
ErrorHandler	utils/ErrorHandler.java	/^    public ErrorHandler(String progid, OutputStream stream) {$/;"	m	class:ErrorHandler
ErrorHandler	utils/ErrorHandler.java	/^public class ErrorHandler {$/;"	c
Expr	ir/Expr.java	/^    Expr(Type type) {$/;"	m	class:Expr
Expr	ir/Expr.java	/^abstract public class Expr implements Dumpable {$/;"	c
ExprNode	ast/ExprNode.java	/^    public ExprNode() {$/;"	m	class:ExprNode
ExprNode	ast/ExprNode.java	/^abstract public class ExprNode extends Node {$/;"	c
ExprStmt	ir/ExprStmt.java	/^    public ExprStmt(Location loc, Expr expr) {$/;"	m	class:ExprStmt
ExprStmt	ir/ExprStmt.java	/^public class ExprStmt extends Stmt {$/;"	c
ExprStmtNode	ast/ExprStmtNode.java	/^    public ExprStmtNode(Location loc, ExprNode expr) {$/;"	m	class:ExprStmtNode
ExprStmtNode	ast/ExprStmtNode.java	/^public class ExprStmtNode extends StmtNode {$/;"	c
FileException	exception/FileException.java	/^    public FileException(String msg) {$/;"	m	class:FileException
FileException	exception/FileException.java	/^public class FileException extends CompileException {$/;"	c
Filter	sysdep/x86/PeepholeOptimizer.java	/^    abstract class Filter {$/;"	c	class:PeepholeOptimizer
ForNode	ast/ForNode.java	/^    public ForNode(Location loc, $/;"	m	class:ForNode
ForNode	ast/ForNode.java	/^public class ForNode extends StmtNode {$/;"	c
FuncallNode	ast/FuncallNode.java	/^    public FuncallNode(ExprNode expr, List<ExprNode> args) {$/;"	m	class:FuncallNode
FuncallNode	ast/FuncallNode.java	/^public class FuncallNode extends ExprNode {$/;"	c
Function	entity/Function.java	/^    public Function(boolean priv, TypeNode t, String name) {$/;"	m	class:Function
Function	entity/Function.java	/^abstract public class Function extends Entity {$/;"	c
FunctionType	type/FunctionType.java	/^    public FunctionType(Type ret, ParamTypes partypes) {$/;"	m	class:FunctionType
FunctionType	type/FunctionType.java	/^public class FunctionType extends Type {$/;"	c
FunctionTypeRef	type/FunctionTypeRef.java	/^    public FunctionTypeRef(TypeRef returnType, ParamTypeRefs params) {$/;"	m	class:FunctionTypeRef
FunctionTypeRef	type/FunctionTypeRef.java	/^public class FunctionTypeRef extends TypeRef {$/;"	c
GNUAssembler	sysdep/GNUAssembler.java	/^    GNUAssembler(ErrorHandler h) {$/;"	m	class:GNUAssembler
GNUAssembler	sysdep/GNUAssembler.java	/^class GNUAssembler implements Assembler {$/;"	c
GNULinker	sysdep/GNULinker.java	/^    GNULinker(ErrorHandler errorHandler) {$/;"	m	class:GNULinker
GNULinker	sysdep/GNULinker.java	/^class GNULinker implements Linker {$/;"	c
GOT	sysdep/x86/CodeGenerator.java	/^    static private final Symbol GOT = new NamedSymbol("_GLOBAL_OFFSET_TABLE_");$/;"	f	class:CodeGenerator	file:
GOTBaseReg	sysdep/x86/CodeGenerator.java	/^    private Register GOTBaseReg() {$/;"	m	class:CodeGenerator	file:
GotoNode	ast/GotoNode.java	/^    public GotoNode(Location loc, String target) {$/;"	m	class:GotoNode
GotoNode	ast/GotoNode.java	/^public class GotoNode extends StmtNode {$/;"	c
INT16	asm/Type.java	/^    INT8, INT16, INT32, INT64;$/;"	e	enum:Type	file:
INT32	asm/Type.java	/^    INT8, INT16, INT32, INT64;$/;"	e	enum:Type	file:
INT64	asm/Type.java	/^    INT8, INT16, INT32, INT64;$/;"	e	enum:Type	file:
INT8	asm/Type.java	/^    INT8, INT16, INT32, INT64;$/;"	e	enum:Type	file:
IPCException	exception/IPCException.java	/^    public IPCException(String msg) {$/;"	m	class:IPCException
IPCException	exception/IPCException.java	/^public class IPCException extends CompileException {$/;"	c
IR	ir/IR.java	/^    public IR(Location source,$/;"	m	class:IR
IR	ir/IR.java	/^public class IR {$/;"	c
IRGenerator	compiler/IRGenerator.java	/^    public IRGenerator(TypeTable typeTable, ErrorHandler errorHandler) {$/;"	m	class:IRGenerator
IRGenerator	compiler/IRGenerator.java	/^class IRGenerator implements ASTVisitor<Void, Expr> {$/;"	c
IRVisitor	ir/IRVisitor.java	/^public interface IRVisitor<S,E> {$/;"	i
IfNode	ast/IfNode.java	/^    public IfNode(Location loc, ExprNode c, StmtNode t, StmtNode e) {$/;"	m	class:IfNode
IfNode	ast/IfNode.java	/^public class IfNode extends StmtNode {$/;"	c
ImmediateValue	asm/ImmediateValue.java	/^    public ImmediateValue(Literal expr) {$/;"	m	class:ImmediateValue
ImmediateValue	asm/ImmediateValue.java	/^    public ImmediateValue(long n) {$/;"	m	class:ImmediateValue
ImmediateValue	asm/ImmediateValue.java	/^public class ImmediateValue extends Operand {$/;"	c
IndirectMemoryReference	asm/IndirectMemoryReference.java	/^    private IndirectMemoryReference($/;"	m	class:IndirectMemoryReference	file:
IndirectMemoryReference	asm/IndirectMemoryReference.java	/^    public IndirectMemoryReference(Symbol offset, Register base) {$/;"	m	class:IndirectMemoryReference
IndirectMemoryReference	asm/IndirectMemoryReference.java	/^    public IndirectMemoryReference(long offset, Register base) {$/;"	m	class:IndirectMemoryReference
IndirectMemoryReference	asm/IndirectMemoryReference.java	/^public class IndirectMemoryReference extends MemoryReference {$/;"	c
InsnPattern	sysdep/x86/PeepholeOptimizer.java	/^        InsnPattern(String name, OperandPattern pat1, OperandPattern pat2) {$/;"	m	class:PeepholeOptimizer.InsnPattern
InsnPattern	sysdep/x86/PeepholeOptimizer.java	/^    class InsnPattern {$/;"	c	class:PeepholeOptimizer
InsnTransform	sysdep/x86/PeepholeOptimizer.java	/^    interface InsnTransform {$/;"	i	class:PeepholeOptimizer
Instruction	asm/Instruction.java	/^    public Instruction(String mnemonic) {$/;"	m	class:Instruction
Instruction	asm/Instruction.java	/^    public Instruction(String mnemonic, String suffix, Operand a1) {$/;"	m	class:Instruction
Instruction	asm/Instruction.java	/^    public Instruction(String mnemonic, String suffix, Operand[] operands, boolean reloc) {$/;"	m	class:Instruction
Instruction	asm/Instruction.java	/^    public Instruction(String mnemonic, String suffix,$/;"	m	class:Instruction
Instruction	asm/Instruction.java	/^public class Instruction extends Assembly {$/;"	c
Int	ir/Int.java	/^    public Int(Type type, long value) {$/;"	m	class:Int
Int	ir/Int.java	/^public class Int extends Expr {$/;"	c
IntegerLiteral	asm/IntegerLiteral.java	/^    public IntegerLiteral(long n) {$/;"	m	class:IntegerLiteral
IntegerLiteral	asm/IntegerLiteral.java	/^public class IntegerLiteral implements Literal {$/;"	c
IntegerLiteralNode	ast/IntegerLiteralNode.java	/^    public IntegerLiteralNode(Location loc, TypeRef ref, long value) {$/;"	m	class:IntegerLiteralNode
IntegerLiteralNode	ast/IntegerLiteralNode.java	/^public class IntegerLiteralNode extends LiteralNode {$/;"	c
IntegerType	type/IntegerType.java	/^    public IntegerType(long size, boolean isSigned, String name) {$/;"	m	class:IntegerType
IntegerType	type/IntegerType.java	/^public class IntegerType extends Type {$/;"	c
IntegerTypeRef	type/IntegerTypeRef.java	/^    public IntegerTypeRef(String name) {$/;"	m	class:IntegerTypeRef
IntegerTypeRef	type/IntegerTypeRef.java	/^    public IntegerTypeRef(String name, Location loc) {$/;"	m	class:IntegerTypeRef
IntegerTypeRef	type/IntegerTypeRef.java	/^public class IntegerTypeRef extends TypeRef {$/;"	c
Jump	ir/Jump.java	/^    public Jump(Location loc, Label label) {$/;"	m	class:Jump
Jump	ir/Jump.java	/^public class Jump extends Stmt {$/;"	c
JumpEliminationFilter	sysdep/x86/PeepholeOptimizer.java	/^        public JumpEliminationFilter() {$/;"	m	class:PeepholeOptimizer.JumpEliminationFilter
JumpEliminationFilter	sysdep/x86/PeepholeOptimizer.java	/^    class JumpEliminationFilter extends Filter {$/;"	c	class:PeepholeOptimizer
JumpEntry	compiler/IRGenerator.java	/^        public JumpEntry(Label label) {$/;"	m	class:IRGenerator.JumpEntry
JumpEntry	compiler/IRGenerator.java	/^    class JumpEntry {$/;"	c	class:IRGenerator
JumpError	exception/JumpError.java	/^    public JumpError(String msg) {$/;"	m	class:JumpError
JumpError	exception/JumpError.java	/^public class JumpError extends SemanticError {$/;"	c
KNOWN_EXTENSIONS	compiler/SourceFile.java	/^    static final String[] KNOWN_EXTENSIONS = {$/;"	f	class:SourceFile
LABEL_SYMBOL_BASE	sysdep/x86/CodeGenerator.java	/^    static final String LABEL_SYMBOL_BASE = ".L";$/;"	f	class:CodeGenerator
LHSNode	ast/LHSNode.java	/^abstract public class LHSNode extends ExprNode {$/;"	c
LINKER	sysdep/GNULinker.java	/^    static final private String LINKER = "\/usr\/bin\/ld";$/;"	f	class:GNULinker	file:
Label	asm/Label.java	/^    public Label() {$/;"	m	class:Label
Label	asm/Label.java	/^    public Label(Symbol sym) {$/;"	m	class:Label
Label	asm/Label.java	/^public class Label extends Assembly {$/;"	c
LabelNode	ast/LabelNode.java	/^    public LabelNode(Location loc, String name, StmtNode stmt) {$/;"	m	class:LabelNode
LabelNode	ast/LabelNode.java	/^public class LabelNode extends StmtNode {$/;"	c
LabelStmt	ir/LabelStmt.java	/^    public LabelStmt(Location loc, Label label) {$/;"	m	class:LabelStmt
LabelStmt	ir/LabelStmt.java	/^public class LabelStmt extends Stmt {$/;"	c
LdArg	compiler/LdArg.java	/^interface LdArg {$/;"	i
LdOption	compiler/LdOption.java	/^    LdOption(String arg) {$/;"	m	class:LdOption
LdOption	compiler/LdOption.java	/^class LdOption implements LdArg {$/;"	c
LibraryLoader	parser/LibraryLoader.java	/^    public LibraryLoader() {$/;"	m	class:LibraryLoader
LibraryLoader	parser/LibraryLoader.java	/^    public LibraryLoader(List<String> loadPath) {$/;"	m	class:LibraryLoader
LibraryLoader	parser/LibraryLoader.java	/^public class LibraryLoader {$/;"	c
Link	compiler/CompilerMode.java	/^    Link ("--link");$/;"	e	enum:CompilerMode	file:
Linkage_linkonce	sysdep/x86/ELFConstants.java	/^    static public final String Linkage_linkonce = "comdat";$/;"	f	interface:ELFConstants
Linker	sysdep/Linker.java	/^public interface Linker {$/;"	i
LinkerOptions	sysdep/LinkerOptions.java	/^public class LinkerOptions {$/;"	c
ListUtils	utils/ListUtils.java	/^public abstract class ListUtils {$/;"	c
Literal	asm/Literal.java	/^public interface Literal extends Comparable<Literal> {$/;"	i
LiteralNode	ast/LiteralNode.java	/^    public LiteralNode(Location loc, TypeRef ref) {$/;"	m	class:LiteralNode
LiteralNode	ast/LiteralNode.java	/^abstract public class LiteralNode extends ExprNode {$/;"	c
LocalResolver	compiler/LocalResolver.java	/^    public LocalResolver(ErrorHandler h) {$/;"	m	class:LocalResolver
LocalResolver	compiler/LocalResolver.java	/^public class LocalResolver extends Visitor {$/;"	c
LocalScope	entity/LocalScope.java	/^    public LocalScope(Scope parent) {$/;"	m	class:LocalScope
LocalScope	entity/LocalScope.java	/^public class LocalScope extends Scope {$/;"	c
Location	ast/Location.java	/^    public Location(String sourceName, CflatToken token) {$/;"	m	class:Location
Location	ast/Location.java	/^    public Location(String sourceName, Token token) {$/;"	m	class:Location
Location	ast/Location.java	/^public class Location {$/;"	c
LogicalAndNode	ast/LogicalAndNode.java	/^    public LogicalAndNode(ExprNode left, ExprNode right) {$/;"	m	class:LogicalAndNode
LogicalAndNode	ast/LogicalAndNode.java	/^public class LogicalAndNode extends BinaryOpNode {$/;"	c
LogicalOrNode	ast/LogicalOrNode.java	/^    public LogicalOrNode(ExprNode left, ExprNode right) {$/;"	m	class:LogicalOrNode
LogicalOrNode	ast/LogicalOrNode.java	/^public class LogicalOrNode extends BinaryOpNode {$/;"	c
MUL	ir/Op.java	/^    MUL,$/;"	e	enum:Op	file:
Mem	ir/Mem.java	/^    public Mem(Type type, Expr expr) {$/;"	m	class:Mem
Mem	ir/Mem.java	/^public class Mem extends Expr {$/;"	c
MemInfo	sysdep/x86/CodeGenerator.java	/^        MemInfo(MemoryReference mem, String name) {$/;"	m	class:CodeGenerator.MemInfo
MemInfo	sysdep/x86/CodeGenerator.java	/^    class MemInfo {$/;"	c	class:CodeGenerator
MemberNode	ast/MemberNode.java	/^    public MemberNode(ExprNode expr, String member) {$/;"	m	class:MemberNode
MemberNode	ast/MemberNode.java	/^public class MemberNode extends LHSNode {$/;"	c
MemoryReference	asm/MemoryReference.java	/^abstract public class MemoryReference$/;"	c
NEQ	ir/Op.java	/^    NEQ,$/;"	e	enum:Op	file:
NOT	ir/Op.java	/^    NOT,$/;"	e	enum:Op	file:
NUM_LEFT_COLUMNS	ast/AST.java	/^    static final private int NUM_LEFT_COLUMNS = 24;$/;"	f	class:AST	file:
NamedSymbol	asm/NamedSymbol.java	/^    public NamedSymbol(String name) {$/;"	m	class:NamedSymbol
NamedSymbol	asm/NamedSymbol.java	/^public class NamedSymbol extends BaseSymbol {$/;"	c
NamedType	type/NamedType.java	/^    public NamedType(String name, Location loc) {$/;"	m	class:NamedType
NamedType	type/NamedType.java	/^abstract public class NamedType extends Type {$/;"	c
Node	ast/Node.java	/^    public Node() {$/;"	m	class:Node
Node	ast/Node.java	/^abstract public class Node implements Dumpable {$/;"	c
Op	ir/Op.java	/^public enum Op {$/;"	g
OpAssignNode	ast/OpAssignNode.java	/^    public OpAssignNode(ExprNode lhs, String op, ExprNode rhs) {$/;"	m	class:OpAssignNode
OpAssignNode	ast/OpAssignNode.java	/^public class OpAssignNode extends AbstractAssignNode {$/;"	c
Operand	asm/Operand.java	/^abstract public class Operand implements OperandPattern {$/;"	c
OperandPattern	asm/OperandPattern.java	/^public interface OperandPattern {$/;"	i
OptionParseError	exception/OptionParseError.java	/^    public OptionParseError(String msg) {$/;"	m	class:OptionParseError
OptionParseError	exception/OptionParseError.java	/^public class OptionParseError extends Error {$/;"	c
Options	compiler/Options.java	/^class Options {$/;"	c
PARAM_START_WORD	sysdep/x86/CodeGenerator.java	/^    static final private long PARAM_START_WORD = 2;$/;"	f	class:CodeGenerator	file:
PICThunk	sysdep/x86/CodeGenerator.java	/^    private void PICThunk(AssemblyCode file, Register reg) {$/;"	m	class:CodeGenerator	file:
PICThunkSectionFlags	sysdep/x86/CodeGenerator.java	/^    PICThunkSectionFlags = SectionFlag_allocatable$/;"	f	class:CodeGenerator	file:
PICThunkSymbol	sysdep/x86/CodeGenerator.java	/^    private Symbol PICThunkSymbol(Register reg) {$/;"	m	class:CodeGenerator	file:
PLTSymbol	sysdep/x86/CodeGenerator.java	/^    private Symbol PLTSymbol(Symbol base) {$/;"	m	class:CodeGenerator	file:
ParamSlots	entity/ParamSlots.java	/^    protected ParamSlots(Location loc, List<T> paramDescs, boolean vararg) {$/;"	m	class:ParamSlots
ParamSlots	entity/ParamSlots.java	/^    public ParamSlots(List<T> paramDescs) {$/;"	m	class:ParamSlots
ParamSlots	entity/ParamSlots.java	/^    public ParamSlots(Location loc, List<T> paramDescs) {$/;"	m	class:ParamSlots
ParamSlots	entity/ParamSlots.java	/^abstract public class ParamSlots<T> {$/;"	c
ParamTypeRefs	type/ParamTypeRefs.java	/^    public ParamTypeRefs(List<TypeRef> paramDescs) {$/;"	m	class:ParamTypeRefs
ParamTypeRefs	type/ParamTypeRefs.java	/^    public ParamTypeRefs(Location loc, List<TypeRef> paramDescs, boolean vararg) {$/;"	m	class:ParamTypeRefs
ParamTypeRefs	type/ParamTypeRefs.java	/^public class ParamTypeRefs extends ParamSlots<TypeRef> {$/;"	c
ParamTypes	type/ParamTypes.java	/^    protected ParamTypes(Location loc, List<Type> paramDescs, boolean vararg) {$/;"	m	class:ParamTypes
ParamTypes	type/ParamTypes.java	/^public class ParamTypes extends ParamSlots<Type> {$/;"	c
Parameter	entity/Parameter.java	/^    public Parameter(TypeNode type, String name) {$/;"	m	class:Parameter
Parameter	entity/Parameter.java	/^public class Parameter extends DefinedVariable {$/;"	c
Params	entity/Params.java	/^    public Params(Location loc, List<Parameter> paramDescs) {$/;"	m	class:Params
Params	entity/Params.java	/^public class Params extends ParamSlots<Parameter>$/;"	c
PeepholeOptimizer	sysdep/x86/PeepholeOptimizer.java	/^    public PeepholeOptimizer() {$/;"	m	class:PeepholeOptimizer
PeepholeOptimizer	sysdep/x86/PeepholeOptimizer.java	/^public class PeepholeOptimizer {$/;"	c
Platform	sysdep/Platform.java	/^public interface Platform {$/;"	i
PointerType	type/PointerType.java	/^    public PointerType(long size, Type baseType) {$/;"	m	class:PointerType
PointerType	type/PointerType.java	/^public class PointerType extends Type {$/;"	c
PointerTypeRef	type/PointerTypeRef.java	/^    public PointerTypeRef(TypeRef baseType) {$/;"	m	class:PointerTypeRef
PointerTypeRef	type/PointerTypeRef.java	/^public class PointerTypeRef extends TypeRef {$/;"	c
PrefixOpNode	ast/PrefixOpNode.java	/^    public PrefixOpNode(String op, ExprNode expr) {$/;"	m	class:PrefixOpNode
PrefixOpNode	ast/PrefixOpNode.java	/^public class PrefixOpNode extends UnaryArithmeticOpNode {$/;"	c
PrintAsm	compiler/CompilerMode.java	/^    PrintAsm ("--print-asm"),$/;"	e	enum:CompilerMode	file:
ProgramName	compiler/Compiler.java	/^    static final public String ProgramName = "cbc";$/;"	f	class:Compiler
PtrMemberNode	ast/PtrMemberNode.java	/^    public PtrMemberNode(ExprNode expr, String member) {$/;"	m	class:PtrMemberNode
PtrMemberNode	ast/PtrMemberNode.java	/^public class PtrMemberNode extends LHSNode {$/;"	c
Register	asm/Register.java	/^abstract public class Register extends Operand {$/;"	c
Register	sysdep/x86/Register.java	/^    Register(RegisterClass _class, Type type) {$/;"	m	class:Register
Register	sysdep/x86/Register.java	/^class Register extends net.loveruby.cflat.asm.Register {$/;"	c
RegisterClass	sysdep/x86/RegisterClass.java	/^enum RegisterClass {$/;"	g
Return	ir/Return.java	/^    public Return(Location loc, Expr expr) {$/;"	m	class:Return
Return	ir/Return.java	/^public class Return extends Stmt {$/;"	c
ReturnNode	ast/ReturnNode.java	/^    public ReturnNode(Location loc, ExprNode expr) {$/;"	m	class:ReturnNode
ReturnNode	ast/ReturnNode.java	/^public class ReturnNode extends StmtNode {$/;"	c
SI	sysdep/x86/RegisterClass.java	/^    AX, BX, CX, DX, SI, DI, SP, BP;$/;"	e	enum:RegisterClass	file:
SP	sysdep/x86/RegisterClass.java	/^    AX, BX, CX, DX, SI, DI, SP, BP;$/;"	e	enum:RegisterClass	file:
STACK_WORD_SIZE	sysdep/x86/CodeGenerator.java	/^    static final private long STACK_WORD_SIZE = 4;$/;"	f	class:CodeGenerator	file:
SUB	ir/Op.java	/^    SUB,$/;"	e	enum:Op	file:
S_CAST	ir/Op.java	/^    S_CAST,$/;"	e	enum:Op	file:
S_DIV	ir/Op.java	/^    S_DIV,$/;"	e	enum:Op	file:
S_GT	ir/Op.java	/^    S_GT,$/;"	e	enum:Op	file:
S_GTEQ	ir/Op.java	/^    S_GTEQ,$/;"	e	enum:Op	file:
S_LT	ir/Op.java	/^    S_LT,$/;"	e	enum:Op	file:
S_LTEQ	ir/Op.java	/^    S_LTEQ,$/;"	e	enum:Op	file:
S_MOD	ir/Op.java	/^    S_MOD,$/;"	e	enum:Op	file:
Scope	entity/Scope.java	/^    public Scope() {$/;"	m	class:Scope
Scope	entity/Scope.java	/^abstract public class Scope {$/;"	c
SectionFlag_allocatable	sysdep/x86/ELFConstants.java	/^    static public final String SectionFlag_allocatable = "a";$/;"	f	interface:ELFConstants
SectionFlag_executable	sysdep/x86/ELFConstants.java	/^    static public final String SectionFlag_executable = "x";$/;"	f	interface:ELFConstants
SectionFlag_sectiongroup	sysdep/x86/ELFConstants.java	/^    static public final String SectionFlag_sectiongroup = "G";$/;"	f	interface:ELFConstants
SectionFlag_strings	sysdep/x86/ELFConstants.java	/^    static public final String SectionFlag_strings = "S";$/;"	f	interface:ELFConstants
SectionFlag_threadlocalstorage	sysdep/x86/ELFConstants.java	/^    static public final String SectionFlag_threadlocalstorage = "T";$/;"	f	interface:ELFConstants
SectionFlag_writable	sysdep/x86/ELFConstants.java	/^    static public final String SectionFlag_writable = "w";$/;"	f	interface:ELFConstants
SectionType_bits	sysdep/x86/ELFConstants.java	/^    static public final String SectionType_bits = "@progbits";$/;"	f	interface:ELFConstants
SectionType_nobits	sysdep/x86/ELFConstants.java	/^    static public final String SectionType_nobits = "@nobits";$/;"	f	interface:ELFConstants
SectionType_note	sysdep/x86/ELFConstants.java	/^    static public final String SectionType_note = "@note";$/;"	f	interface:ELFConstants
SemanticError	exception/SemanticError.java	/^    public SemanticError(String msg) {$/;"	m	class:SemanticError
SemanticError	exception/SemanticError.java	/^public class SemanticError extends Error {$/;"	c
SemanticException	exception/SemanticException.java	/^    public SemanticException(String msg) {$/;"	m	class:SemanticException
SemanticException	exception/SemanticException.java	/^public class SemanticException extends CompileException {$/;"	c
SingleInsnFilter	sysdep/x86/PeepholeOptimizer.java	/^        public SingleInsnFilter(InsnPattern pattern, InsnTransform transform) {$/;"	m	class:PeepholeOptimizer.SingleInsnFilter
SingleInsnFilter	sysdep/x86/PeepholeOptimizer.java	/^    class SingleInsnFilter extends Filter {$/;"	c	class:PeepholeOptimizer
SizeofExprNode	ast/SizeofExprNode.java	/^    public SizeofExprNode(ExprNode expr, TypeRef type) {$/;"	m	class:SizeofExprNode
SizeofExprNode	ast/SizeofExprNode.java	/^public class SizeofExprNode extends ExprNode {$/;"	c
SizeofTypeNode	ast/SizeofTypeNode.java	/^    public SizeofTypeNode(TypeNode operand, TypeRef type) {$/;"	m	class:SizeofTypeNode
SizeofTypeNode	ast/SizeofTypeNode.java	/^public class SizeofTypeNode extends ExprNode {$/;"	c
Slot	ast/Slot.java	/^    public Slot(TypeNode t, String n) {$/;"	m	class:Slot
Slot	ast/Slot.java	/^public class Slot extends Node {$/;"	c
SourceFile	compiler/SourceFile.java	/^    SourceFile(String name) {$/;"	m	class:SourceFile
SourceFile	compiler/SourceFile.java	/^class SourceFile implements LdArg {$/;"	c
StackFrameInfo	sysdep/x86/CodeGenerator.java	/^    class StackFrameInfo {$/;"	c	class:CodeGenerator
Statistics	asm/Statistics.java	/^    public Statistics() {$/;"	m	class:Statistics
Statistics	asm/Statistics.java	/^public class Statistics {$/;"	c
Stmt	ir/Stmt.java	/^    public Stmt(Location loc) {$/;"	m	class:Stmt
Stmt	ir/Stmt.java	/^abstract public class Stmt implements Dumpable {$/;"	c
StmtNode	ast/StmtNode.java	/^    public StmtNode(Location loc) {$/;"	m	class:StmtNode
StmtNode	ast/StmtNode.java	/^abstract public class StmtNode extends Node {$/;"	c
Str	ir/Str.java	/^    public Str(Type type, ConstantEntry entry) {$/;"	m	class:Str
Str	ir/Str.java	/^public class Str extends Expr {$/;"	c
StringLiteralNode	ast/StringLiteralNode.java	/^    public StringLiteralNode(Location loc, TypeRef ref, String value) {$/;"	m	class:StringLiteralNode
StringLiteralNode	ast/StringLiteralNode.java	/^public class StringLiteralNode extends LiteralNode {$/;"	c
StructNode	ast/StructNode.java	/^    public StructNode(Location loc, TypeRef ref, String name, List<Slot> membs) {$/;"	m	class:StructNode
StructNode	ast/StructNode.java	/^public class StructNode extends CompositeTypeDefinition {$/;"	c
StructType	type/StructType.java	/^    public StructType(String name, List<Slot> membs, Location loc) {$/;"	m	class:StructType
StructType	type/StructType.java	/^public class StructType extends CompositeType {$/;"	c
StructTypeRef	type/StructTypeRef.java	/^    public StructTypeRef(Location loc, String name) {$/;"	m	class:StructTypeRef
StructTypeRef	type/StructTypeRef.java	/^    public StructTypeRef(String name) {$/;"	m	class:StructTypeRef
StructTypeRef	type/StructTypeRef.java	/^public class StructTypeRef extends TypeRef {$/;"	c
SuffixOpNode	ast/SuffixOpNode.java	/^    public SuffixOpNode(String op, ExprNode expr) {$/;"	m	class:SuffixOpNode
SuffixOpNode	ast/SuffixOpNode.java	/^public class SuffixOpNode extends UnaryArithmeticOpNode {$/;"	c
SuffixedSymbol	asm/SuffixedSymbol.java	/^    public SuffixedSymbol(Symbol base, String suffix) {$/;"	m	class:SuffixedSymbol
SuffixedSymbol	asm/SuffixedSymbol.java	/^public class SuffixedSymbol implements Symbol {$/;"	c
Switch	ir/Switch.java	/^    public Switch(Location loc, Expr cond,$/;"	m	class:Switch
Switch	ir/Switch.java	/^public class Switch extends Stmt {$/;"	c
SwitchNode	ast/SwitchNode.java	/^    public SwitchNode(Location loc, ExprNode cond, List<CaseNode> cases) {$/;"	m	class:SwitchNode
SwitchNode	ast/SwitchNode.java	/^public class SwitchNode extends StmtNode {$/;"	c
Symbol	asm/Symbol.java	/^public interface Symbol extends Literal {$/;"	i
SymbolTable	asm/SymbolTable.java	/^    public SymbolTable(String base) {$/;"	m	class:SymbolTable
SymbolTable	asm/SymbolTable.java	/^public class SymbolTable {$/;"	c
SymbolType_function	sysdep/x86/ELFConstants.java	/^    static public final String SymbolType_function = "@function";$/;"	f	interface:ELFConstants
SyntaxException	exception/SyntaxException.java	/^    public SyntaxException(String msg) {$/;"	m	class:SyntaxException
SyntaxException	exception/SyntaxException.java	/^public class SyntaxException extends CompileException {$/;"	c
TextUtils	utils/TextUtils.java	/^abstract public class TextUtils {$/;"	c
ToplevelScope	entity/ToplevelScope.java	/^    public ToplevelScope() {$/;"	m	class:ToplevelScope
ToplevelScope	entity/ToplevelScope.java	/^public class ToplevelScope extends Scope {$/;"	c
Type	asm/Type.java	/^public enum Type {$/;"	g
Type	type/Type.java	/^public abstract class Type {$/;"	c
TypeChecker	compiler/TypeChecker.java	/^    public TypeChecker(TypeTable typeTable, ErrorHandler errorHandler) {$/;"	m	class:TypeChecker
TypeChecker	compiler/TypeChecker.java	/^class TypeChecker extends Visitor {$/;"	c
TypeDefinition	ast/TypeDefinition.java	/^    public TypeDefinition(Location loc, TypeRef ref, String name) {$/;"	m	class:TypeDefinition
TypeDefinition	ast/TypeDefinition.java	/^abstract public class TypeDefinition extends Node {$/;"	c
TypeNode	ast/TypeNode.java	/^    public TypeNode(Type type) {$/;"	m	class:TypeNode
TypeNode	ast/TypeNode.java	/^    public TypeNode(TypeRef ref) {$/;"	m	class:TypeNode
TypeNode	ast/TypeNode.java	/^public class TypeNode extends Node {$/;"	c
TypeRef	type/TypeRef.java	/^    public TypeRef(Location loc) {$/;"	m	class:TypeRef
TypeRef	type/TypeRef.java	/^public abstract class TypeRef {$/;"	c
TypeResolver	compiler/TypeResolver.java	/^    public TypeResolver(TypeTable typeTable, ErrorHandler errorHandler) {$/;"	m	class:TypeResolver
TypeResolver	compiler/TypeResolver.java	/^public class TypeResolver extends Visitor$/;"	c
TypeTable	type/TypeTable.java	/^    public TypeTable(int intSize, int longSize, int pointerSize) {$/;"	m	class:TypeTable
TypeTable	type/TypeTable.java	/^public class TypeTable {$/;"	c
TypedefNode	ast/TypedefNode.java	/^    public TypedefNode(Location loc, TypeRef real, String name) {$/;"	m	class:TypedefNode
TypedefNode	ast/TypedefNode.java	/^public class TypedefNode extends TypeDefinition {$/;"	c
UMINUS	ir/Op.java	/^    UMINUS,$/;"	e	enum:Op	file:
U_CAST	ir/Op.java	/^    U_CAST;$/;"	e	enum:Op	file:
U_DIV	ir/Op.java	/^    U_DIV,$/;"	e	enum:Op	file:
U_GT	ir/Op.java	/^    U_GT,$/;"	e	enum:Op	file:
U_GTEQ	ir/Op.java	/^    U_GTEQ,$/;"	e	enum:Op	file:
U_LT	ir/Op.java	/^    U_LT,$/;"	e	enum:Op	file:
U_LTEQ	ir/Op.java	/^    U_LTEQ,$/;"	e	enum:Op	file:
U_MOD	ir/Op.java	/^    U_MOD,$/;"	e	enum:Op	file:
UnaryArithmeticOpNode	ast/UnaryArithmeticOpNode.java	/^    public UnaryArithmeticOpNode(String op, ExprNode expr) {$/;"	m	class:UnaryArithmeticOpNode
UnaryArithmeticOpNode	ast/UnaryArithmeticOpNode.java	/^public class UnaryArithmeticOpNode extends UnaryOpNode {$/;"	c
UnaryOpNode	ast/UnaryOpNode.java	/^    public UnaryOpNode(String op, ExprNode expr) {$/;"	m	class:UnaryOpNode
UnaryOpNode	ast/UnaryOpNode.java	/^public class UnaryOpNode extends ExprNode {$/;"	c
UndefinedFunction	entity/UndefinedFunction.java	/^    public UndefinedFunction(TypeNode t, String name, Params params) {$/;"	m	class:UndefinedFunction
UndefinedFunction	entity/UndefinedFunction.java	/^public class UndefinedFunction extends Function {$/;"	c
UndefinedVariable	entity/UndefinedVariable.java	/^    public UndefinedVariable(TypeNode t, String name) {$/;"	m	class:UndefinedVariable
UndefinedVariable	entity/UndefinedVariable.java	/^public class UndefinedVariable extends Variable {$/;"	c
Uni	ir/Uni.java	/^    public Uni(Type type, Op op, Expr expr) {$/;"	m	class:Uni
Uni	ir/Uni.java	/^public class Uni extends Expr {$/;"	c
UnionNode	ast/UnionNode.java	/^    public UnionNode(Location loc, TypeRef ref, String name, List<Slot> membs) {$/;"	m	class:UnionNode
UnionNode	ast/UnionNode.java	/^public class UnionNode extends CompositeTypeDefinition {$/;"	c
UnionType	type/UnionType.java	/^    public UnionType(String name, List<Slot> membs, Location loc) {$/;"	m	class:UnionType
UnionType	type/UnionType.java	/^public class UnionType extends CompositeType {$/;"	c
UnionTypeRef	type/UnionTypeRef.java	/^    public UnionTypeRef(Location loc, String name) {$/;"	m	class:UnionTypeRef
UnionTypeRef	type/UnionTypeRef.java	/^    public UnionTypeRef(String name) {$/;"	m	class:UnionTypeRef
UnionTypeRef	type/UnionTypeRef.java	/^public class UnionTypeRef extends TypeRef {$/;"	c
UnnamedSymbol	asm/UnnamedSymbol.java	/^    public UnnamedSymbol() {$/;"	m	class:UnnamedSymbol
UnnamedSymbol	asm/UnnamedSymbol.java	/^public class UnnamedSymbol extends BaseSymbol {$/;"	c
UserType	type/UserType.java	/^    public UserType(String name, TypeNode real, Location loc) {$/;"	m	class:UserType
UserType	type/UserType.java	/^public class UserType extends NamedType {$/;"	c
UserTypeRef	type/UserTypeRef.java	/^    public UserTypeRef(Location loc, String name) {$/;"	m	class:UserTypeRef
UserTypeRef	type/UserTypeRef.java	/^    public UserTypeRef(String name) {$/;"	m	class:UserTypeRef
UserTypeRef	type/UserTypeRef.java	/^public class UserTypeRef extends TypeRef {$/;"	c
Var	ir/Var.java	/^    public Var(Type type, Entity entity) {$/;"	m	class:Var
Var	ir/Var.java	/^public class Var extends Expr {$/;"	c
Variable	entity/Variable.java	/^    public Variable(boolean priv, TypeNode type, String name) {$/;"	m	class:Variable
Variable	entity/Variable.java	/^abstract public class Variable extends Entity {$/;"	c
VariableNode	ast/VariableNode.java	/^    public VariableNode(DefinedVariable var) {$/;"	m	class:VariableNode
VariableNode	ast/VariableNode.java	/^    public VariableNode(Location loc, String name) {$/;"	m	class:VariableNode
VariableNode	ast/VariableNode.java	/^public class VariableNode extends LHSNode {$/;"	c
Version	compiler/Compiler.java	/^    static final public String Version = "1.0.0";$/;"	f	class:Compiler
VirtualStack	sysdep/x86/AssemblyCode.java	/^        VirtualStack() {$/;"	m	class:AssemblyCode.VirtualStack
VirtualStack	sysdep/x86/AssemblyCode.java	/^    class VirtualStack {$/;"	c	class:AssemblyCode
Visitor	compiler/Visitor.java	/^    public Visitor() {$/;"	m	class:Visitor
Visitor	compiler/Visitor.java	/^abstract public class Visitor implements ASTVisitor<Void, Void> {$/;"	c
VoidType	type/VoidType.java	/^    public VoidType() {$/;"	m	class:VoidType
VoidType	type/VoidType.java	/^public class VoidType extends Type {$/;"	c
VoidTypeRef	type/VoidTypeRef.java	/^    public VoidTypeRef() {$/;"	m	class:VoidTypeRef
VoidTypeRef	type/VoidTypeRef.java	/^    public VoidTypeRef(Location loc) {$/;"	m	class:VoidTypeRef
VoidTypeRef	type/VoidTypeRef.java	/^public class VoidTypeRef extends TypeRef {$/;"	c
WhileNode	ast/WhileNode.java	/^    public WhileNode(Location loc, ExprNode cond, StmtNode body) {$/;"	m	class:WhileNode
WhileNode	ast/WhileNode.java	/^public class WhileNode extends StmtNode {$/;"	c
X86Linux	sysdep/X86Linux.java	/^public class X86Linux implements Platform {$/;"	c
_align	sysdep/x86/AssemblyCode.java	/^    void _align(long n) {$/;"	m	class:AssemblyCode
_byte	sysdep/x86/AssemblyCode.java	/^    void _byte(Literal val) {$/;"	m	class:AssemblyCode
_byte	sysdep/x86/AssemblyCode.java	/^    void _byte(long val) {$/;"	m	class:AssemblyCode
_checkRecursiveDefinition	type/TypeTable.java	/^    protected void _checkRecursiveDefinition(Type t,$/;"	m	class:TypeTable
_class	sysdep/x86/Register.java	/^    RegisterClass _class;$/;"	f	class:Register
_comm	sysdep/x86/AssemblyCode.java	/^    void _comm(Symbol sym, long size, long alignment) {$/;"	m	class:AssemblyCode
_data	sysdep/x86/AssemblyCode.java	/^    void _data() {$/;"	m	class:AssemblyCode
_dump	ast/AST.java	/^    protected void _dump(Dumper d) {$/;"	m	class:AST
_dump	ast/AbstractAssignNode.java	/^    protected void _dump(Dumper d) {$/;"	m	class:AbstractAssignNode
_dump	ast/AddressNode.java	/^    protected void _dump(Dumper d) {$/;"	m	class:AddressNode
_dump	ast/ArefNode.java	/^    protected void _dump(Dumper d) {$/;"	m	class:ArefNode
_dump	ast/BinaryOpNode.java	/^    protected void _dump(Dumper d) {$/;"	m	class:BinaryOpNode
_dump	ast/BlockNode.java	/^    protected void _dump(Dumper d) {$/;"	m	class:BlockNode
_dump	ast/BreakNode.java	/^    protected void _dump(Dumper d) {$/;"	m	class:BreakNode
_dump	ast/CaseNode.java	/^    protected void _dump(Dumper d) {$/;"	m	class:CaseNode
_dump	ast/CastNode.java	/^    protected void _dump(Dumper d) {$/;"	m	class:CastNode
_dump	ast/CompositeTypeDefinition.java	/^    protected void _dump(Dumper d) {$/;"	m	class:CompositeTypeDefinition
_dump	ast/CondExprNode.java	/^    protected void _dump(Dumper d) {$/;"	m	class:CondExprNode
_dump	ast/ContinueNode.java	/^    protected void _dump(Dumper d) {$/;"	m	class:ContinueNode
_dump	ast/DereferenceNode.java	/^    protected void _dump(Dumper d) {$/;"	m	class:DereferenceNode
_dump	ast/DoWhileNode.java	/^    protected void _dump(Dumper d) {$/;"	m	class:DoWhileNode
_dump	ast/ExprStmtNode.java	/^    protected void _dump(Dumper d) {$/;"	m	class:ExprStmtNode
_dump	ast/ForNode.java	/^    protected void _dump(Dumper d) {$/;"	m	class:ForNode
_dump	ast/FuncallNode.java	/^    protected void _dump(Dumper d) {$/;"	m	class:FuncallNode
_dump	ast/GotoNode.java	/^    protected void _dump(Dumper d) {$/;"	m	class:GotoNode
_dump	ast/IfNode.java	/^    protected void _dump(Dumper d) {$/;"	m	class:IfNode
_dump	ast/IntegerLiteralNode.java	/^    protected void _dump(Dumper d) {$/;"	m	class:IntegerLiteralNode
_dump	ast/LabelNode.java	/^    protected void _dump(Dumper d) {$/;"	m	class:LabelNode
_dump	ast/MemberNode.java	/^    protected void _dump(Dumper d) {$/;"	m	class:MemberNode
_dump	ast/Node.java	/^    abstract protected void _dump(Dumper d);$/;"	m	class:Node
_dump	ast/PtrMemberNode.java	/^    protected void _dump(Dumper d) {$/;"	m	class:PtrMemberNode
_dump	ast/ReturnNode.java	/^    protected void _dump(Dumper d) {$/;"	m	class:ReturnNode
_dump	ast/SizeofExprNode.java	/^    protected void _dump(Dumper d) {$/;"	m	class:SizeofExprNode
_dump	ast/SizeofTypeNode.java	/^    protected void _dump(Dumper d) {$/;"	m	class:SizeofTypeNode
_dump	ast/Slot.java	/^    protected void _dump(Dumper d) {$/;"	m	class:Slot
_dump	ast/StringLiteralNode.java	/^    protected void _dump(Dumper d) {$/;"	m	class:StringLiteralNode
_dump	ast/SwitchNode.java	/^    protected void _dump(Dumper d) {$/;"	m	class:SwitchNode
_dump	ast/TypeNode.java	/^    protected void _dump(Dumper d) {$/;"	m	class:TypeNode
_dump	ast/TypedefNode.java	/^    protected void _dump(Dumper d) {$/;"	m	class:TypedefNode
_dump	ast/UnaryOpNode.java	/^    protected void _dump(Dumper d) {$/;"	m	class:UnaryOpNode
_dump	ast/VariableNode.java	/^    protected void _dump(Dumper d) {$/;"	m	class:VariableNode
_dump	ast/WhileNode.java	/^    protected void _dump(Dumper d) {$/;"	m	class:WhileNode
_dump	entity/Constant.java	/^    protected void _dump(net.loveruby.cflat.ast.Dumper d) {$/;"	m	class:Constant
_dump	entity/DefinedFunction.java	/^    protected void _dump(net.loveruby.cflat.ast.Dumper d) {$/;"	m	class:DefinedFunction
_dump	entity/DefinedVariable.java	/^    protected void _dump(net.loveruby.cflat.ast.Dumper d) {$/;"	m	class:DefinedVariable
_dump	entity/Entity.java	/^    abstract protected void _dump(net.loveruby.cflat.ast.Dumper d);$/;"	m	class:Entity
_dump	entity/Parameter.java	/^    protected void _dump(net.loveruby.cflat.ast.Dumper d) {$/;"	m	class:Parameter
_dump	entity/UndefinedFunction.java	/^    protected void _dump(net.loveruby.cflat.ast.Dumper d) {$/;"	m	class:UndefinedFunction
_dump	entity/UndefinedVariable.java	/^    protected void _dump(net.loveruby.cflat.ast.Dumper d) {$/;"	m	class:UndefinedVariable
_dump	ir/Addr.java	/^    protected void _dump(Dumper d) {$/;"	m	class:Addr
_dump	ir/Assign.java	/^    protected void _dump(Dumper d) {$/;"	m	class:Assign
_dump	ir/Bin.java	/^    protected void _dump(Dumper d) {$/;"	m	class:Bin
_dump	ir/CJump.java	/^    protected void _dump(Dumper d) {$/;"	m	class:CJump
_dump	ir/Call.java	/^    protected void _dump(Dumper d) {$/;"	m	class:Call
_dump	ir/Expr.java	/^    abstract protected void _dump(Dumper d);$/;"	m	class:Expr
_dump	ir/ExprStmt.java	/^    protected void _dump(Dumper d) {$/;"	m	class:ExprStmt
_dump	ir/Int.java	/^    protected void _dump(Dumper d) {$/;"	m	class:Int
_dump	ir/Jump.java	/^    protected void _dump(Dumper d) {$/;"	m	class:Jump
_dump	ir/LabelStmt.java	/^    protected void _dump(Dumper d) {$/;"	m	class:LabelStmt
_dump	ir/Mem.java	/^    protected void _dump(Dumper d) {$/;"	m	class:Mem
_dump	ir/Return.java	/^    protected void _dump(Dumper d) {$/;"	m	class:Return
_dump	ir/Stmt.java	/^    abstract protected void _dump(Dumper d);$/;"	m	class:Stmt
_dump	ir/Str.java	/^    protected void _dump(Dumper d) {$/;"	m	class:Str
_dump	ir/Switch.java	/^    protected void _dump(Dumper d) {$/;"	m	class:Switch
_dump	ir/Uni.java	/^    protected void _dump(Dumper d) {$/;"	m	class:Uni
_dump	ir/Var.java	/^    protected void _dump(Dumper d) {$/;"	m	class:Var
_file	sysdep/x86/AssemblyCode.java	/^    void _file(String name) {$/;"	m	class:AssemblyCode
_globl	sysdep/x86/AssemblyCode.java	/^    void _globl(Symbol sym) {$/;"	m	class:AssemblyCode
_hidden	sysdep/x86/AssemblyCode.java	/^    void _hidden(Symbol sym) {$/;"	m	class:AssemblyCode
_local	sysdep/x86/AssemblyCode.java	/^    void _local(Symbol sym) {$/;"	m	class:AssemblyCode
_long	sysdep/x86/AssemblyCode.java	/^    void _long(Literal val) {$/;"	m	class:AssemblyCode
_long	sysdep/x86/AssemblyCode.java	/^    void _long(long val) {$/;"	m	class:AssemblyCode
_quad	sysdep/x86/AssemblyCode.java	/^    void _quad(Literal val) {$/;"	m	class:AssemblyCode
_quad	sysdep/x86/AssemblyCode.java	/^    void _quad(long val) {$/;"	m	class:AssemblyCode
_section	sysdep/x86/AssemblyCode.java	/^    void _section(String name) {$/;"	m	class:AssemblyCode
_section	sysdep/x86/AssemblyCode.java	/^    void _section(String name, String flags, String type, String group, String linkage) {$/;"	m	class:AssemblyCode
_size	sysdep/x86/AssemblyCode.java	/^    void _size(Symbol sym, String size) {$/;"	m	class:AssemblyCode
_size	sysdep/x86/AssemblyCode.java	/^    void _size(Symbol sym, long size) {$/;"	m	class:AssemblyCode
_string	sysdep/x86/AssemblyCode.java	/^    void _string(String str) {$/;"	m	class:AssemblyCode
_text	sysdep/x86/AssemblyCode.java	/^    void _text() {$/;"	m	class:AssemblyCode
_type	sysdep/x86/AssemblyCode.java	/^    void _type(Symbol sym, String type) {$/;"	m	class:AssemblyCode
_value	sysdep/x86/AssemblyCode.java	/^    void _value(Literal val) {$/;"	m	class:AssemblyCode
_value	sysdep/x86/AssemblyCode.java	/^    void _value(long val) {$/;"	m	class:AssemblyCode
accept	ast/AddressNode.java	/^    public <S,E> E accept(ASTVisitor<S,E> visitor) {$/;"	m	class:AddressNode
accept	ast/ArefNode.java	/^    public <S,E> E accept(ASTVisitor<S,E> visitor) {$/;"	m	class:ArefNode
accept	ast/AssignNode.java	/^    public <S,E> E accept(ASTVisitor<S,E> visitor) {$/;"	m	class:AssignNode
accept	ast/BinaryOpNode.java	/^    public <S,E> E accept(ASTVisitor<S,E> visitor) {$/;"	m	class:BinaryOpNode
accept	ast/BlockNode.java	/^    public <S,E> S accept(ASTVisitor<S,E> visitor) {$/;"	m	class:BlockNode
accept	ast/BreakNode.java	/^    public <S,E> S accept(ASTVisitor<S,E> visitor) {$/;"	m	class:BreakNode
accept	ast/CaseNode.java	/^    public <S,E> S accept(ASTVisitor<S,E> visitor) {$/;"	m	class:CaseNode
accept	ast/CastNode.java	/^    public <S,E> E accept(ASTVisitor<S,E> visitor) {$/;"	m	class:CastNode
accept	ast/CondExprNode.java	/^    public <S,E> E accept(ASTVisitor<S,E> visitor) {$/;"	m	class:CondExprNode
accept	ast/ContinueNode.java	/^    public <S,E> S accept(ASTVisitor<S,E> visitor) {$/;"	m	class:ContinueNode
accept	ast/DereferenceNode.java	/^    public <S,E> E accept(ASTVisitor<S,E> visitor) {$/;"	m	class:DereferenceNode
accept	ast/DoWhileNode.java	/^    public <S,E> S accept(ASTVisitor<S,E> visitor) {$/;"	m	class:DoWhileNode
accept	ast/ExprNode.java	/^    abstract public <S,E> E accept(ASTVisitor<S,E> visitor);$/;"	m	class:ExprNode
accept	ast/ExprStmtNode.java	/^    public <S,E> S accept(ASTVisitor<S,E> visitor) {$/;"	m	class:ExprStmtNode
accept	ast/ForNode.java	/^    public <S,E> S accept(ASTVisitor<S,E> visitor) {$/;"	m	class:ForNode
accept	ast/FuncallNode.java	/^    public <S,E> E accept(ASTVisitor<S,E> visitor) {$/;"	m	class:FuncallNode
accept	ast/GotoNode.java	/^    public <S,E> S accept(ASTVisitor<S,E> visitor) {$/;"	m	class:GotoNode
accept	ast/IfNode.java	/^    public <S,E> S accept(ASTVisitor<S,E> visitor) {$/;"	m	class:IfNode
accept	ast/IntegerLiteralNode.java	/^    public <S,E> E accept(ASTVisitor<S,E> visitor) {$/;"	m	class:IntegerLiteralNode
accept	ast/LabelNode.java	/^    public <S,E> S accept(ASTVisitor<S,E> visitor) {$/;"	m	class:LabelNode
accept	ast/LogicalAndNode.java	/^    public <S,E> E accept(ASTVisitor<S,E> visitor) {$/;"	m	class:LogicalAndNode
accept	ast/LogicalOrNode.java	/^    public <S,E> E accept(ASTVisitor<S,E> visitor) {$/;"	m	class:LogicalOrNode
accept	ast/MemberNode.java	/^    public <S,E> E accept(ASTVisitor<S,E> visitor) {$/;"	m	class:MemberNode
accept	ast/OpAssignNode.java	/^    public <S,E> E accept(ASTVisitor<S,E> visitor) {$/;"	m	class:OpAssignNode
accept	ast/PrefixOpNode.java	/^    public <S,E> E accept(ASTVisitor<S,E> visitor) {$/;"	m	class:PrefixOpNode
accept	ast/PtrMemberNode.java	/^    public <S,E> E accept(ASTVisitor<S,E> visitor) {$/;"	m	class:PtrMemberNode
accept	ast/ReturnNode.java	/^    public <S,E> S accept(ASTVisitor<S,E> visitor) {$/;"	m	class:ReturnNode
accept	ast/SizeofExprNode.java	/^    public <S,E> E accept(ASTVisitor<S,E> visitor) {$/;"	m	class:SizeofExprNode
accept	ast/SizeofTypeNode.java	/^    public <S,E> E accept(ASTVisitor<S,E> visitor) {$/;"	m	class:SizeofTypeNode
accept	ast/StmtNode.java	/^    abstract public <S,E> S accept(ASTVisitor<S,E> visitor);$/;"	m	class:StmtNode
accept	ast/StringLiteralNode.java	/^    public <S,E> E accept(ASTVisitor<S,E> visitor) {$/;"	m	class:StringLiteralNode
accept	ast/StructNode.java	/^    public <T> T accept(DeclarationVisitor<T> visitor) {$/;"	m	class:StructNode
accept	ast/SuffixOpNode.java	/^    public <S,E> E accept(ASTVisitor<S,E> visitor) {$/;"	m	class:SuffixOpNode
accept	ast/SwitchNode.java	/^    public <S,E> S accept(ASTVisitor<S,E> visitor) {$/;"	m	class:SwitchNode
accept	ast/TypeDefinition.java	/^    abstract public <T> T accept(DeclarationVisitor<T> visitor);$/;"	m	class:TypeDefinition
accept	ast/TypeNode.java	/^    public TypeNode accept(ASTVisitor visitor) {$/;"	m	class:TypeNode
accept	ast/TypedefNode.java	/^    public <T> T accept(DeclarationVisitor<T> visitor) {$/;"	m	class:TypedefNode
accept	ast/UnaryOpNode.java	/^    public <S,E> E accept(ASTVisitor<S,E> visitor) {$/;"	m	class:UnaryOpNode
accept	ast/UnionNode.java	/^    public <T> T accept(DeclarationVisitor<T> visitor) {$/;"	m	class:UnionNode
accept	ast/VariableNode.java	/^    public <S,E> E accept(ASTVisitor<S,E> visitor) {$/;"	m	class:VariableNode
accept	ast/WhileNode.java	/^    public <S,E> S accept(ASTVisitor<S,E> visitor) {$/;"	m	class:WhileNode
accept	entity/Constant.java	/^    public <T> T accept(EntityVisitor<T> visitor) {$/;"	m	class:Constant
accept	entity/DefinedFunction.java	/^    public <T> T accept(EntityVisitor<T> visitor) {$/;"	m	class:DefinedFunction
accept	entity/DefinedVariable.java	/^    public <T> T accept(EntityVisitor<T> visitor) {$/;"	m	class:DefinedVariable
accept	entity/Entity.java	/^    abstract public <T> T accept(EntityVisitor<T> visitor);$/;"	m	class:Entity
accept	entity/UndefinedFunction.java	/^    public <T> T accept(EntityVisitor<T> visitor) {$/;"	m	class:UndefinedFunction
accept	entity/UndefinedVariable.java	/^    public <T> T accept(EntityVisitor<T> visitor) {$/;"	m	class:UndefinedVariable
accept	ir/Addr.java	/^    public <S,E> E accept(IRVisitor<S,E> visitor) {$/;"	m	class:Addr
accept	ir/Assign.java	/^    public <S,E> S accept(IRVisitor<S,E> visitor) {$/;"	m	class:Assign
accept	ir/Bin.java	/^    public <S,E> E accept(IRVisitor<S,E> visitor) {$/;"	m	class:Bin
accept	ir/CJump.java	/^    public <S,E> S accept(IRVisitor<S,E> visitor) {$/;"	m	class:CJump
accept	ir/Call.java	/^    public <S,E> E accept(IRVisitor<S,E> visitor) {$/;"	m	class:Call
accept	ir/Expr.java	/^    abstract public <S,E> E accept(IRVisitor<S,E> visitor);$/;"	m	class:Expr
accept	ir/ExprStmt.java	/^    public <S,E> S accept(IRVisitor<S,E> visitor) {$/;"	m	class:ExprStmt
accept	ir/Int.java	/^    public <S,E> E accept(IRVisitor<S,E> visitor) {$/;"	m	class:Int
accept	ir/Jump.java	/^    public <S,E> S accept(IRVisitor<S,E> visitor) {$/;"	m	class:Jump
accept	ir/LabelStmt.java	/^    public <S,E> S accept(IRVisitor<S,E> visitor) {$/;"	m	class:LabelStmt
accept	ir/Mem.java	/^    public <S,E> E accept(IRVisitor<S,E> visitor) {$/;"	m	class:Mem
accept	ir/Return.java	/^    public <S,E> S accept(IRVisitor<S,E> visitor) {$/;"	m	class:Return
accept	ir/Stmt.java	/^    abstract public <S,E> S accept(IRVisitor<S,E> visitor);$/;"	m	class:Stmt
accept	ir/Str.java	/^    public <S,E> E accept(IRVisitor<S,E> visitor) {$/;"	m	class:Str
accept	ir/Switch.java	/^    public <S,E> S accept(IRVisitor<S,E> visitor) {$/;"	m	class:Switch
accept	ir/Uni.java	/^    public <S,E> E accept(IRVisitor<S,E> visitor) {$/;"	m	class:Uni
accept	ir/Var.java	/^    public <S,E> E accept(IRVisitor<S,E> visitor) {$/;"	m	class:Var
acceptVarargs	entity/ParamSlots.java	/^    public void acceptVarargs() {$/;"	m	class:ParamSlots
acceptsArgc	type/FunctionType.java	/^    public boolean acceptsArgc(long numArgs) {$/;"	m	class:FunctionType
add	ast/Declarations.java	/^    public void add(Declarations decls) {$/;"	m	class:Declarations
add	sysdep/x86/AssemblyCode.java	/^    void add(Operand diff, Register base) {$/;"	m	class:AssemblyCode
add	sysdep/x86/PeepholeOptimizer.java	/^    public void add(Filter filter) {$/;"	m	class:PeepholeOptimizer
addAll	sysdep/x86/AssemblyCode.java	/^    void addAll(List<Assembly> assemblies) {$/;"	m	class:AssemblyCode
addArg	sysdep/AssemblerOptions.java	/^    public void addArg(String a) {$/;"	m	class:AssemblerOptions
addChild	entity/Scope.java	/^    protected void addChild(LocalScope s) {$/;"	m	class:Scope
addConstant	ast/Declarations.java	/^    public void addConstant(Constant c) {$/;"	m	class:Declarations
addDefstruct	ast/Declarations.java	/^    public void addDefstruct(StructNode n) {$/;"	m	class:Declarations
addDefun	ast/Declarations.java	/^    public void addDefun(DefinedFunction func) {$/;"	m	class:Declarations
addDefunion	ast/Declarations.java	/^    public void addDefunion(UnionNode n) {$/;"	m	class:Declarations
addDefvar	ast/Declarations.java	/^    public void addDefvar(DefinedVariable var) {$/;"	m	class:Declarations
addDefvars	ast/Declarations.java	/^    public void addDefvars(List<DefinedVariable> vars) {$/;"	m	class:Declarations
addFuncdecl	ast/Declarations.java	/^    public void addFuncdecl(UndefinedFunction func) {$/;"	m	class:Declarations
addLdArg	compiler/Options.java	/^    private void addLdArg(String arg) {$/;"	m	class:Options	file:
addLoadPath	parser/LibraryLoader.java	/^    public void addLoadPath(String path) {$/;"	m	class:LibraryLoader
addTypedef	ast/Declarations.java	/^    public void addTypedef(TypedefNode n) {$/;"	m	class:Declarations
addVardecl	ast/Declarations.java	/^    public void addVardecl(UndefinedVariable var) {$/;"	m	class:Declarations
address	entity/ConstantEntry.java	/^    protected ImmediateValue address;$/;"	f	class:ConstantEntry
address	entity/ConstantEntry.java	/^    public ImmediateValue address() {$/;"	m	class:ConstantEntry
address	entity/Entity.java	/^    protected Operand address;$/;"	f	class:Entity
address	entity/Entity.java	/^    public Operand address() {$/;"	m	class:Entity
address	ir/Addr.java	/^    public Operand address() {$/;"	m	class:Addr
address	ir/Expr.java	/^    public Operand address() {$/;"	m	class:Expr
address	ir/Str.java	/^    public Operand address() {$/;"	m	class:Str
address	ir/Var.java	/^    public Operand address() {$/;"	m	class:Var
addressNode	ir/Expr.java	/^    public Expr addressNode(Type type) {$/;"	m	class:Expr
addressNode	ir/Mem.java	/^    public Expr addressNode(Type type) {$/;"	m	class:Mem
addressNode	ir/Var.java	/^    public Addr addressNode(Type type) {$/;"	m	class:Var
addressOf	compiler/IRGenerator.java	/^    private Expr addressOf(Expr expr) {$/;"	m	class:IRGenerator	file:
al	sysdep/x86/CodeGenerator.java	/^    private Register al() { return ax(Type.INT8); }$/;"	m	class:CodeGenerator	file:
align	utils/AsmUtils.java	/^    static public long align(long n, long alignment) {$/;"	m	class:AsmUtils
alignStack	sysdep/x86/CodeGenerator.java	/^    private long alignStack(long size) {$/;"	m	class:CodeGenerator	file:
alignmemt	type/CompositeType.java	/^    public long alignmemt() {$/;"	m	class:CompositeType
alignment	ast/Slot.java	/^    public long alignment() {$/;"	m	class:Slot
alignment	entity/Entity.java	/^    public long alignment() {$/;"	m	class:Entity
alignment	type/ArrayType.java	/^    public long alignment() {$/;"	m	class:ArrayType
alignment	type/FunctionType.java	/^    public long alignment() {$/;"	m	class:FunctionType
alignment	type/Type.java	/^    public long alignment() { return allocSize(); }$/;"	m	class:Type
alignment	type/UserType.java	/^    public long alignment() { return realType().alignment(); }$/;"	m	class:UserType
allFunctions	ir/IR.java	/^    public List<Function> allFunctions() {$/;"	m	class:IR
allGlobalVariables	entity/ToplevelScope.java	/^    public List<Variable> allGlobalVariables() {$/;"	m	class:ToplevelScope
allGlobalVariables	ir/IR.java	/^    public List<Variable> allGlobalVariables() {$/;"	m	class:IR
allLocalScopes	entity/LocalScope.java	/^    protected List<LocalScope> allLocalScopes() {$/;"	m	class:LocalScope
allLocalVariables	entity/LocalScope.java	/^    public List<DefinedVariable> allLocalVariables() {$/;"	m	class:LocalScope
allocSize	ast/ExprNode.java	/^    public long allocSize() { return type().allocSize(); }$/;"	m	class:ExprNode
allocSize	ast/LHSNode.java	/^    public long allocSize() { return origType().allocSize(); }$/;"	m	class:LHSNode
allocSize	ast/Slot.java	/^    public long allocSize() {$/;"	m	class:Slot
allocSize	entity/Entity.java	/^    public long allocSize() {$/;"	m	class:Entity
allocSize	type/ArrayType.java	/^    public long allocSize() {$/;"	m	class:ArrayType
allocSize	type/Type.java	/^    public long allocSize() { return size(); }$/;"	m	class:Type
allocSize	type/UserType.java	/^    public long allocSize() { return realType().allocSize(); }$/;"	m	class:UserType
allocateTmp	entity/LocalScope.java	/^    public DefinedVariable allocateTmp(Type t) {$/;"	m	class:LocalScope
amount	ast/UnaryArithmeticOpNode.java	/^    protected long amount;$/;"	f	class:UnaryArithmeticOpNode
amount	ast/UnaryArithmeticOpNode.java	/^    public long amount() {$/;"	m	class:UnaryArithmeticOpNode
and	sysdep/x86/AssemblyCode.java	/^    void and(Operand bits, Register base) {$/;"	m	class:AssemblyCode
apply	sysdep/x86/AssemblyCode.java	/^    void apply(PeepholeOptimizer opt) {$/;"	m	class:AssemblyCode
apply	sysdep/x86/PeepholeOptimizer.java	/^        abstract public Instruction apply(Instruction insn);$/;"	m	interface:PeepholeOptimizer.InsnTransform
arg	compiler/LdOption.java	/^    private final String arg;$/;"	f	class:LdOption	file:
argc	entity/ParamSlots.java	/^    public int argc() {$/;"	m	class:ParamSlots
args	ast/FuncallNode.java	/^    protected List<ExprNode> args;$/;"	f	class:FuncallNode
args	ast/FuncallNode.java	/^    public List<ExprNode> args() {$/;"	m	class:FuncallNode
args	ir/Call.java	/^    private List<Expr> args;$/;"	f	class:Call	file:
args	ir/Call.java	/^    public List<Expr> args() { return args; }$/;"	m	class:Call
args	sysdep/AssemblerOptions.java	/^    List<String> args = new ArrayList<String>();$/;"	f	class:AssemblerOptions
arithmeticImplicitCast	compiler/TypeChecker.java	/^    private void arithmeticImplicitCast(BinaryOpNode node) {$/;"	m	class:TypeChecker	file:
as	sysdep/x86/CodeGenerator.java	/^    private AssemblyCode as;$/;"	f	class:CodeGenerator	file:
asOptions	compiler/Options.java	/^    AssemblerOptions asOptions() {$/;"	m	class:Options
asOptions	compiler/Options.java	/^    private AssemblerOptions asOptions = new AssemblerOptions();$/;"	f	class:Options	file:
asmFileName	compiler/SourceFile.java	/^    String asmFileName() {$/;"	m	class:SourceFile
asmFileNameOf	compiler/Options.java	/^    String asmFileNameOf(SourceFile src) {$/;"	m	class:Options
asmType	compiler/IRGenerator.java	/^    private net.loveruby.cflat.asm.Type asmType(Type t) {$/;"	m	class:IRGenerator	file:
asmValue	ir/Expr.java	/^    public ImmediateValue asmValue() {$/;"	m	class:Expr
asmValue	ir/Int.java	/^    public ImmediateValue asmValue() {$/;"	m	class:Int
asmValue	ir/Str.java	/^    public ImmediateValue asmValue() {$/;"	m	class:Str
assemble	compiler/Compiler.java	/^    public void assemble(String srcPath, String destPath,$/;"	m	class:Compiler
assemble	sysdep/Assembler.java	/^    void assemble(String srcPath, String destPath,$/;"	m	interface:Assembler
assemble	sysdep/GNUAssembler.java	/^    public void assemble(String srcPath, String destPath,$/;"	m	class:GNUAssembler
assembler	compiler/Options.java	/^    Assembler assembler(ErrorHandler h) {$/;"	m	class:Options
assembler	sysdep/Platform.java	/^    Assembler assembler(ErrorHandler h);$/;"	m	interface:Platform
assembler	sysdep/X86Linux.java	/^    public Assembler assembler(ErrorHandler h) {$/;"	m	class:X86Linux
assemblies	sysdep/x86/AssemblyCode.java	/^    List<Assembly> assemblies() {$/;"	m	class:AssemblyCode
assemblies	sysdep/x86/AssemblyCode.java	/^    private List<Assembly> assemblies = new ArrayList<Assembly>();$/;"	f	class:AssemblyCode	file:
assign	compiler/IRGenerator.java	/^    private void assign(Location loc, Expr lhs, Expr rhs) {$/;"	m	class:IRGenerator	file:
ax	sysdep/x86/CodeGenerator.java	/^    private Register ax() { return ax(naturalType); }$/;"	m	class:CodeGenerator	file:
ax	sysdep/x86/CodeGenerator.java	/^    private Register ax(Type t) {$/;"	m	class:CodeGenerator	file:
base	asm/IndirectMemoryReference.java	/^    Register base;$/;"	f	class:IndirectMemoryReference
base	asm/IndirectMemoryReference.java	/^    public Register base() {$/;"	m	class:IndirectMemoryReference
base	asm/SuffixedSymbol.java	/^    protected Symbol base;$/;"	f	class:SuffixedSymbol
base	asm/SymbolTable.java	/^    protected String base;$/;"	f	class:SymbolTable
baseExpr	ast/ArefNode.java	/^    public ExprNode baseExpr() {$/;"	m	class:ArefNode
baseName	compiler/SourceFile.java	/^    private String baseName(String path) {$/;"	m	class:SourceFile	file:
baseName	compiler/SourceFile.java	/^    private String baseName(String path, boolean stripExt) {$/;"	m	class:SourceFile	file:
baseName	sysdep/x86/Register.java	/^    String baseName() {$/;"	m	class:Register
baseType	ast/MemberNode.java	/^    public CompositeType baseType() {$/;"	m	class:MemberNode
baseType	type/ArrayType.java	/^    protected Type baseType;$/;"	f	class:ArrayType
baseType	type/ArrayType.java	/^    public Type baseType() {$/;"	m	class:ArrayType
baseType	type/ArrayTypeRef.java	/^    protected TypeRef baseType;$/;"	f	class:ArrayTypeRef
baseType	type/ArrayTypeRef.java	/^    public TypeRef baseType() {$/;"	m	class:ArrayTypeRef
baseType	type/PointerType.java	/^    protected Type baseType;$/;"	f	class:PointerType
baseType	type/PointerType.java	/^    public Type baseType() {$/;"	m	class:PointerType
baseType	type/PointerTypeRef.java	/^    protected TypeRef baseType;$/;"	f	class:PointerTypeRef
baseType	type/PointerTypeRef.java	/^    public TypeRef baseType() {$/;"	m	class:PointerTypeRef
baseType	type/Type.java	/^    public Type baseType() {$/;"	m	class:Type
baseType	type/UserType.java	/^    public Type baseType() { return realType().baseType(); }$/;"	m	class:UserType
bin	compiler/IRGenerator.java	/^    private Bin bin(Op op, Type leftType, Expr left, Expr right) {$/;"	m	class:IRGenerator	file:
binOp	compiler/IRGenerator.java	/^    private Op binOp(String uniOp) {$/;"	m	class:IRGenerator	file:
bindType	compiler/TypeResolver.java	/^    private void bindType(TypeNode n) {$/;"	m	class:TypeResolver	file:
body	ast/CaseNode.java	/^    protected BlockNode body;$/;"	f	class:CaseNode
body	ast/CaseNode.java	/^    public BlockNode body() {$/;"	m	class:CaseNode
body	ast/DoWhileNode.java	/^    protected StmtNode body;$/;"	f	class:DoWhileNode
body	ast/DoWhileNode.java	/^    public StmtNode body() {$/;"	m	class:DoWhileNode
body	ast/ForNode.java	/^    protected StmtNode body;$/;"	f	class:ForNode
body	ast/ForNode.java	/^    public StmtNode body() {$/;"	m	class:ForNode
body	ast/WhileNode.java	/^    protected StmtNode body;$/;"	f	class:WhileNode
body	ast/WhileNode.java	/^    public StmtNode body() {$/;"	m	class:WhileNode
body	entity/DefinedFunction.java	/^    protected BlockNode body;$/;"	f	class:DefinedFunction
body	entity/DefinedFunction.java	/^    public BlockNode body() {$/;"	m	class:DefinedFunction
bp	sysdep/x86/AssemblyCode.java	/^        private Register bp() {$/;"	m	class:AssemblyCode.VirtualStack	file:
bp	sysdep/x86/CodeGenerator.java	/^    private Register bp() {$/;"	m	class:CodeGenerator	file:
breakStack	compiler/IRGenerator.java	/^    LinkedList<Label> breakStack;$/;"	f	class:IRGenerator
build	asm/Instruction.java	/^    public Instruction build(String mnemonic, Operand o1) {$/;"	m	class:Instruction
build	asm/Instruction.java	/^    public Instruction build(String mnemonic, Operand o1, Operand o2) {$/;"	m	class:Instruction
build	compiler/Compiler.java	/^    public void build(List<SourceFile> srcs, Options opts)$/;"	m	class:Compiler
buildTokenList	ast/CflatToken.java	/^    protected List<CflatToken> buildTokenList(Token first, boolean rejectFirstSpecials) {$/;"	m	class:CflatToken
bx	sysdep/x86/CodeGenerator.java	/^    private Register bx() { return bx(naturalType); }$/;"	m	class:CodeGenerator	file:
bx	sysdep/x86/CodeGenerator.java	/^    private Register bx(Type t) {$/;"	m	class:CodeGenerator	file:
cachedAlign	type/CompositeType.java	/^    protected long cachedAlign;$/;"	f	class:CompositeType
cachedSize	type/CompositeType.java	/^    protected long cachedSize;$/;"	f	class:CompositeType
call	sysdep/x86/AssemblyCode.java	/^    void call(Symbol sym) {$/;"	m	class:AssemblyCode
callAbsolute	sysdep/x86/AssemblyCode.java	/^    void callAbsolute(Register reg) {$/;"	m	class:AssemblyCode
calleeSaveRegisters	sysdep/x86/CodeGenerator.java	/^    private List<Register> calleeSaveRegisters() {$/;"	m	class:CodeGenerator	file:
calleeSaveRegistersCache	sysdep/x86/CodeGenerator.java	/^    private List<Register> calleeSaveRegistersCache = null;$/;"	f	class:CodeGenerator	file:
callingSymbol	entity/Function.java	/^    protected Symbol callingSymbol;$/;"	f	class:Function
callingSymbol	entity/Function.java	/^    public Symbol callingSymbol() {$/;"	m	class:Function
callingSymbol	sysdep/x86/CodeGenerator.java	/^    private Symbol callingSymbol(Function func) {$/;"	m	class:CodeGenerator	file:
cases	ast/SwitchNode.java	/^    protected List<CaseNode> cases;$/;"	f	class:SwitchNode
cases	ast/SwitchNode.java	/^    public List<CaseNode> cases() {$/;"	m	class:SwitchNode
cases	ir/Switch.java	/^    protected List<Case> cases;$/;"	f	class:Switch
cases	ir/Switch.java	/^    public List<Case> cases() {$/;"	m	class:Switch
castOptionalArg	compiler/TypeChecker.java	/^    private ExprNode castOptionalArg(ExprNode arg) {$/;"	m	class:TypeChecker	file:
charRef	type/IntegerTypeRef.java	/^    static public IntegerTypeRef charRef() {$/;"	m	class:IntegerTypeRef
charRef	type/IntegerTypeRef.java	/^    static public IntegerTypeRef charRef(Location loc) {$/;"	m	class:IntegerTypeRef
check	compiler/DereferenceChecker.java	/^    private void check(ExprNode node) {$/;"	m	class:DereferenceChecker	file:
check	compiler/DereferenceChecker.java	/^    private void check(StmtNode node) {$/;"	m	class:DereferenceChecker	file:
check	compiler/DereferenceChecker.java	/^    public void check(AST ast) throws SemanticException {$/;"	m	class:DereferenceChecker
check	compiler/TypeChecker.java	/^    private void check(ExprNode node) {$/;"	m	class:TypeChecker	file:
check	compiler/TypeChecker.java	/^    private void check(StmtNode node) {$/;"	m	class:TypeChecker	file:
check	compiler/TypeChecker.java	/^    public void check(AST ast) throws SemanticException {$/;"	m	class:TypeChecker
checkAddress	entity/Entity.java	/^    protected void checkAddress() {$/;"	m	class:Entity
checkAssignment	compiler/DereferenceChecker.java	/^    private void checkAssignment(AbstractAssignNode node) {$/;"	m	class:DereferenceChecker	file:
checkCond	compiler/TypeChecker.java	/^    private void checkCond(ExprNode cond) {$/;"	m	class:TypeChecker	file:
checkConstant	compiler/DereferenceChecker.java	/^    private void checkConstant(ExprNode expr) {$/;"	m	class:DereferenceChecker	file:
checkDuplicatedMembers	type/TypeTable.java	/^    protected void checkDuplicatedMembers(CompositeType t, ErrorHandler h) {$/;"	m	class:TypeTable
checkJumpLinks	compiler/IRGenerator.java	/^    private void checkJumpLinks(Map<String, JumpEntry> jumpMap) {$/;"	m	class:IRGenerator	file:
checkLHS	compiler/TypeChecker.java	/^    private boolean checkLHS(ExprNode lhs) {$/;"	m	class:TypeChecker	file:
checkMemberRef	compiler/DereferenceChecker.java	/^    private void checkMemberRef(Location loc, Type t, String memb) {$/;"	m	class:DereferenceChecker	file:
checkParamTypes	compiler/TypeChecker.java	/^    private void checkParamTypes(DefinedFunction f) {$/;"	m	class:TypeChecker	file:
checkRHS	compiler/TypeChecker.java	/^    private boolean checkRHS(ExprNode rhs) {$/;"	m	class:TypeChecker	file:
checkRecursiveDefinition	type/TypeTable.java	/^    protected void checkRecursiveDefinition(Type t, ErrorHandler h) {$/;"	m	class:TypeTable
checkReferences	entity/LocalScope.java	/^    public void checkReferences(ErrorHandler h) {$/;"	m	class:LocalScope
checkReferences	entity/ToplevelScope.java	/^    public void checkReferences(ErrorHandler h) {$/;"	m	class:ToplevelScope
checkReturnType	compiler/TypeChecker.java	/^    private void checkReturnType(DefinedFunction f) {$/;"	m	class:TypeChecker	file:
checkSyntax	compiler/Compiler.java	/^    private boolean checkSyntax(Options opts) {$/;"	m	class:Compiler	file:
checkToplevelVariable	compiler/DereferenceChecker.java	/^    private void checkToplevelVariable(DefinedVariable var) {$/;"	m	class:DereferenceChecker	file:
checkVariable	compiler/DereferenceChecker.java	/^    private void checkVariable(DefinedVariable var) {$/;"	m	class:DereferenceChecker	file:
checkVariable	compiler/TypeChecker.java	/^    private void checkVariable(DefinedVariable var) {$/;"	m	class:TypeChecker	file:
checkVoidMembers	type/TypeTable.java	/^    protected void checkVoidMembers(ArrayType t, ErrorHandler h) {$/;"	m	class:TypeTable
checkVoidMembers	type/TypeTable.java	/^    protected void checkVoidMembers(CompositeType t, ErrorHandler h) {$/;"	m	class:TypeTable
checked	type/TypeTable.java	/^    static final protected Object checked = new Object();$/;"	f	class:TypeTable
checking	type/TypeTable.java	/^    static final protected Object checking = new Object();$/;"	f	class:TypeTable
children	entity/LocalScope.java	/^    public List<LocalScope> children() {$/;"	m	class:LocalScope
children	entity/Scope.java	/^    protected List<LocalScope> children;$/;"	f	class:Scope
cjump	compiler/IRGenerator.java	/^    private void cjump(Location loc, Expr cond, Label thenLabel, Label elseLabel) {$/;"	m	class:IRGenerator	file:
cl	sysdep/x86/CodeGenerator.java	/^    private Register cl() { return cx(Type.INT8); }$/;"	m	class:CodeGenerator	file:
clone	utils/Cursor.java	/^    public Cursor<T> clone() {$/;"	m	class:Cursor
cltd	sysdep/x86/AssemblyCode.java	/^    void cltd() {$/;"	m	class:AssemblyCode
cmp	asm/DirectMemoryReference.java	/^    protected int cmp(DirectMemoryReference mem) {$/;"	m	class:DirectMemoryReference
cmp	asm/DirectMemoryReference.java	/^    protected int cmp(IndirectMemoryReference mem) {$/;"	m	class:DirectMemoryReference
cmp	asm/IndirectMemoryReference.java	/^    protected int cmp(DirectMemoryReference mem) {$/;"	m	class:IndirectMemoryReference
cmp	asm/IndirectMemoryReference.java	/^    protected int cmp(IndirectMemoryReference mem) {$/;"	m	class:IndirectMemoryReference
cmp	asm/IntegerLiteral.java	/^    public int cmp(IntegerLiteral i) {$/;"	m	class:IntegerLiteral
cmp	asm/IntegerLiteral.java	/^    public int cmp(NamedSymbol sym) {$/;"	m	class:IntegerLiteral
cmp	asm/IntegerLiteral.java	/^    public int cmp(SuffixedSymbol sym) {$/;"	m	class:IntegerLiteral
cmp	asm/IntegerLiteral.java	/^    public int cmp(UnnamedSymbol sym) {$/;"	m	class:IntegerLiteral
cmp	asm/Literal.java	/^    public int cmp(IntegerLiteral i);$/;"	m	interface:Literal
cmp	asm/Literal.java	/^    public int cmp(NamedSymbol sym);$/;"	m	interface:Literal
cmp	asm/Literal.java	/^    public int cmp(SuffixedSymbol sym);$/;"	m	interface:Literal
cmp	asm/Literal.java	/^    public int cmp(UnnamedSymbol sym);$/;"	m	interface:Literal
cmp	asm/MemoryReference.java	/^    abstract protected int cmp(DirectMemoryReference mem);$/;"	m	class:MemoryReference
cmp	asm/MemoryReference.java	/^    abstract protected int cmp(IndirectMemoryReference mem);$/;"	m	class:MemoryReference
cmp	asm/NamedSymbol.java	/^    public int cmp(IntegerLiteral i) {$/;"	m	class:NamedSymbol
cmp	asm/NamedSymbol.java	/^    public int cmp(NamedSymbol sym) {$/;"	m	class:NamedSymbol
cmp	asm/NamedSymbol.java	/^    public int cmp(SuffixedSymbol sym) {$/;"	m	class:NamedSymbol
cmp	asm/NamedSymbol.java	/^    public int cmp(UnnamedSymbol sym) {$/;"	m	class:NamedSymbol
cmp	asm/SuffixedSymbol.java	/^    public int cmp(IntegerLiteral i) {$/;"	m	class:SuffixedSymbol
cmp	asm/SuffixedSymbol.java	/^    public int cmp(NamedSymbol sym) {$/;"	m	class:SuffixedSymbol
cmp	asm/SuffixedSymbol.java	/^    public int cmp(SuffixedSymbol sym) {$/;"	m	class:SuffixedSymbol
cmp	asm/SuffixedSymbol.java	/^    public int cmp(UnnamedSymbol sym) {$/;"	m	class:SuffixedSymbol
cmp	asm/UnnamedSymbol.java	/^    public int cmp(IntegerLiteral i) {$/;"	m	class:UnnamedSymbol
cmp	asm/UnnamedSymbol.java	/^    public int cmp(NamedSymbol sym) {$/;"	m	class:UnnamedSymbol
cmp	asm/UnnamedSymbol.java	/^    public int cmp(SuffixedSymbol sym) {$/;"	m	class:UnnamedSymbol
cmp	asm/UnnamedSymbol.java	/^    public int cmp(UnnamedSymbol sym) {$/;"	m	class:UnnamedSymbol
cmp	sysdep/x86/AssemblyCode.java	/^    void cmp(Operand a, Register b) {$/;"	m	class:AssemblyCode
codeGenerator	compiler/Options.java	/^    CodeGenerator codeGenerator(ErrorHandler h) {$/;"	m	class:Options
codeGenerator	sysdep/Platform.java	/^    CodeGenerator codeGenerator(CodeGeneratorOptions opts, ErrorHandler h);$/;"	m	interface:Platform
codeGenerator	sysdep/X86Linux.java	/^    public CodeGenerator codeGenerator($/;"	m	class:X86Linux
collect	asm/Statistics.java	/^    static public Statistics collect(List<Assembly> assemblies) {$/;"	m	class:Statistics
collectScope	entity/LocalScope.java	/^    protected void collectScope(List<LocalScope> buf) {$/;"	m	class:LocalScope
collectStatistics	asm/AbsoluteAddress.java	/^    public void collectStatistics(Statistics stats) {$/;"	m	class:AbsoluteAddress
collectStatistics	asm/Assembly.java	/^    public void collectStatistics(Statistics stats) {$/;"	m	class:Assembly
collectStatistics	asm/BaseSymbol.java	/^    public void collectStatistics(Statistics stats) {$/;"	m	class:BaseSymbol
collectStatistics	asm/DirectMemoryReference.java	/^    public void collectStatistics(Statistics stats) {$/;"	m	class:DirectMemoryReference
collectStatistics	asm/ImmediateValue.java	/^    public void collectStatistics(Statistics stats) {$/;"	m	class:ImmediateValue
collectStatistics	asm/IndirectMemoryReference.java	/^    public void collectStatistics(Statistics stats) {$/;"	m	class:IndirectMemoryReference
collectStatistics	asm/Instruction.java	/^    public void collectStatistics(Statistics stats) {$/;"	m	class:Instruction
collectStatistics	asm/IntegerLiteral.java	/^    public void collectStatistics(Statistics stats) {$/;"	m	class:IntegerLiteral
collectStatistics	asm/Literal.java	/^    public void collectStatistics(Statistics stats);$/;"	m	interface:Literal
collectStatistics	asm/Operand.java	/^    abstract public void collectStatistics(Statistics stats);$/;"	m	class:Operand
collectStatistics	asm/Register.java	/^    public void collectStatistics(Statistics stats) {$/;"	m	class:Register
collectStatistics	asm/SuffixedSymbol.java	/^    public void collectStatistics(Statistics stats) {$/;"	m	class:SuffixedSymbol
column	ast/CflatToken.java	/^    public int column() {$/;"	m	class:CflatToken
column	ast/Location.java	/^    public int column() {$/;"	m	class:Location
commandMain	compiler/Compiler.java	/^    public void commandMain(String[] args) {$/;"	m	class:Compiler
comment	sysdep/x86/AssemblyCode.java	/^    void comment(String str) {$/;"	m	class:AssemblyCode
commentIndentLevel	sysdep/x86/AssemblyCode.java	/^    private int commentIndentLevel = 0;$/;"	f	class:AssemblyCode	file:
comms	ir/IR.java	/^    List<DefinedVariable> comms;   \/\/ cache$/;"	f	class:IR
compareMemberTypes	type/CompositeType.java	/^    protected boolean compareMemberTypes(Type other, String cmpMethod) {$/;"	m	class:CompositeType
compareTo	asm/DirectMemoryReference.java	/^    public int compareTo(MemoryReference mem) {$/;"	m	class:DirectMemoryReference
compareTo	asm/IndirectMemoryReference.java	/^    public int compareTo(MemoryReference mem) {$/;"	m	class:IndirectMemoryReference
compareTo	asm/IntegerLiteral.java	/^    public int compareTo(Literal lit) {$/;"	m	class:IntegerLiteral
compareTo	asm/NamedSymbol.java	/^    public int compareTo(Literal lit) {$/;"	m	class:NamedSymbol
compareTo	asm/SuffixedSymbol.java	/^    public int compareTo(Literal lit) {$/;"	m	class:SuffixedSymbol
compareTo	asm/UnnamedSymbol.java	/^    public int compareTo(Literal lit) {$/;"	m	class:UnnamedSymbol
compareTypesBy	type/CompositeType.java	/^    protected boolean compareTypesBy(String cmpMethod, Type t, Type tt) {$/;"	m	class:CompositeType
compile	compiler/Compiler.java	/^    public void compile(String srcPath, String destPath,$/;"	m	class:Compiler
compile	sysdep/x86/CodeGenerator.java	/^    private void compile(Expr n) {$/;"	m	class:CodeGenerator	file:
compileBinaryOp	sysdep/x86/CodeGenerator.java	/^    private void compileBinaryOp(Op op, Register left, Operand right) {$/;"	m	class:CodeGenerator	file:
compileFunctionBody	compiler/IRGenerator.java	/^    public List<Stmt> compileFunctionBody(DefinedFunction f) {$/;"	m	class:IRGenerator
compileFunctionBody	sysdep/x86/CodeGenerator.java	/^    private void compileFunctionBody(AssemblyCode file, DefinedFunction func) {$/;"	m	class:CodeGenerator	file:
compileStmt	sysdep/x86/CodeGenerator.java	/^    private void compileStmt(Stmt stmt) {$/;"	m	class:CodeGenerator	file:
compileStmts	sysdep/x86/CodeGenerator.java	/^    private AssemblyCode compileStmts(DefinedFunction func) {$/;"	m	class:CodeGenerator	file:
computeOffsets	type/CompositeType.java	/^    abstract protected void computeOffsets();$/;"	m	class:CompositeType
computeOffsets	type/StructType.java	/^    protected void computeOffsets() {$/;"	m	class:StructType
computeOffsets	type/UnionType.java	/^    protected void computeOffsets() {$/;"	m	class:UnionType
cond	ast/CondExprNode.java	/^    protected ExprNode cond, thenExpr, elseExpr;$/;"	f	class:CondExprNode
cond	ast/CondExprNode.java	/^    public ExprNode cond() {$/;"	m	class:CondExprNode
cond	ast/DoWhileNode.java	/^    protected ExprNode cond;$/;"	f	class:DoWhileNode
cond	ast/DoWhileNode.java	/^    public ExprNode cond() {$/;"	m	class:DoWhileNode
cond	ast/ForNode.java	/^    protected ExprNode cond;$/;"	f	class:ForNode
cond	ast/ForNode.java	/^    public ExprNode cond() {$/;"	m	class:ForNode
cond	ast/IfNode.java	/^    protected ExprNode cond;$/;"	f	class:IfNode
cond	ast/IfNode.java	/^    public ExprNode cond() {$/;"	m	class:IfNode
cond	ast/SwitchNode.java	/^    protected ExprNode cond;$/;"	f	class:SwitchNode
cond	ast/SwitchNode.java	/^    public ExprNode cond() {$/;"	m	class:SwitchNode
cond	ast/WhileNode.java	/^    protected ExprNode cond;$/;"	f	class:WhileNode
cond	ast/WhileNode.java	/^    public ExprNode cond() {$/;"	m	class:WhileNode
cond	ir/CJump.java	/^    protected Expr cond;$/;"	f	class:CJump
cond	ir/CJump.java	/^    public Expr cond() {$/;"	m	class:CJump
cond	ir/Switch.java	/^    protected Expr cond;$/;"	f	class:Switch
cond	ir/Switch.java	/^    public Expr cond() {$/;"	m	class:Switch
constantTable	ast/AST.java	/^    protected ConstantTable constantTable;$/;"	f	class:AST
constantTable	ast/AST.java	/^    public ConstantTable constantTable() {$/;"	m	class:AST
constantTable	compiler/LocalResolver.java	/^    private final ConstantTable constantTable;$/;"	f	class:LocalResolver	file:
constantTable	ir/IR.java	/^    ConstantTable constantTable;$/;"	f	class:IR
constantTable	ir/IR.java	/^    public ConstantTable constantTable() {$/;"	m	class:IR
constants	ast/AST.java	/^    public List<Constant> constants() {$/;"	m	class:AST
constants	ast/Declarations.java	/^    Set<Constant> constants = new LinkedHashSet<Constant>();$/;"	f	class:Declarations
constants	ast/Declarations.java	/^    public List<Constant> constants() {$/;"	m	class:Declarations
content	asm/Directive.java	/^    protected String content;$/;"	f	class:Directive
continueStack	compiler/IRGenerator.java	/^    LinkedList<Label> continueStack;$/;"	f	class:IRGenerator
current	utils/Cursor.java	/^    public T current() {$/;"	m	class:Cursor
currentBreakTarget	compiler/IRGenerator.java	/^    private Label currentBreakTarget() {$/;"	m	class:IRGenerator	file:
currentContinueTarget	compiler/IRGenerator.java	/^    private Label currentContinueTarget() {$/;"	m	class:IRGenerator	file:
currentFunction	compiler/TypeChecker.java	/^    DefinedFunction currentFunction;$/;"	f	class:TypeChecker
currentName	compiler/SourceFile.java	/^    String currentName() {$/;"	m	class:SourceFile
currentName	compiler/SourceFile.java	/^    private String currentName;$/;"	f	class:SourceFile	file:
currentScope	compiler/LocalResolver.java	/^    private Scope currentScope() {$/;"	m	class:LocalResolver	file:
cx	sysdep/x86/CodeGenerator.java	/^    private Register cx() { return cx(naturalType); }$/;"	m	class:CodeGenerator	file:
cx	sysdep/x86/CodeGenerator.java	/^    private Register cx(Type t) {$/;"	m	class:CodeGenerator	file:
debugParser	compiler/Options.java	/^    private boolean debugParser = false;$/;"	f	class:Options	file:
declarations	ast/AST.java	/^    protected Declarations declarations;$/;"	f	class:AST
declarations	ast/AST.java	/^    public List<Entity> declarations() {$/;"	m	class:AST
declareEntity	entity/ToplevelScope.java	/^    public void declareEntity(Entity entity) throws SemanticException {$/;"	m	class:ToplevelScope
defaultLabel	ir/Switch.java	/^    protected Label defaultLabel, endLabel;$/;"	f	class:Switch
defaultLabel	ir/Switch.java	/^    public Label defaultLabel() {$/;"	m	class:Switch
defaultLoadPath	parser/LibraryLoader.java	/^    static public List<String> defaultLoadPath() {$/;"	m	class:LibraryLoader
defaultSet	sysdep/x86/PeepholeOptimizer.java	/^    static public PeepholeOptimizer defaultSet() {$/;"	m	class:PeepholeOptimizer
defineEntity	entity/ToplevelScope.java	/^    public void defineEntity(Entity entity) throws SemanticException {$/;"	m	class:ToplevelScope
defineLabel	compiler/IRGenerator.java	/^    private Label defineLabel(String name, Location loc)$/;"	m	class:IRGenerator	file:
defineTypes	compiler/TypeResolver.java	/^    private void defineTypes(List<TypeDefinition> deftypes) {$/;"	m	class:TypeResolver	file:
defineVariable	entity/LocalScope.java	/^    public void defineVariable(DefinedVariable var) {$/;"	m	class:LocalScope
definedCommonSymbols	ir/IR.java	/^    public List<DefinedVariable> definedCommonSymbols() {$/;"	m	class:IR
definedFunctions	ast/AST.java	/^    public List<DefinedFunction> definedFunctions() {$/;"	m	class:AST
definedFunctions	ir/IR.java	/^    public List<DefinedFunction> definedFunctions() {$/;"	m	class:IR
definedGlobalScopeVariables	entity/ToplevelScope.java	/^    public List<DefinedVariable> definedGlobalScopeVariables() {$/;"	m	class:ToplevelScope
definedGlobalVariables	ir/IR.java	/^    public List<DefinedVariable> definedGlobalVariables() {$/;"	m	class:IR
definedVariables	ast/AST.java	/^    public List<DefinedVariable> definedVariables() {$/;"	m	class:AST
definedVariables	ir/IR.java	/^    public List<DefinedVariable> definedVariables() {$/;"	m	class:IR
definingType	ast/StructNode.java	/^    public Type definingType() {$/;"	m	class:StructNode
definingType	ast/TypeDefinition.java	/^    abstract public Type definingType();$/;"	m	class:TypeDefinition
definingType	ast/TypedefNode.java	/^    public Type definingType() {$/;"	m	class:TypedefNode
definingType	ast/UnionNode.java	/^    public Type definingType() {$/;"	m	class:UnionNode
definitions	ast/AST.java	/^    public List<Entity> definitions() {$/;"	m	class:AST
defstructs	ast/Declarations.java	/^    Set<StructNode> defstructs = new LinkedHashSet<StructNode>();$/;"	f	class:Declarations
defstructs	ast/Declarations.java	/^    public List<StructNode> defstructs() {$/;"	m	class:Declarations
defunions	ast/Declarations.java	/^    Set<UnionNode> defunions = new LinkedHashSet<UnionNode>();$/;"	f	class:Declarations
defunions	ast/Declarations.java	/^    public List<UnionNode> defunions() {$/;"	m	class:Declarations
defuns	ast/Declarations.java	/^    Set<DefinedFunction> defuns = new LinkedHashSet<DefinedFunction>();$/;"	f	class:Declarations
defuns	ast/Declarations.java	/^    public List<DefinedFunction> defuns() {$/;"	m	class:Declarations
defuns	ir/IR.java	/^    List<DefinedFunction> defuns;$/;"	f	class:IR
defvars	ast/Declarations.java	/^    Set<DefinedVariable> defvars = new LinkedHashSet<DefinedVariable>();$/;"	f	class:Declarations
defvars	ast/Declarations.java	/^    public List<DefinedVariable> defvars() {$/;"	m	class:Declarations
defvars	ir/IR.java	/^    List<DefinedVariable> defvars;$/;"	f	class:IR
dereferedCompositeType	ast/PtrMemberNode.java	/^    public CompositeType dereferedCompositeType() {$/;"	m	class:PtrMemberNode
dereferedType	ast/PtrMemberNode.java	/^    public Type dereferedType() {$/;"	m	class:PtrMemberNode
di	sysdep/x86/CodeGenerator.java	/^    private Register di() {$/;"	m	class:CodeGenerator	file:
directive	sysdep/x86/AssemblyCode.java	/^    protected void directive(String direc) {$/;"	m	class:AssemblyCode
div	sysdep/x86/AssemblyCode.java	/^    void div(Register base) {$/;"	m	class:AssemblyCode
doesDebugParser	compiler/Options.java	/^    boolean doesDebugParser() {$/;"	m	class:Options
doesLabelFollows	sysdep/x86/PeepholeOptimizer.java	/^        private boolean doesLabelFollows(Cursor<Assembly> asms, Symbol jmpDest) {$/;"	m	class:PeepholeOptimizer.JumpEliminationFilter	file:
doesRegisterUsed	asm/Statistics.java	/^    public boolean doesRegisterUsed(Register reg) {$/;"	m	class:Statistics
doesRequireRegisterOperand	sysdep/x86/CodeGenerator.java	/^    private boolean doesRequireRegisterOperand(Op op) {$/;"	m	class:CodeGenerator	file:
doesSymbolUsed	asm/Statistics.java	/^    public boolean doesSymbolUsed(Label label) {$/;"	m	class:Statistics
doesSymbolUsed	asm/Statistics.java	/^    public boolean doesSymbolUsed(Symbol sym) {$/;"	m	class:Statistics
doesUses	sysdep/x86/AssemblyCode.java	/^    boolean doesUses(Register reg) {$/;"	m	class:AssemblyCode
dummy	asm/SymbolTable.java	/^    static private final SymbolTable dummy = new SymbolTable(DUMMY_SYMBOL_BASE);$/;"	f	class:SymbolTable	file:
dummy	asm/SymbolTable.java	/^    static public SymbolTable dummy() {$/;"	m	class:SymbolTable
dump	asm/AbsoluteAddress.java	/^    public String dump() {$/;"	m	class:AbsoluteAddress
dump	asm/Assembly.java	/^    abstract public String dump();$/;"	m	class:Assembly
dump	asm/Comment.java	/^    public String dump() {$/;"	m	class:Comment
dump	asm/DirectMemoryReference.java	/^    public String dump() {$/;"	m	class:DirectMemoryReference
dump	asm/Directive.java	/^    public String dump() {$/;"	m	class:Directive
dump	asm/ImmediateValue.java	/^    public String dump() {$/;"	m	class:ImmediateValue
dump	asm/IndirectMemoryReference.java	/^    public String dump() {$/;"	m	class:IndirectMemoryReference
dump	asm/Instruction.java	/^    public String dump() {$/;"	m	class:Instruction
dump	asm/IntegerLiteral.java	/^    public String dump() {$/;"	m	class:IntegerLiteral
dump	asm/Label.java	/^    public String dump() {$/;"	m	class:Label
dump	asm/Literal.java	/^    public String dump();$/;"	m	interface:Literal
dump	asm/NamedSymbol.java	/^    public String dump() {$/;"	m	class:NamedSymbol
dump	asm/Operand.java	/^    abstract public String dump();$/;"	m	class:Operand
dump	asm/Register.java	/^    abstract public String dump();$/;"	m	class:Register
dump	asm/SuffixedSymbol.java	/^    public String dump() {$/;"	m	class:SuffixedSymbol
dump	asm/Symbol.java	/^    public String dump();$/;"	m	interface:Symbol
dump	asm/UnnamedSymbol.java	/^    public String dump() {$/;"	m	class:UnnamedSymbol
dump	ast/Dumpable.java	/^    void dump(Dumper d);$/;"	m	interface:Dumpable
dump	ast/Node.java	/^    public void dump() {$/;"	m	class:Node
dump	ast/Node.java	/^    public void dump(Dumper d) {$/;"	m	class:Node
dump	ast/Node.java	/^    public void dump(PrintStream s) {$/;"	m	class:Node
dump	entity/Entity.java	/^    public void dump(net.loveruby.cflat.ast.Dumper d) {$/;"	m	class:Entity
dump	entity/Params.java	/^    public void dump(net.loveruby.cflat.ast.Dumper d) {$/;"	m	class:Params
dump	ir/Case.java	/^    public void dump(Dumper d) {$/;"	m	class:Case
dump	ir/Dumpable.java	/^    void dump(Dumper d);$/;"	m	interface:Dumpable
dump	ir/Expr.java	/^    public void dump(Dumper d) {$/;"	m	class:Expr
dump	ir/IR.java	/^    public void dump() {$/;"	m	class:IR
dump	ir/IR.java	/^    public void dump(PrintStream s) {$/;"	m	class:IR
dump	ir/Stmt.java	/^    public void dump(Dumper d) {$/;"	m	class:Stmt
dump	sysdep/AssemblyCode.java	/^    void dump();$/;"	m	interface:AssemblyCode
dump	sysdep/AssemblyCode.java	/^    void dump(PrintStream s);$/;"	m	interface:AssemblyCode
dump	sysdep/x86/AssemblyCode.java	/^    public void dump() {$/;"	m	class:AssemblyCode
dump	sysdep/x86/AssemblyCode.java	/^    public void dump(PrintStream s) {$/;"	m	class:AssemblyCode
dump	sysdep/x86/Register.java	/^    public String dump() {$/;"	m	class:Register
dumpAST	compiler/Compiler.java	/^    private boolean dumpAST(AST ast, CompilerMode mode) {$/;"	m	class:Compiler	file:
dumpAsm	compiler/Compiler.java	/^    private boolean dumpAsm(AssemblyCode asm, CompilerMode mode) {$/;"	m	class:Compiler	file:
dumpCommand	utils/CommandUtils.java	/^    static private void dumpCommand(List<String> args) {$/;"	m	class:CommandUtils	file:
dumpIR	compiler/Compiler.java	/^    private boolean dumpIR(IR ir, CompilerMode mode) {$/;"	m	class:Compiler	file:
dumpSemant	compiler/Compiler.java	/^    private boolean dumpSemant(AST ast, CompilerMode mode) {$/;"	m	class:Compiler	file:
dumpString	utils/TextUtils.java	/^    static public String dumpString(String str) {$/;"	m	class:TextUtils
dumpString	utils/TextUtils.java	/^    static public String dumpString(String string, String encoding)$/;"	m	class:TextUtils
dumpTokens	ast/AST.java	/^    public void dumpTokens(PrintStream s) {$/;"	m	class:AST
dumpedImage	ast/CflatToken.java	/^    public String dumpedImage() {$/;"	m	class:CflatToken
dx	sysdep/x86/CodeGenerator.java	/^    private Register dx() { return dx(naturalType); }$/;"	m	class:CodeGenerator	file:
dx	sysdep/x86/CodeGenerator.java	/^    private Register dx(Type t) {$/;"	m	class:CodeGenerator	file:
elementSize	ast/ArefNode.java	/^    public long elementSize() {$/;"	m	class:ArefNode
elseBody	ast/IfNode.java	/^    protected StmtNode elseBody;$/;"	f	class:IfNode
elseBody	ast/IfNode.java	/^    public StmtNode elseBody() {$/;"	m	class:IfNode
elseExpr	ast/CondExprNode.java	/^    protected ExprNode cond, thenExpr, elseExpr;$/;"	f	class:CondExprNode
elseExpr	ast/CondExprNode.java	/^    public ExprNode elseExpr() {$/;"	m	class:CondExprNode
elseLabel	ir/CJump.java	/^    protected Label elseLabel;$/;"	f	class:CJump
elseLabel	ir/CJump.java	/^    public Label elseLabel() {$/;"	m	class:CJump
endLabel	ir/Switch.java	/^    protected Label defaultLabel, endLabel;$/;"	f	class:Switch
endLabel	ir/Switch.java	/^    public Label endLabel() {$/;"	m	class:Switch
entities	ast/AST.java	/^    public List<Entity> entities() {$/;"	m	class:AST
entities	entity/ToplevelScope.java	/^    protected Map<String, Entity> entities;$/;"	f	class:ToplevelScope
entity	ast/VariableNode.java	/^    private Entity entity;$/;"	f	class:VariableNode	file:
entity	ast/VariableNode.java	/^    public Entity entity() {$/;"	m	class:VariableNode
entity	ir/Addr.java	/^    Entity entity;$/;"	f	class:Addr
entity	ir/Addr.java	/^    public Entity entity() { return entity; }$/;"	m	class:Addr
entity	ir/Var.java	/^    protected Entity entity;$/;"	f	class:Var
entity	ir/Var.java	/^    public Entity entity() { return entity; }$/;"	m	class:Var
entries	entity/ConstantTable.java	/^    public Collection<ConstantEntry> entries() {$/;"	m	class:ConstantTable
entry	ast/StringLiteralNode.java	/^    protected ConstantEntry entry;$/;"	f	class:StringLiteralNode
entry	ast/StringLiteralNode.java	/^    public ConstantEntry entry() {$/;"	m	class:StringLiteralNode
entry	ir/Str.java	/^    protected ConstantEntry entry;$/;"	f	class:Str
entry	ir/Str.java	/^    public ConstantEntry entry() { return entry; }$/;"	m	class:Str
epilogue	sysdep/x86/CodeGenerator.java	/^    private Label epilogue;$/;"	f	class:CodeGenerator	file:
epilogue	sysdep/x86/CodeGenerator.java	/^    private void epilogue(AssemblyCode file, List<Register> savedRegs) {$/;"	m	class:CodeGenerator	file:
equals	asm/ImmediateValue.java	/^    public boolean equals(Object other) {$/;"	m	class:ImmediateValue
equals	asm/IntegerLiteral.java	/^    public boolean equals(IntegerLiteral other) {$/;"	m	class:IntegerLiteral
equals	asm/IntegerLiteral.java	/^    public boolean equals(Object other) {$/;"	m	class:IntegerLiteral
equals	entity/Params.java	/^    public boolean equals(Object other) {$/;"	m	class:Params
equals	entity/Params.java	/^    public boolean equals(Params other) {$/;"	m	class:Params
equals	sysdep/x86/Register.java	/^    public boolean equals(Object other) {$/;"	m	class:Register
equals	sysdep/x86/Register.java	/^    public boolean equals(Register reg) {$/;"	m	class:Register
equals	type/ArrayType.java	/^    public boolean equals(Object other) {$/;"	m	class:ArrayType
equals	type/ArrayTypeRef.java	/^    public boolean equals(Object other) {$/;"	m	class:ArrayTypeRef
equals	type/FunctionTypeRef.java	/^    public boolean equals(FunctionTypeRef other) {$/;"	m	class:FunctionTypeRef
equals	type/FunctionTypeRef.java	/^    public boolean equals(Object other) {$/;"	m	class:FunctionTypeRef
equals	type/IntegerTypeRef.java	/^    public boolean equals(Object other) {$/;"	m	class:IntegerTypeRef
equals	type/ParamTypeRefs.java	/^    public boolean equals(Object other) {$/;"	m	class:ParamTypeRefs
equals	type/ParamTypeRefs.java	/^    public boolean equals(ParamTypeRefs other) {$/;"	m	class:ParamTypeRefs
equals	type/ParamTypes.java	/^    public boolean equals(Object other) {$/;"	m	class:ParamTypes
equals	type/ParamTypes.java	/^    public boolean equals(ParamTypes other) {$/;"	m	class:ParamTypes
equals	type/PointerType.java	/^    public boolean equals(Object other) {$/;"	m	class:PointerType
equals	type/PointerTypeRef.java	/^    public boolean equals(Object other) {$/;"	m	class:PointerTypeRef
equals	type/StructTypeRef.java	/^    public boolean equals(Object other) {$/;"	m	class:StructTypeRef
equals	type/UnionTypeRef.java	/^    public boolean equals(Object other) {$/;"	m	class:UnionTypeRef
equals	type/UserTypeRef.java	/^    public boolean equals(Object other) {$/;"	m	class:UserTypeRef
equals	type/VoidType.java	/^    public boolean equals(Object other) {$/;"	m	class:VoidType
equals	type/VoidTypeRef.java	/^    public boolean equals(Object other) {$/;"	m	class:VoidTypeRef
error	compiler/IRGenerator.java	/^    private void error(Node n, String msg) {$/;"	m	class:IRGenerator	file:
error	compiler/LocalResolver.java	/^    private void error(Location loc, String message) {$/;"	m	class:LocalResolver	file:
error	compiler/LocalResolver.java	/^    private void error(Node node, String message) {$/;"	m	class:LocalResolver	file:
error	compiler/TypeChecker.java	/^    private void error(Location loc, String msg) {$/;"	m	class:TypeChecker	file:
error	compiler/TypeChecker.java	/^    private void error(Node n, String msg) {$/;"	m	class:TypeChecker	file:
error	compiler/TypeResolver.java	/^    private void error(Node node, String msg) {$/;"	m	class:TypeResolver	file:
error	utils/ErrorHandler.java	/^    public void error(Location loc, String msg) {$/;"	m	class:ErrorHandler
error	utils/ErrorHandler.java	/^    public void error(String msg) {$/;"	m	class:ErrorHandler
errorExit	compiler/Compiler.java	/^    private void errorExit(String msg) {$/;"	m	class:Compiler	file:
errorHandler	compiler/Compiler.java	/^    private final ErrorHandler errorHandler;$/;"	f	class:Compiler	file:
errorHandler	compiler/DereferenceChecker.java	/^    private final ErrorHandler errorHandler;$/;"	f	class:DereferenceChecker	file:
errorHandler	compiler/IRGenerator.java	/^    private final ErrorHandler errorHandler;$/;"	f	class:IRGenerator	file:
errorHandler	compiler/LocalResolver.java	/^    private final ErrorHandler errorHandler;$/;"	f	class:LocalResolver	file:
errorHandler	compiler/TypeChecker.java	/^    private final ErrorHandler errorHandler;$/;"	f	class:TypeChecker	file:
errorHandler	compiler/TypeResolver.java	/^    private final ErrorHandler errorHandler;$/;"	f	class:TypeResolver	file:
errorHandler	sysdep/GNUAssembler.java	/^    ErrorHandler errorHandler;$/;"	f	class:GNUAssembler
errorHandler	sysdep/GNULinker.java	/^    ErrorHandler errorHandler;$/;"	f	class:GNULinker
errorHandler	sysdep/x86/CodeGenerator.java	/^    final ErrorHandler errorHandler;$/;"	f	class:CodeGenerator
errorOccured	utils/ErrorHandler.java	/^    public boolean errorOccured() {$/;"	m	class:ErrorHandler
exeFileName	compiler/Options.java	/^    String exeFileName() {$/;"	m	class:Options
expectsComparableScalars	compiler/TypeChecker.java	/^    private void expectsComparableScalars(BinaryOpNode node) {$/;"	m	class:TypeChecker	file:
expectsSameInteger	compiler/TypeChecker.java	/^    private void expectsSameInteger(BinaryOpNode node) {$/;"	m	class:TypeChecker	file:
expectsSameIntegerOrPointerDiff	compiler/TypeChecker.java	/^    private void expectsSameIntegerOrPointerDiff(BinaryOpNode node) {$/;"	m	class:TypeChecker	file:
expectsScalarLHS	compiler/TypeChecker.java	/^    private void expectsScalarLHS(UnaryArithmeticOpNode node) {$/;"	m	class:TypeChecker	file:
expr	asm/ImmediateValue.java	/^    protected Literal expr;$/;"	f	class:ImmediateValue
expr	asm/ImmediateValue.java	/^    public Literal expr() {$/;"	m	class:ImmediateValue
expr	ast/AddressNode.java	/^    final ExprNode expr;$/;"	f	class:AddressNode
expr	ast/AddressNode.java	/^    public ExprNode expr() {$/;"	m	class:AddressNode
expr	ast/ArefNode.java	/^    private ExprNode expr, index;$/;"	f	class:ArefNode	file:
expr	ast/ArefNode.java	/^    public ExprNode expr() { return expr; }$/;"	m	class:ArefNode
expr	ast/CastNode.java	/^    protected ExprNode expr;$/;"	f	class:CastNode
expr	ast/CastNode.java	/^    public ExprNode expr() {$/;"	m	class:CastNode
expr	ast/DereferenceNode.java	/^    private ExprNode expr;$/;"	f	class:DereferenceNode	file:
expr	ast/DereferenceNode.java	/^    public ExprNode expr() {$/;"	m	class:DereferenceNode
expr	ast/ExprStmtNode.java	/^    protected ExprNode expr;$/;"	f	class:ExprStmtNode
expr	ast/ExprStmtNode.java	/^    public ExprNode expr() {$/;"	m	class:ExprStmtNode
expr	ast/FuncallNode.java	/^    protected ExprNode expr;$/;"	f	class:FuncallNode
expr	ast/FuncallNode.java	/^    public ExprNode expr() {$/;"	m	class:FuncallNode
expr	ast/MemberNode.java	/^    private ExprNode expr;$/;"	f	class:MemberNode	file:
expr	ast/MemberNode.java	/^    public ExprNode expr() {$/;"	m	class:MemberNode
expr	ast/PtrMemberNode.java	/^    public ExprNode expr() {$/;"	m	class:PtrMemberNode
expr	ast/PtrMemberNode.java	/^    public ExprNode expr;$/;"	f	class:PtrMemberNode
expr	ast/ReturnNode.java	/^    protected ExprNode expr;$/;"	f	class:ReturnNode
expr	ast/ReturnNode.java	/^    public ExprNode expr() {$/;"	m	class:ReturnNode
expr	ast/SizeofExprNode.java	/^    protected ExprNode expr;$/;"	f	class:SizeofExprNode
expr	ast/SizeofExprNode.java	/^    public ExprNode expr() {$/;"	m	class:SizeofExprNode
expr	ast/UnaryOpNode.java	/^    protected ExprNode expr;$/;"	f	class:UnaryOpNode
expr	ast/UnaryOpNode.java	/^    public ExprNode expr() {$/;"	m	class:UnaryOpNode
expr	ir/Call.java	/^    private Expr expr;$/;"	f	class:Call	file:
expr	ir/Call.java	/^    public Expr expr() { return expr; }$/;"	m	class:Call
expr	ir/ExprStmt.java	/^    protected Expr expr;$/;"	f	class:ExprStmt
expr	ir/ExprStmt.java	/^    public Expr expr() {$/;"	m	class:ExprStmt
expr	ir/Mem.java	/^    protected Expr expr;$/;"	f	class:Mem
expr	ir/Mem.java	/^    public Expr expr() { return expr; }$/;"	m	class:Mem
expr	ir/Return.java	/^    protected Expr expr;$/;"	f	class:Return
expr	ir/Return.java	/^    public Expr expr() { return expr; }$/;"	m	class:Return
expr	ir/Uni.java	/^    protected Expr expr;$/;"	f	class:Uni
expr	ir/Uni.java	/^    public Expr expr() { return expr; }$/;"	m	class:Uni
exprNestLevel	compiler/IRGenerator.java	/^    private int exprNestLevel = 0;$/;"	f	class:IRGenerator	file:
extName	compiler/SourceFile.java	/^    private String extName(String path) {$/;"	m	class:SourceFile	file:
extend	sysdep/x86/AssemblyCode.java	/^        void extend(long len) {$/;"	m	class:AssemblyCode.VirtualStack
extendStack	sysdep/x86/CodeGenerator.java	/^    private void extendStack(AssemblyCode file, long len) {$/;"	m	class:CodeGenerator	file:
fetch	type/CompositeType.java	/^    protected Slot fetch(String name) {$/;"	m	class:CompositeType
fetchCount	asm/Statistics.java	/^    protected <K> int fetchCount(Map<K, Integer> m, K key) {$/;"	m	class:Statistics
fileName	ir/IR.java	/^    public String fileName() {$/;"	m	class:IR
filterSet	sysdep/x86/PeepholeOptimizer.java	/^    private Map<String, List<Filter>> filterSet;$/;"	f	class:PeepholeOptimizer	file:
findExpr	compiler/Compiler.java	/^    private ExprNode findExpr(AST ast) {$/;"	m	class:Compiler	file:
findStmt	compiler/Compiler.java	/^    private StmtNode findStmt(AST ast) {$/;"	m	class:Compiler	file:
fixLocalVariableOffsets	sysdep/x86/CodeGenerator.java	/^    private void fixLocalVariableOffsets(LocalScope scope, long len) {$/;"	m	class:CodeGenerator	file:
fixOffset	asm/DirectMemoryReference.java	/^    public void fixOffset(long diff) {$/;"	m	class:DirectMemoryReference
fixOffset	asm/IndirectMemoryReference.java	/^    public void fixOffset(long diff) {$/;"	m	class:IndirectMemoryReference
fixOffset	asm/MemoryReference.java	/^    abstract public void fixOffset(long diff);$/;"	m	class:MemoryReference
fixOffset	sysdep/x86/AssemblyCode.java	/^        void fixOffset(long diff) {$/;"	m	class:AssemblyCode.VirtualStack
fixTempVariableOffsets	sysdep/x86/CodeGenerator.java	/^    private void fixTempVariableOffsets(AssemblyCode asm, long len) {$/;"	m	class:CodeGenerator	file:
fixed	asm/IndirectMemoryReference.java	/^    boolean fixed;$/;"	f	class:IndirectMemoryReference
forType	sysdep/x86/Register.java	/^    Register forType(Type t) {$/;"	m	class:Register
forcePointerType	compiler/TypeChecker.java	/^    private ExprNode forcePointerType(ExprNode master, ExprNode slave) {$/;"	m	class:TypeChecker	file:
frameSize	sysdep/x86/CodeGenerator.java	/^        long frameSize() { return saveRegsSize() + lvarSize + tempSize; }$/;"	m	class:CodeGenerator.StackFrameInfo
fromOption	compiler/CompilerMode.java	/^    static public CompilerMode fromOption(String opt) {$/;"	m	class:CompilerMode
funcdecls	ast/Declarations.java	/^    Set<UndefinedFunction> funcdecls = new LinkedHashSet<UndefinedFunction>();$/;"	f	class:Declarations
funcdecls	ast/Declarations.java	/^    public List<UndefinedFunction> funcdecls() {$/;"	m	class:Declarations
funcdecls	ir/IR.java	/^    List<UndefinedFunction> funcdecls;$/;"	f	class:IR
function	ir/Call.java	/^    public Function function() {$/;"	m	class:Call
functionType	ast/FuncallNode.java	/^    public FunctionType functionType() {$/;"	m	class:FuncallNode
genOptions	compiler/Options.java	/^    private CodeGeneratorOptions genOptions = new CodeGeneratorOptions();$/;"	f	class:Options	file:
generate	compiler/IRGenerator.java	/^    public IR generate(AST ast) throws SemanticException {$/;"	m	class:IRGenerator
generate	sysdep/CodeGenerator.java	/^    AssemblyCode generate(net.loveruby.cflat.ir.IR ir);$/;"	m	interface:CodeGenerator
generate	sysdep/x86/CodeGenerator.java	/^    public AssemblyCode generate(IR ir) {$/;"	m	class:CodeGenerator
generateAssembly	compiler/Compiler.java	/^    public AssemblyCode generateAssembly(IR ir, Options opts) {$/;"	m	class:Compiler
generateAssemblyCode	sysdep/x86/CodeGenerator.java	/^    private AssemblyCode generateAssemblyCode(IR ir) {$/;"	m	class:CodeGenerator	file:
generateCommonSymbols	sysdep/x86/CodeGenerator.java	/^    private void generateCommonSymbols(AssemblyCode file,$/;"	m	class:CodeGenerator	file:
generateDataSection	sysdep/x86/CodeGenerator.java	/^    private void generateDataSection(AssemblyCode file,$/;"	m	class:CodeGenerator	file:
generateExecutable	compiler/Compiler.java	/^    public void generateExecutable(Options opts) throws IPCException {$/;"	m	class:Compiler
generateExecutable	sysdep/GNULinker.java	/^    public void generateExecutable(List<String> args,$/;"	m	class:GNULinker
generateExecutable	sysdep/Linker.java	/^    void generateExecutable(List<String> args, String destPath,$/;"	m	interface:Linker
generateFunctionBody	sysdep/x86/CodeGenerator.java	/^    private void generateFunctionBody(AssemblyCode file,$/;"	m	class:CodeGenerator	file:
generateImmediate	sysdep/x86/CodeGenerator.java	/^    private void generateImmediate(AssemblyCode file, long size, Expr node) {$/;"	m	class:CodeGenerator	file:
generatePIC	sysdep/CodeGeneratorOptions.java	/^    protected boolean generatePIC;$/;"	f	class:CodeGeneratorOptions
generatePIC	sysdep/CodeGeneratorOptions.java	/^    public void generatePIC() {$/;"	m	class:CodeGeneratorOptions
generatePIE	sysdep/CodeGeneratorOptions.java	/^    protected boolean generatePIE;$/;"	f	class:CodeGeneratorOptions
generatePIE	sysdep/CodeGeneratorOptions.java	/^    public void generatePIE() {$/;"	m	class:CodeGeneratorOptions
generateReadOnlyDataSection	sysdep/x86/CodeGenerator.java	/^    private void generateReadOnlyDataSection(AssemblyCode file,$/;"	m	class:CodeGenerator	file:
generateSharedLibrary	compiler/Compiler.java	/^    public void generateSharedLibrary(Options opts) throws IPCException {$/;"	m	class:Compiler
generateSharedLibrary	sysdep/GNULinker.java	/^    public void generateSharedLibrary(List<String> args,$/;"	m	class:GNULinker
generateSharedLibrary	sysdep/Linker.java	/^    void generateSharedLibrary(List<String> args, String destPath,$/;"	m	interface:Linker
generateTextSection	sysdep/x86/CodeGenerator.java	/^    private void generateTextSection(AssemblyCode file,$/;"	m	class:CodeGenerator	file:
generateVerboseAsm	sysdep/CodeGeneratorOptions.java	/^    public void generateVerboseAsm() {$/;"	m	class:CodeGeneratorOptions
generatingPIE	sysdep/LinkerOptions.java	/^    public boolean generatingPIE = false;$/;"	f	class:LinkerOptions
generatingSharedLibrary	sysdep/LinkerOptions.java	/^    public boolean generatingSharedLibrary = false;$/;"	f	class:LinkerOptions
get	asm/Type.java	/^    static public Type get(long size) {$/;"	m	class:Type
get	entity/LocalScope.java	/^    public Entity get(String name) throws SemanticException {$/;"	m	class:LocalScope
get	entity/Scope.java	/^    abstract public Entity get(String name) throws SemanticException;$/;"	m	class:Scope
get	entity/ToplevelScope.java	/^    public Entity get(String name) throws SemanticException {$/;"	m	class:ToplevelScope
get	type/CompositeType.java	/^    public Slot get(String name) {$/;"	m	class:CompositeType
get	type/TypeTable.java	/^    public Type get(TypeRef ref) {$/;"	m	class:TypeTable
getArrayType	type/Type.java	/^    public ArrayType getArrayType() { return (ArrayType)this; }$/;"	m	class:Type
getArrayType	type/UserType.java	/^    public ArrayType getArrayType() { return realType().getArrayType(); }$/;"	m	class:UserType
getCompositeType	type/Type.java	/^    public CompositeType getCompositeType() { return (CompositeType)this; }$/;"	m	class:Type
getCompositeType	type/UserType.java	/^    public CompositeType getCompositeType() { return realType().getCompositeType(); }$/;"	m	class:UserType
getEntityForce	ir/Addr.java	/^    public Entity getEntityForce() {$/;"	m	class:Addr
getEntityForce	ir/Expr.java	/^    public Entity getEntityForce() {$/;"	m	class:Expr
getEntityForce	ir/Var.java	/^    public Entity getEntityForce() {$/;"	m	class:Var
getFunctionType	type/Type.java	/^    public FunctionType getFunctionType() { return (FunctionType)this; }$/;"	m	class:Type
getFunctionType	type/UserType.java	/^    public FunctionType getFunctionType() { return realType().getFunctionType(); }$/;"	m	class:UserType
getIntegerType	type/Type.java	/^    public IntegerType getIntegerType() { return (IntegerType)this; }$/;"	m	class:Type
getIntegerType	type/UserType.java	/^    public IntegerType getIntegerType() { return realType().getIntegerType(); }$/;"	m	class:UserType
getJumpEntry	compiler/IRGenerator.java	/^    private JumpEntry getJumpEntry(String name) {$/;"	m	class:IRGenerator	file:
getOptArg	compiler/Options.java	/^    private String getOptArg(String opt, ListIterator<String> args) {$/;"	m	class:Options	file:
getParamType	type/TypeTable.java	/^    public Type getParamType(TypeRef ref) {$/;"	m	class:TypeTable
getPointerType	type/Type.java	/^    public PointerType getPointerType() { return (PointerType)this; }$/;"	m	class:Type
getPointerType	type/UserType.java	/^    public PointerType getPointerType() { return realType().getPointerType(); }$/;"	m	class:UserType
getSingleMainExpr	ast/AST.java	/^    public ExprNode getSingleMainExpr() {$/;"	m	class:AST
getSingleMainStmt	ast/AST.java	/^    public StmtNode getSingleMainStmt() {$/;"	m	class:AST
getStructType	type/Type.java	/^    public StructType getStructType() { return (StructType)this; }$/;"	m	class:Type
getStructType	type/UserType.java	/^    public StructType getStructType() { return realType().getStructType(); }$/;"	m	class:UserType
getUnionType	type/Type.java	/^    public UnionType getUnionType() { return (UnionType)this; }$/;"	m	class:Type
getUnionType	type/UserType.java	/^    public UnionType getUnionType() { return realType().getUnionType(); }$/;"	m	class:UserType
globalGOTSymbol	sysdep/x86/CodeGenerator.java	/^    private Symbol globalGOTSymbol(Symbol base) {$/;"	m	class:CodeGenerator	file:
globalSymbol	sysdep/x86/CodeGenerator.java	/^    private Symbol globalSymbol(String sym) {$/;"	m	class:CodeGenerator	file:
gvars	ir/IR.java	/^    List<DefinedVariable> gvars;   \/\/ cache$/;"	f	class:IR
handleImplicitAddress	compiler/DereferenceChecker.java	/^    private void handleImplicitAddress(LHSNode node) {$/;"	m	class:DereferenceChecker	file:
hasInitializer	entity/DefinedVariable.java	/^    public boolean hasInitializer() {$/;"	m	class:DefinedVariable
hasMember	type/CompositeType.java	/^    public boolean hasMember(String name) {$/;"	m	class:CompositeType
hasNext	utils/Cursor.java	/^    public boolean hasNext() {$/;"	m	class:Cursor
hashCode	sysdep/x86/Register.java	/^    public int hashCode() {$/;"	m	class:Register
hashCode	type/TypeRef.java	/^    public int hashCode() {$/;"	m	class:TypeRef
idiv	sysdep/x86/AssemblyCode.java	/^    void idiv(Register base) {$/;"	m	class:AssemblyCode
ilp32	type/TypeTable.java	/^    static public TypeTable ilp32() { return newTable(1, 2, 4, 4, 4); }$/;"	m	class:TypeTable
ilp64	type/TypeTable.java	/^    static public TypeTable ilp64() { return newTable(1, 2, 8, 8, 8); }$/;"	m	class:TypeTable
image	ast/CflatToken.java	/^    public String image() {$/;"	m	class:CflatToken
imm	compiler/IRGenerator.java	/^    private Int imm(Type operandType, long n) {$/;"	m	class:IRGenerator	file:
imm	sysdep/x86/CodeGenerator.java	/^    private ImmediateValue imm(Literal lit) {$/;"	m	class:CodeGenerator	file:
imm	sysdep/x86/CodeGenerator.java	/^    private ImmediateValue imm(Symbol sym) {$/;"	m	class:CodeGenerator	file:
imm	sysdep/x86/CodeGenerator.java	/^    private ImmediateValue imm(long n) {$/;"	m	class:CodeGenerator	file:
imm	sysdep/x86/PeepholeOptimizer.java	/^    private ImmediateValue imm(long n) {$/;"	m	class:PeepholeOptimizer	file:
implicitCast	compiler/TypeChecker.java	/^    private ExprNode implicitCast(Type targetType, ExprNode expr) {$/;"	m	class:TypeChecker	file:
imul	sysdep/x86/AssemblyCode.java	/^    void imul(Operand m, Register base) {$/;"	m	class:AssemblyCode
includedLine	ast/CflatToken.java	/^    public String includedLine() {$/;"	m	class:CflatToken
incr	ast/ForNode.java	/^    protected StmtNode incr;$/;"	f	class:ForNode
incr	ast/ForNode.java	/^    public StmtNode incr() {$/;"	m	class:ForNode
incrementCount	asm/Statistics.java	/^    protected <K> void incrementCount(Map<K, Integer> m, K key) {$/;"	m	class:Statistics
indent	asm/Comment.java	/^    protected String indent() {$/;"	m	class:Comment
indent	ast/Dumper.java	/^    protected void indent() { nIndent++; }$/;"	m	class:Dumper
indent	ir/Dumper.java	/^    private void indent() { numIndent++; }$/;"	m	class:Dumper	file:
indentComment	sysdep/x86/AssemblyCode.java	/^    void indentComment() {$/;"	m	class:AssemblyCode
indentLevel	asm/Comment.java	/^    protected int indentLevel;$/;"	f	class:Comment
indentString	ast/Dumper.java	/^    static final protected String indentString = "    ";$/;"	f	class:Dumper
indentString	ir/Dumper.java	/^    static final private String indentString = "    ";$/;"	f	class:Dumper	file:
index	ast/ArefNode.java	/^    private ExprNode expr, index;$/;"	f	class:ArefNode	file:
index	ast/ArefNode.java	/^    public ExprNode index() { return index; }$/;"	m	class:ArefNode
index	utils/Cursor.java	/^    protected int index;$/;"	f	class:Cursor
init	ast/ForNode.java	/^    protected StmtNode init;$/;"	f	class:ForNode
init	ast/ForNode.java	/^    public StmtNode init() {$/;"	m	class:ForNode
initVariables	ir/IR.java	/^    private void initVariables() {$/;"	m	class:IR	file:
initializer	entity/DefinedVariable.java	/^    protected ExprNode initializer;$/;"	f	class:DefinedVariable
initializer	entity/DefinedVariable.java	/^    public ExprNode initializer() {$/;"	m	class:DefinedVariable
insn	sysdep/x86/AssemblyCode.java	/^    protected void insn(String op) {$/;"	m	class:AssemblyCode
insn	sysdep/x86/AssemblyCode.java	/^    protected void insn(String op, Operand a) {$/;"	m	class:AssemblyCode
insn	sysdep/x86/AssemblyCode.java	/^    protected void insn(String op, String suffix, Operand a) {$/;"	m	class:AssemblyCode
insn	sysdep/x86/AssemblyCode.java	/^    protected void insn(String op, String suffix, Operand a, Operand b) {$/;"	m	class:AssemblyCode
insn	sysdep/x86/AssemblyCode.java	/^    protected void insn(Type t, String op, Operand a) {$/;"	m	class:AssemblyCode
insn	sysdep/x86/AssemblyCode.java	/^    protected void insn(Type t, String op, Operand a, Operand b) {$/;"	m	class:AssemblyCode
insnUsage	asm/Statistics.java	/^    protected Map<String, Integer> insnUsage;$/;"	f	class:Statistics
instructionUsed	asm/Statistics.java	/^    public void instructionUsed(String insn) {$/;"	m	class:Statistics
intRef	type/IntegerTypeRef.java	/^    static public IntegerTypeRef intRef() {$/;"	m	class:IntegerTypeRef
intRef	type/IntegerTypeRef.java	/^    static public IntegerTypeRef intRef(Location loc) {$/;"	m	class:IntegerTypeRef
intSize	type/TypeTable.java	/^    private int intSize;$/;"	f	class:TypeTable	file:
intSize	type/TypeTable.java	/^    public int intSize() {$/;"	m	class:TypeTable
int_t	compiler/IRGenerator.java	/^    private net.loveruby.cflat.asm.Type int_t() {$/;"	m	class:IRGenerator	file:
integerLiteral	asm/IntegerLiteral.java	/^    public IntegerLiteral integerLiteral() {$/;"	m	class:IntegerLiteral
integerLiteral	asm/Operand.java	/^    public IntegerLiteral integerLiteral() {$/;"	m	class:Operand
integralPromotedExpr	compiler/TypeChecker.java	/^    private ExprNode integralPromotedExpr(ExprNode expr) {$/;"	m	class:TypeChecker	file:
integralPromotion	compiler/TypeChecker.java	/^    private Type integralPromotion(Type t) {$/;"	m	class:TypeChecker	file:
intern	entity/ConstantTable.java	/^    public ConstantEntry intern(String s) {$/;"	m	class:ConstantTable
internBinary	ir/Op.java	/^    static public Op internBinary(String op, boolean isSigned) {$/;"	m	class:Op
internTypes	type/ParamTypeRefs.java	/^    public ParamTypes internTypes(TypeTable table) {$/;"	m	class:ParamTypeRefs
internUnary	ir/Op.java	/^    static public Op internUnary(String op) {$/;"	m	class:Op
invalidCastError	compiler/TypeChecker.java	/^    private void invalidCastError(Node n, Type l, Type r) {$/;"	m	class:TypeChecker	file:
invoke	utils/CommandUtils.java	/^    static public void invoke(List<String> cmdArgs,$/;"	m	class:CommandUtils
ir	ast/AST.java	/^    public IR ir() {$/;"	m	class:AST
ir	entity/DefinedFunction.java	/^    protected List<Stmt> ir;$/;"	f	class:DefinedFunction
ir	entity/DefinedFunction.java	/^    public List<Stmt> ir() {$/;"	m	class:DefinedFunction
ir	entity/DefinedVariable.java	/^    protected Expr ir;$/;"	f	class:DefinedVariable
ir	entity/DefinedVariable.java	/^    public Expr ir() { return ir; }$/;"	m	class:DefinedVariable
isAddr	ir/Addr.java	/^    public boolean isAddr() { return true; }$/;"	m	class:Addr
isAddr	ir/Expr.java	/^    public boolean isAddr() { return false; }$/;"	m	class:Expr
isAllocatedArray	type/ArrayType.java	/^    public boolean isAllocatedArray() {$/;"	m	class:ArrayType
isAllocatedArray	type/Type.java	/^    public boolean isAllocatedArray() { return false; }$/;"	m	class:Type
isAllocatedArray	type/UserType.java	/^    public boolean isAllocatedArray() { return realType().isAllocatedArray(); }$/;"	m	class:UserType
isArray	type/ArrayType.java	/^    public boolean isArray() { return true; }$/;"	m	class:ArrayType
isArray	type/ArrayTypeRef.java	/^    public boolean isArray() {$/;"	m	class:ArrayTypeRef
isArray	type/Type.java	/^    public boolean isArray() { return false; }$/;"	m	class:Type
isArray	type/UserType.java	/^    public boolean isArray() { return realType().isArray(); }$/;"	m	class:UserType
isAssembleRequired	compiler/Options.java	/^    boolean isAssembleRequired() {$/;"	m	class:Options
isAssemblySource	compiler/SourceFile.java	/^    boolean isAssemblySource() {$/;"	m	class:SourceFile
isAssignable	ast/CastNode.java	/^    public boolean isAssignable() { return expr.isAssignable(); }$/;"	m	class:CastNode
isAssignable	ast/ExprNode.java	/^    public boolean isAssignable() { return false; }$/;"	m	class:ExprNode
isAssignable	ast/LHSNode.java	/^    public boolean isAssignable() { return isLoadable(); }$/;"	m	class:LHSNode
isAssignable	entity/Constant.java	/^    public boolean isAssignable() { return false; }$/;"	m	class:Constant
isCallable	ast/ExprNode.java	/^    public boolean isCallable() {$/;"	m	class:ExprNode
isCallable	type/FunctionType.java	/^    public boolean isCallable() { return true; }$/;"	m	class:FunctionType
isCallable	type/PointerType.java	/^    public boolean isCallable() { return baseType.isFunction(); }$/;"	m	class:PointerType
isCallable	type/Type.java	/^    public boolean isCallable() { return false; }$/;"	m	class:Type
isCallable	type/UserType.java	/^    public boolean isCallable() { return realType().isCallable(); }$/;"	m	class:UserType
isCastableTo	type/ArrayType.java	/^    public boolean isCastableTo(Type target) {$/;"	m	class:ArrayType
isCastableTo	type/CompositeType.java	/^    public boolean isCastableTo(Type target) {$/;"	m	class:CompositeType
isCastableTo	type/FunctionType.java	/^    public boolean isCastableTo(Type target) {$/;"	m	class:FunctionType
isCastableTo	type/IntegerType.java	/^    public boolean isCastableTo(Type target) {$/;"	m	class:IntegerType
isCastableTo	type/PointerType.java	/^    public boolean isCastableTo(Type other) {$/;"	m	class:PointerType
isCastableTo	type/Type.java	/^    abstract public boolean isCastableTo(Type target);$/;"	m	class:Type
isCastableTo	type/UserType.java	/^    public boolean isCastableTo(Type other) {$/;"	m	class:UserType
isCastableTo	type/VoidType.java	/^    public boolean isCastableTo(Type other) {$/;"	m	class:VoidType
isCflatSource	compiler/SourceFile.java	/^    boolean isCflatSource() {$/;"	m	class:SourceFile
isComment	asm/Assembly.java	/^    public boolean isComment() {$/;"	m	class:Assembly
isComment	asm/Comment.java	/^    public boolean isComment() {$/;"	m	class:Comment
isCommonSymbolDefined	ir/IR.java	/^    public boolean isCommonSymbolDefined() {$/;"	m	class:IR
isCompatible	type/ArrayType.java	/^    public boolean isCompatible(Type target) {$/;"	m	class:ArrayType
isCompatible	type/CompositeType.java	/^    public boolean isCompatible(Type target) {$/;"	m	class:CompositeType
isCompatible	type/FunctionType.java	/^    public boolean isCompatible(Type target) {$/;"	m	class:FunctionType
isCompatible	type/IntegerType.java	/^    public boolean isCompatible(Type other) {$/;"	m	class:IntegerType
isCompatible	type/PointerType.java	/^    public boolean isCompatible(Type other) {$/;"	m	class:PointerType
isCompatible	type/Type.java	/^    abstract public boolean isCompatible(Type other);$/;"	m	class:Type
isCompatible	type/UserType.java	/^    public boolean isCompatible(Type other) {$/;"	m	class:UserType
isCompatible	type/VoidType.java	/^    public boolean isCompatible(Type other) {$/;"	m	class:VoidType
isCompositeType	ast/CompositeTypeDefinition.java	/^    public boolean isCompositeType() {$/;"	m	class:CompositeTypeDefinition
isCompositeType	type/CompositeType.java	/^    public boolean isCompositeType() {$/;"	m	class:CompositeType
isCompositeType	type/Type.java	/^    public boolean isCompositeType() { return false; }$/;"	m	class:Type
isCompositeType	type/UserType.java	/^    public boolean isCompositeType() { return realType().isCompositeType(); }$/;"	m	class:UserType
isConstant	ast/ExprNode.java	/^    public boolean isConstant() { return false; }$/;"	m	class:ExprNode
isConstant	ast/LiteralNode.java	/^    public boolean isConstant() {$/;"	m	class:LiteralNode
isConstant	entity/Constant.java	/^    public boolean isConstant() { return true; }$/;"	m	class:Constant
isConstant	entity/Entity.java	/^    public boolean isConstant() { return false; }$/;"	m	class:Entity
isConstant	ir/Expr.java	/^    public boolean isConstant() { return false; }$/;"	m	class:Expr
isConstant	ir/Int.java	/^    public boolean isConstant() { return true; }$/;"	m	class:Int
isConstant	ir/Str.java	/^    public boolean isConstant() { return true; }$/;"	m	class:Str
isDefault	ast/CaseNode.java	/^    public boolean isDefault() {$/;"	m	class:CaseNode
isDefined	compiler/IRGenerator.java	/^        public boolean isDefined;$/;"	f	class:IRGenerator.JumpEntry
isDefined	entity/Constant.java	/^    public boolean isDefined() { return true; }$/;"	m	class:Constant
isDefined	entity/DefinedFunction.java	/^    public boolean isDefined() {$/;"	m	class:DefinedFunction
isDefined	entity/DefinedVariable.java	/^    public boolean isDefined() {$/;"	m	class:DefinedVariable
isDefined	entity/Entity.java	/^    abstract public boolean isDefined();$/;"	m	class:Entity
isDefined	entity/Function.java	/^    abstract public boolean isDefined();$/;"	m	class:Function
isDefined	entity/UndefinedFunction.java	/^    public boolean isDefined() {$/;"	m	class:UndefinedFunction
isDefined	entity/UndefinedVariable.java	/^    public boolean isDefined() { return false; }$/;"	m	class:UndefinedVariable
isDefined	type/TypeTable.java	/^    public boolean isDefined(TypeRef ref) {$/;"	m	class:TypeTable
isDefinedLocally	entity/LocalScope.java	/^    public boolean isDefinedLocally(String name) {$/;"	m	class:LocalScope
isDirective	asm/Assembly.java	/^    public boolean isDirective() {$/;"	m	class:Assembly
isDirective	asm/Directive.java	/^    public boolean isDirective() {$/;"	m	class:Directive
isEffectiveCast	ast/CastNode.java	/^    public boolean isEffectiveCast() {$/;"	m	class:CastNode
isEmpty	entity/ConstantTable.java	/^    public boolean isEmpty() {$/;"	m	class:ConstantTable
isExecutable	compiler/SourceFile.java	/^    boolean isExecutable() {$/;"	m	class:SourceFile
isFunction	type/FunctionType.java	/^    public boolean isFunction() { return true; }$/;"	m	class:FunctionType
isFunction	type/FunctionTypeRef.java	/^    public boolean isFunction() {$/;"	m	class:FunctionTypeRef
isFunction	type/Type.java	/^    public boolean isFunction() { return false; }$/;"	m	class:Type
isFunction	type/UserType.java	/^    public boolean isFunction() { return realType().isFunction(); }$/;"	m	class:UserType
isFunctionDefined	ir/IR.java	/^    public boolean isFunctionDefined() {$/;"	m	class:IR
isGeneratingSharedLibrary	compiler/Options.java	/^    boolean isGeneratingSharedLibrary() {$/;"	m	class:Options
isGlobalVariableDefined	ir/IR.java	/^    public boolean isGlobalVariableDefined() {$/;"	m	class:IR
isInDomain	type/IntegerType.java	/^    public boolean isInDomain(long i) {$/;"	m	class:IntegerType
isIncompleteArray	type/ArrayType.java	/^    public boolean isIncompleteArray() {$/;"	m	class:ArrayType
isIncompleteArray	type/Type.java	/^    public boolean isIncompleteArray() { return false; }$/;"	m	class:Type
isInitialized	entity/Constant.java	/^    public boolean isInitialized() { return true; }$/;"	m	class:Constant
isInitialized	entity/DefinedVariable.java	/^    public boolean isInitialized() {$/;"	m	class:DefinedVariable
isInitialized	entity/Entity.java	/^    abstract public boolean isInitialized();$/;"	m	class:Entity
isInitialized	entity/Function.java	/^    public boolean isInitialized() { return true; }$/;"	m	class:Function
isInitialized	entity/UndefinedVariable.java	/^    public boolean isInitialized() { return false; }$/;"	m	class:UndefinedVariable
isInstruction	asm/Assembly.java	/^    public boolean isInstruction() {$/;"	m	class:Assembly
isInstruction	asm/Instruction.java	/^    public boolean isInstruction() {$/;"	m	class:Instruction
isInt	type/Type.java	/^    public boolean isInt() { return false; }$/;"	m	class:Type
isInt	type/UserType.java	/^    public boolean isInt() { return realType().isInt(); }$/;"	m	class:UserType
isInteger	type/IntegerType.java	/^    public boolean isInteger() { return true; }$/;"	m	class:IntegerType
isInteger	type/Type.java	/^    public boolean isInteger() { return false; }$/;"	m	class:Type
isInteger	type/UserType.java	/^    public boolean isInteger() { return realType().isInteger(); }$/;"	m	class:UserType
isInvalidLHSType	compiler/TypeChecker.java	/^    private boolean isInvalidLHSType(Type t) {$/;"	m	class:TypeChecker	file:
isInvalidParameterType	compiler/TypeChecker.java	/^    private boolean isInvalidParameterType(Type t) {$/;"	m	class:TypeChecker	file:
isInvalidRHSType	compiler/TypeChecker.java	/^    private boolean isInvalidRHSType(Type t) {$/;"	m	class:TypeChecker	file:
isInvalidReturnType	compiler/TypeChecker.java	/^    private boolean isInvalidReturnType(Type t) {$/;"	m	class:TypeChecker	file:
isInvalidStatementType	compiler/TypeChecker.java	/^    private boolean isInvalidStatementType(Type t) {$/;"	m	class:TypeChecker	file:
isInvalidVariableType	compiler/TypeChecker.java	/^    private boolean isInvalidVariableType(Type t) {$/;"	m	class:TypeChecker	file:
isJumpInstruction	asm/Instruction.java	/^    public boolean isJumpInstruction() {$/;"	m	class:Instruction
isKnownFileType	compiler/SourceFile.java	/^    boolean isKnownFileType() {$/;"	m	class:SourceFile
isLabel	asm/Assembly.java	/^    public boolean isLabel() {$/;"	m	class:Assembly
isLabel	asm/Label.java	/^    public boolean isLabel() {$/;"	m	class:Label
isLengthUndefined	type/ArrayTypeRef.java	/^    public boolean isLengthUndefined() {$/;"	m	class:ArrayTypeRef
isLinkRequired	compiler/Options.java	/^    boolean isLinkRequired() {$/;"	m	class:Options
isLoadable	ast/ExprNode.java	/^    public boolean isLoadable() { return false; }$/;"	m	class:ExprNode
isLoadable	ast/LHSNode.java	/^    public boolean isLoadable() {$/;"	m	class:LHSNode
isLvalue	ast/CastNode.java	/^    public boolean isLvalue() { return expr.isLvalue(); }$/;"	m	class:CastNode
isLvalue	ast/ExprNode.java	/^    public boolean isLvalue() { return false; }$/;"	m	class:ExprNode
isLvalue	ast/LHSNode.java	/^    public boolean isLvalue() { return true; }$/;"	m	class:LHSNode
isMemoryReference	asm/MemoryReference.java	/^    public boolean isMemoryReference() {$/;"	m	class:MemoryReference
isMemoryReference	asm/Operand.java	/^    public boolean isMemoryReference() {$/;"	m	class:Operand
isModeOption	compiler/CompilerMode.java	/^    static public boolean isModeOption(String opt) {$/;"	m	class:CompilerMode
isMultiDimension	ast/ArefNode.java	/^    public boolean isMultiDimension() {$/;"	m	class:ArefNode
isObjectFile	compiler/SourceFile.java	/^    boolean isObjectFile() {$/;"	m	class:SourceFile
isPICRequired	sysdep/CodeGeneratorOptions.java	/^    public boolean isPICRequired() {$/;"	m	class:CodeGeneratorOptions
isPIERequired	sysdep/CodeGeneratorOptions.java	/^    public boolean isPIERequired() {$/;"	m	class:CodeGeneratorOptions
isParameter	ast/ExprNode.java	/^    public boolean isParameter() { return false; }$/;"	m	class:ExprNode
isParameter	ast/VariableNode.java	/^    public boolean isParameter() {$/;"	m	class:VariableNode
isParameter	entity/Entity.java	/^    public boolean isParameter() { return false; }$/;"	m	class:Entity
isParameter	entity/Parameter.java	/^    public boolean isParameter() {$/;"	m	class:Parameter
isPointer	ast/ExprNode.java	/^    public boolean isPointer() {$/;"	m	class:ExprNode
isPointer	type/PointerType.java	/^    public boolean isPointer() { return true; }$/;"	m	class:PointerType
isPointer	type/PointerTypeRef.java	/^    public boolean isPointer() {$/;"	m	class:PointerTypeRef
isPointer	type/Type.java	/^    public boolean isPointer() { return false; }$/;"	m	class:Type
isPointer	type/UserType.java	/^    public boolean isPointer() { return realType().isPointer(); }$/;"	m	class:UserType
isPointerArithmetic	compiler/IRGenerator.java	/^    private boolean isPointerArithmetic(Op op, Type operandType) {$/;"	m	class:IRGenerator	file:
isPointerDiff	compiler/IRGenerator.java	/^    private boolean isPointerDiff(Op op, Type l, Type r) {$/;"	m	class:IRGenerator	file:
isPositionIndependent	sysdep/CodeGeneratorOptions.java	/^    public boolean isPositionIndependent() {$/;"	m	class:CodeGeneratorOptions
isPrintable	utils/TextUtils.java	/^    static public boolean isPrintable(int c) {$/;"	m	class:TextUtils
isPrivate	entity/Entity.java	/^    protected boolean isPrivate;$/;"	f	class:Entity
isPrivate	entity/Entity.java	/^    public boolean isPrivate() {$/;"	m	class:Entity
isPrivate	entity/UndefinedVariable.java	/^    public boolean isPrivate() { return false; }$/;"	m	class:UndefinedVariable
isRecursiveChecked	type/CompositeType.java	/^    protected boolean isRecursiveChecked;$/;"	f	class:CompositeType
isRefered	entity/Entity.java	/^    public boolean isRefered() {$/;"	m	class:Entity
isRegister	asm/Operand.java	/^    public boolean isRegister() {$/;"	m	class:Operand
isRegister	asm/Register.java	/^    public boolean isRegister() {$/;"	m	class:Register
isRegister	sysdep/x86/Register.java	/^    public boolean isRegister() { return true; }$/;"	m	class:Register
isResolved	ast/TypeNode.java	/^    public boolean isResolved() {$/;"	m	class:TypeNode
isResolved	ast/VariableNode.java	/^    public boolean isResolved() {$/;"	m	class:VariableNode
isSafeIntegerCast	compiler/TypeChecker.java	/^    private boolean isSafeIntegerCast(Node node, Type type) {$/;"	m	class:TypeChecker	file:
isSameType	type/ArrayType.java	/^    public boolean isSameType(Type other) {$/;"	m	class:ArrayType
isSameType	type/CompositeType.java	/^    public boolean isSameType(Type other) {$/;"	m	class:CompositeType
isSameType	type/FunctionType.java	/^    public boolean isSameType(Type other) {$/;"	m	class:FunctionType
isSameType	type/IntegerType.java	/^    public boolean isSameType(Type other) {$/;"	m	class:IntegerType
isSameType	type/ParamTypes.java	/^    public boolean isSameType(ParamTypes other) {$/;"	m	class:ParamTypes
isSameType	type/PointerType.java	/^    public boolean isSameType(Type other) {$/;"	m	class:PointerType
isSameType	type/StructType.java	/^    public boolean isSameType(Type other) {$/;"	m	class:StructType
isSameType	type/Type.java	/^    abstract public boolean isSameType(Type other);$/;"	m	class:Type
isSameType	type/UnionType.java	/^    public boolean isSameType(Type other) {$/;"	m	class:UnionType
isSameType	type/UserType.java	/^    public boolean isSameType(Type other) {$/;"	m	class:UserType
isSameType	type/VoidType.java	/^    public boolean isSameType(Type other) {$/;"	m	class:VoidType
isScalar	type/IntegerType.java	/^    public boolean isScalar() { return true; }$/;"	m	class:IntegerType
isScalar	type/PointerType.java	/^    public boolean isScalar() { return true; }$/;"	m	class:PointerType
isScalar	type/Type.java	/^    public boolean isScalar() { return false; }$/;"	m	class:Type
isScalar	type/UserType.java	/^    public boolean isScalar() { return realType().isScalar(); }$/;"	m	class:UserType
isSharedLibrary	compiler/SourceFile.java	/^    boolean isSharedLibrary() {$/;"	m	class:SourceFile
isSigned	type/IntegerType.java	/^    protected boolean isSigned;$/;"	f	class:IntegerType
isSigned	type/IntegerType.java	/^    public boolean isSigned() { return isSigned; }$/;"	m	class:IntegerType
isSigned	type/PointerType.java	/^    public boolean isSigned() { return false; }$/;"	m	class:PointerType
isSigned	type/Type.java	/^    public boolean isSigned()$/;"	m	class:Type
isSigned	type/UserType.java	/^    public boolean isSigned() { return realType().isSigned(); }$/;"	m	class:UserType
isSourceFile	compiler/LdArg.java	/^    boolean isSourceFile();$/;"	m	interface:LdArg
isSourceFile	compiler/LdOption.java	/^    public boolean isSourceFile() {$/;"	m	class:LdOption
isSourceFile	compiler/SourceFile.java	/^    public boolean isSourceFile() {$/;"	m	class:SourceFile
isSpecial	ast/CflatToken.java	/^    protected boolean isSpecial;$/;"	f	class:CflatToken
isSpecial	ast/CflatToken.java	/^    public boolean isSpecial() {$/;"	m	class:CflatToken
isStatement	compiler/IRGenerator.java	/^    private boolean isStatement() {$/;"	m	class:IRGenerator	file:
isStaticCall	ir/Call.java	/^    public boolean isStaticCall() {$/;"	m	class:Call
isStaticLibrary	compiler/SourceFile.java	/^    boolean isStaticLibrary() {$/;"	m	class:SourceFile
isStringLiteralDefined	ir/IR.java	/^    public boolean isStringLiteralDefined() {$/;"	m	class:IR
isStruct	ast/StructNode.java	/^    public boolean isStruct() {$/;"	m	class:StructNode
isStruct	type/StructType.java	/^    public boolean isStruct() { return true; }$/;"	m	class:StructType
isStruct	type/StructTypeRef.java	/^    public boolean isStruct() {$/;"	m	class:StructTypeRef
isStruct	type/Type.java	/^    public boolean isStruct() { return false; }$/;"	m	class:Type
isStruct	type/UserType.java	/^    public boolean isStruct() { return realType().isStruct(); }$/;"	m	class:UserType
isToplevel	entity/LocalScope.java	/^    public boolean isToplevel() {$/;"	m	class:LocalScope
isToplevel	entity/Scope.java	/^    abstract public boolean isToplevel();$/;"	m	class:Scope
isToplevel	entity/ToplevelScope.java	/^    public boolean isToplevel() {$/;"	m	class:ToplevelScope
isUnion	ast/UnionNode.java	/^    public boolean isUnion() {$/;"	m	class:UnionNode
isUnion	type/Type.java	/^    public boolean isUnion() { return false; }$/;"	m	class:Type
isUnion	type/UnionType.java	/^    public boolean isUnion() { return true; }$/;"	m	class:UnionType
isUnion	type/UnionTypeRef.java	/^    public boolean isUnion() {$/;"	m	class:UnionTypeRef
isUnion	type/UserType.java	/^    public boolean isUnion() { return realType().isUnion(); }$/;"	m	class:UserType
isUserType	ast/TypedefNode.java	/^    public boolean isUserType() {$/;"	m	class:TypedefNode
isUserType	type/Type.java	/^    public boolean isUserType() { return false; }$/;"	m	class:Type
isUserType	type/UserType.java	/^    public boolean isUserType() { return true; }$/;"	m	class:UserType
isUserType	type/UserTypeRef.java	/^    public boolean isUserType() {$/;"	m	class:UserTypeRef
isValidSyntax	compiler/Compiler.java	/^    private boolean isValidSyntax(String path, Options opts) {$/;"	m	class:Compiler	file:
isVar	ir/Expr.java	/^    public boolean isVar() { return false; }$/;"	m	class:Expr
isVar	ir/Var.java	/^    public boolean isVar() { return true; }$/;"	m	class:Var
isVararg	entity/ParamSlots.java	/^    public boolean isVararg() {$/;"	m	class:ParamSlots
isVararg	type/FunctionType.java	/^    public boolean isVararg() {$/;"	m	class:FunctionType
isVerboseAsm	sysdep/CodeGeneratorOptions.java	/^    public boolean isVerboseAsm() {$/;"	m	class:CodeGeneratorOptions
isVerboseMode	compiler/Options.java	/^    boolean isVerboseMode() {$/;"	m	class:Options
isVoid	entity/Function.java	/^    public boolean isVoid() {$/;"	m	class:Function
isVoid	type/Type.java	/^    public boolean isVoid() { return false; }$/;"	m	class:Type
isVoid	type/UserType.java	/^    public boolean isVoid() { return realType().isVoid(); }$/;"	m	class:UserType
isVoid	type/VoidType.java	/^    public boolean isVoid() { return true; }$/;"	m	class:VoidType
isVoid	type/VoidTypeRef.java	/^    public boolean isVoid() {$/;"	m	class:VoidTypeRef
isZero	asm/BaseSymbol.java	/^    public boolean isZero() {$/;"	m	class:BaseSymbol
isZero	asm/IntegerLiteral.java	/^    public boolean isZero() {$/;"	m	class:IntegerLiteral
isZero	asm/Literal.java	/^    public boolean isZero();$/;"	m	interface:Literal
isZero	asm/SuffixedSymbol.java	/^    public boolean isZero() {$/;"	m	class:SuffixedSymbol
iterator	ast/CflatToken.java	/^    public Iterator<CflatToken> iterator() {$/;"	m	class:CflatToken
iterator	entity/ConstantTable.java	/^    public Iterator<ConstantEntry> iterator() {$/;"	m	class:ConstantTable
je	sysdep/x86/AssemblyCode.java	/^    void je(Label label) {$/;"	m	class:AssemblyCode
jmp	sysdep/x86/AssemblyCode.java	/^    void jmp(Label label) {$/;"	m	class:AssemblyCode
jmpDestination	asm/Instruction.java	/^    public Symbol jmpDestination() {$/;"	m	class:Instruction
jmpInsns	sysdep/x86/PeepholeOptimizer.java	/^        private String[] jmpInsns() {$/;"	m	class:PeepholeOptimizer.JumpEliminationFilter	file:
jnz	sysdep/x86/AssemblyCode.java	/^    void jnz(Label label) {$/;"	m	class:AssemblyCode
jump	compiler/IRGenerator.java	/^    private void jump(Label target) {$/;"	m	class:IRGenerator	file:
jump	compiler/IRGenerator.java	/^    private void jump(Location loc, Label target) {$/;"	m	class:IRGenerator	file:
jumpMap	compiler/IRGenerator.java	/^    Map<String, JumpEntry> jumpMap;$/;"	f	class:IRGenerator
kind	ast/CompositeTypeDefinition.java	/^    abstract public String kind();$/;"	m	class:CompositeTypeDefinition
kind	ast/StructNode.java	/^    public String kind() {$/;"	m	class:StructNode
kind	ast/UnionNode.java	/^    public String kind() {$/;"	m	class:UnionNode
kindID	ast/CflatToken.java	/^    public int kindID() {$/;"	m	class:CflatToken
kindName	ast/CflatToken.java	/^    public String kindName() {$/;"	m	class:CflatToken
label	ast/CaseNode.java	/^    protected Label label;$/;"	f	class:CaseNode
label	ast/CaseNode.java	/^    public Label label() {$/;"	m	class:CaseNode
label	compiler/IRGenerator.java	/^        public Label label;$/;"	f	class:IRGenerator.JumpEntry
label	compiler/IRGenerator.java	/^    private void label(Label label) {$/;"	m	class:IRGenerator	file:
label	entity/Function.java	/^    protected Label label;$/;"	f	class:Function
label	entity/Function.java	/^    public Label label() {$/;"	m	class:Function
label	ir/Case.java	/^    public Label label;$/;"	f	class:Case
label	ir/Jump.java	/^    protected Label label;$/;"	f	class:Jump
label	ir/Jump.java	/^    public Label label() {$/;"	m	class:Jump
label	ir/LabelStmt.java	/^    protected Label label;$/;"	f	class:LabelStmt
label	ir/LabelStmt.java	/^    public Label label() {$/;"	m	class:LabelStmt
label	sysdep/x86/AssemblyCode.java	/^    void label(Label label) {$/;"	m	class:AssemblyCode
label	sysdep/x86/AssemblyCode.java	/^    void label(Symbol sym) {$/;"	m	class:AssemblyCode
labelSymbols	sysdep/x86/AssemblyCode.java	/^    final SymbolTable labelSymbols;$/;"	f	class:AssemblyCode
ldArgs	compiler/Options.java	/^    List<String> ldArgs() {$/;"	m	class:Options
ldArgs	compiler/Options.java	/^    private List<LdArg> ldArgs;$/;"	f	class:Options	file:
ldOptions	compiler/Options.java	/^    LinkerOptions ldOptions() {$/;"	m	class:Options
ldOptions	compiler/Options.java	/^    private LinkerOptions ldOptions = new LinkerOptions();$/;"	f	class:Options	file:
lea	sysdep/x86/AssemblyCode.java	/^    void lea(Operand src, Register dest) {$/;"	m	class:AssemblyCode
left	ast/BinaryOpNode.java	/^    protected ExprNode left, right;$/;"	f	class:BinaryOpNode
left	ast/BinaryOpNode.java	/^    public ExprNode left() {$/;"	m	class:BinaryOpNode
left	ir/Bin.java	/^    protected Expr left, right;$/;"	f	class:Bin
left	ir/Bin.java	/^    public Expr left() { return left; }$/;"	m	class:Bin
length	ast/ArefNode.java	/^    public long length() {$/;"	m	class:ArefNode
length	type/ArrayType.java	/^    protected long length;$/;"	f	class:ArrayType
length	type/ArrayType.java	/^    public long length() {$/;"	m	class:ArrayType
length	type/ArrayTypeRef.java	/^    protected long length;$/;"	f	class:ArrayTypeRef
length	type/ArrayTypeRef.java	/^    public long length() {$/;"	m	class:ArrayTypeRef
lhs	ast/AbstractAssignNode.java	/^    ExprNode lhs, rhs;$/;"	f	class:AbstractAssignNode
lhs	ast/AbstractAssignNode.java	/^    public ExprNode lhs() {$/;"	m	class:AbstractAssignNode
lhs	ir/Assign.java	/^    protected Expr lhs, rhs;$/;"	f	class:Assign
lhs	ir/Assign.java	/^    public Expr lhs() {$/;"	m	class:Assign
libPath	parser/LibraryLoader.java	/^    protected String libPath(String id) {$/;"	m	class:LibraryLoader
line	ast/Location.java	/^    public String line() {$/;"	m	class:Location
lineno	ast/CflatToken.java	/^    public int lineno() {$/;"	m	class:CflatToken
lineno	ast/Location.java	/^    public int lineno() {$/;"	m	class:Location
link	compiler/Compiler.java	/^    public void link(Options opts) throws IPCException {$/;"	m	class:Compiler
linkedFileName	compiler/Options.java	/^    private String linkedFileName(String newExt) {$/;"	m	class:Options	file:
linkedFileName	compiler/SourceFile.java	/^    String linkedFileName(String newExt) {$/;"	m	class:SourceFile
linker	compiler/Options.java	/^    Linker linker(ErrorHandler h) {$/;"	m	class:Options
linker	sysdep/Platform.java	/^    Linker linker(ErrorHandler h);$/;"	m	interface:Platform
linker	sysdep/X86Linux.java	/^    public Linker linker(ErrorHandler h) {$/;"	m	class:X86Linux
list	utils/Cursor.java	/^    protected List<T> list;$/;"	f	class:Cursor
llp64	type/TypeTable.java	/^    static public TypeTable llp64() { return newTable(1, 2, 4, 4, 8); }$/;"	m	class:TypeTable
load	sysdep/x86/CodeGenerator.java	/^    private void load(MemoryReference mem, Register reg) {$/;"	m	class:CodeGenerator	file:
loadAddress	sysdep/x86/CodeGenerator.java	/^    private void loadAddress(Entity var, Register dest) {$/;"	m	class:CodeGenerator	file:
loadConstant	sysdep/x86/CodeGenerator.java	/^    private void loadConstant(Expr node, Register reg) {$/;"	m	class:CodeGenerator	file:
loadDefaultFilters	sysdep/x86/PeepholeOptimizer.java	/^    private void loadDefaultFilters() {$/;"	m	class:PeepholeOptimizer	file:
loadGOTBaseAddress	sysdep/x86/CodeGenerator.java	/^    private void loadGOTBaseAddress(AssemblyCode file, Register reg) {$/;"	m	class:CodeGenerator	file:
loadLibrary	parser/LibraryLoader.java	/^    public Declarations loadLibrary(String libid, ErrorHandler handler)$/;"	m	class:LibraryLoader
loadPath	parser/LibraryLoader.java	/^    protected List<String> loadPath;$/;"	f	class:LibraryLoader
loadVariable	sysdep/x86/CodeGenerator.java	/^    private void loadVariable(Var var, Register dest) {$/;"	m	class:CodeGenerator	file:
loadedLibraries	parser/LibraryLoader.java	/^    protected Map<String, Declarations> loadedLibraries;$/;"	f	class:LibraryLoader
loader	compiler/Options.java	/^    LibraryLoader loader() {$/;"	m	class:Options
loader	compiler/Options.java	/^    private LibraryLoader loader = new LibraryLoader();$/;"	f	class:Options	file:
loadingLibraries	parser/LibraryLoader.java	/^    protected LinkedList<String> loadingLibraries;$/;"	f	class:LibraryLoader
localGOTSymbol	sysdep/x86/CodeGenerator.java	/^    private Symbol localGOTSymbol(Symbol base) {$/;"	m	class:CodeGenerator	file:
localVariables	entity/DefinedFunction.java	/^    public List<DefinedVariable> localVariables() {$/;"	m	class:DefinedFunction
localVariables	entity/LocalScope.java	/^    public List<DefinedVariable> localVariables() {$/;"	m	class:LocalScope
locateFunction	sysdep/x86/CodeGenerator.java	/^    private void locateFunction(Function func) {$/;"	m	class:CodeGenerator	file:
locateGlobalVariable	sysdep/x86/CodeGenerator.java	/^    private void locateGlobalVariable(Entity ent) {$/;"	m	class:CodeGenerator	file:
locateLocalVariables	sysdep/x86/CodeGenerator.java	/^    private long locateLocalVariables(LocalScope scope) {$/;"	m	class:CodeGenerator	file:
locateLocalVariables	sysdep/x86/CodeGenerator.java	/^    private long locateLocalVariables(LocalScope scope, long parentStackLen) {$/;"	m	class:CodeGenerator	file:
locateParameters	sysdep/x86/CodeGenerator.java	/^    private void locateParameters(List<Parameter> params) {$/;"	m	class:CodeGenerator	file:
locateStringLiteral	sysdep/x86/CodeGenerator.java	/^    private void locateStringLiteral(ConstantEntry ent, SymbolTable syms) {$/;"	m	class:CodeGenerator	file:
locateSymbols	sysdep/x86/CodeGenerator.java	/^    private void locateSymbols(IR ir) {$/;"	m	class:CodeGenerator	file:
location	ast/AST.java	/^    public Location location() {$/;"	m	class:AST
location	ast/AbstractAssignNode.java	/^    public Location location() {$/;"	m	class:AbstractAssignNode
location	ast/AddressNode.java	/^    public Location location() {$/;"	m	class:AddressNode
location	ast/ArefNode.java	/^    public Location location() {$/;"	m	class:ArefNode
location	ast/BinaryOpNode.java	/^    public Location location() {$/;"	m	class:BinaryOpNode
location	ast/CastNode.java	/^    public Location location() {$/;"	m	class:CastNode
location	ast/CondExprNode.java	/^    public Location location() {$/;"	m	class:CondExprNode
location	ast/DereferenceNode.java	/^    public Location location() {$/;"	m	class:DereferenceNode
location	ast/FuncallNode.java	/^    public Location location() {$/;"	m	class:FuncallNode
location	ast/LiteralNode.java	/^    protected Location location;$/;"	f	class:LiteralNode
location	ast/LiteralNode.java	/^    public Location location() {$/;"	m	class:LiteralNode
location	ast/MemberNode.java	/^    public Location location() {$/;"	m	class:MemberNode
location	ast/Node.java	/^    abstract public Location location();$/;"	m	class:Node
location	ast/PtrMemberNode.java	/^    public Location location() {$/;"	m	class:PtrMemberNode
location	ast/SizeofExprNode.java	/^    public Location location() {$/;"	m	class:SizeofExprNode
location	ast/SizeofTypeNode.java	/^    public Location location() {$/;"	m	class:SizeofTypeNode
location	ast/Slot.java	/^    public Location location() {$/;"	m	class:Slot
location	ast/StmtNode.java	/^    protected Location location;$/;"	f	class:StmtNode
location	ast/StmtNode.java	/^    public Location location() {$/;"	m	class:StmtNode
location	ast/TypeDefinition.java	/^    protected Location location;$/;"	f	class:TypeDefinition
location	ast/TypeDefinition.java	/^    public Location location() {$/;"	m	class:TypeDefinition
location	ast/TypeNode.java	/^    public Location location() {$/;"	m	class:TypeNode
location	ast/UnaryOpNode.java	/^    public Location location() {$/;"	m	class:UnaryOpNode
location	ast/VariableNode.java	/^    private Location location;$/;"	f	class:VariableNode	file:
location	ast/VariableNode.java	/^    public Location location() {$/;"	m	class:VariableNode
location	compiler/IRGenerator.java	/^        public Location location;$/;"	f	class:IRGenerator.JumpEntry
location	entity/Entity.java	/^    public Location location() {$/;"	m	class:Entity
location	entity/ParamSlots.java	/^    protected Location location;$/;"	f	class:ParamSlots
location	entity/ParamSlots.java	/^    public Location location() {$/;"	m	class:ParamSlots
location	ir/IR.java	/^    public Location location() {$/;"	m	class:IR
location	ir/Stmt.java	/^    protected Location location;$/;"	f	class:Stmt
location	ir/Stmt.java	/^    public Location location() {$/;"	m	class:Stmt
location	type/NamedType.java	/^    protected Location location;$/;"	f	class:NamedType
location	type/NamedType.java	/^    public Location location() {$/;"	m	class:NamedType
location	type/TypeRef.java	/^    protected Location location;$/;"	f	class:TypeRef
location	type/TypeRef.java	/^    public Location location() {$/;"	m	class:TypeRef
longRef	type/IntegerTypeRef.java	/^    static public IntegerTypeRef longRef() {$/;"	m	class:IntegerTypeRef
longRef	type/IntegerTypeRef.java	/^    static public IntegerTypeRef longRef(Location loc) {$/;"	m	class:IntegerTypeRef
longSize	type/TypeTable.java	/^    private int longSize;$/;"	f	class:TypeTable	file:
longSize	type/TypeTable.java	/^    public int longSize() {$/;"	m	class:TypeTable
lowerByteRegister	sysdep/x86/Register.java	/^    private String lowerByteRegister() {$/;"	m	class:Register	file:
lp64	type/TypeTable.java	/^    static public TypeTable lp64()  { return newTable(1, 2, 4, 8, 8); }$/;"	m	class:TypeTable
lvarOffset	sysdep/x86/CodeGenerator.java	/^        long lvarOffset() { return saveRegsSize(); }$/;"	m	class:CodeGenerator.StackFrameInfo
lvarScope	entity/DefinedFunction.java	/^    public LocalScope lvarScope() {$/;"	m	class:DefinedFunction
lvarSize	sysdep/x86/CodeGenerator.java	/^        long lvarSize;$/;"	f	class:CodeGenerator.StackFrameInfo
main	compiler/Compiler.java	/^    static public void main(String[] args) {$/;"	m	class:Compiler
map	asm/SymbolTable.java	/^    protected Map<UnnamedSymbol, String> map;$/;"	f	class:SymbolTable
match	asm/Operand.java	/^    public boolean match(Operand operand) {$/;"	m	class:Operand
match	asm/OperandPattern.java	/^    public boolean match(Operand operand);$/;"	m	interface:OperandPattern
match	sysdep/x86/PeepholeOptimizer.java	/^        abstract public boolean match(Cursor<Assembly> asms);$/;"	m	class:PeepholeOptimizer.Filter
match	sysdep/x86/PeepholeOptimizer.java	/^        public boolean match(Cursor<Assembly> asms) {$/;"	m	class:PeepholeOptimizer.JumpEliminationFilter
match	sysdep/x86/PeepholeOptimizer.java	/^        public boolean match(Cursor<Assembly> asms) {$/;"	m	class:PeepholeOptimizer.SingleInsnFilter
match	sysdep/x86/PeepholeOptimizer.java	/^        public boolean match(Instruction insn) {$/;"	m	class:PeepholeOptimizer.InsnPattern
match	sysdep/x86/PeepholeOptimizer.java	/^        public boolean match(Operand operand) {$/;"	m	class:PeepholeOptimizer.AnyRegisterPattern
matchFilter	sysdep/x86/PeepholeOptimizer.java	/^    private Filter matchFilter(Cursor<Assembly> asms) {$/;"	m	class:PeepholeOptimizer	file:
max	sysdep/x86/AssemblyCode.java	/^        private long max;$/;"	f	class:AssemblyCode.VirtualStack	file:
maxIntSize	type/TypeTable.java	/^    public int maxIntSize() {$/;"	m	class:TypeTable
maxSize	sysdep/x86/AssemblyCode.java	/^        long maxSize() {$/;"	m	class:AssemblyCode.VirtualStack
maxValue	type/IntegerType.java	/^    public long maxValue() {$/;"	m	class:IntegerType
mem	compiler/IRGenerator.java	/^    private Mem mem(Entity ent) {$/;"	m	class:IRGenerator	file:
mem	compiler/IRGenerator.java	/^    private Mem mem(Expr expr, Type t) {$/;"	m	class:IRGenerator	file:
mem	sysdep/x86/CodeGenerator.java	/^        MemoryReference mem;$/;"	f	class:CodeGenerator.MemInfo
mem	sysdep/x86/CodeGenerator.java	/^    private DirectMemoryReference mem(Symbol sym) {$/;"	m	class:CodeGenerator	file:
mem	sysdep/x86/CodeGenerator.java	/^    private IndirectMemoryReference mem(Register reg) {$/;"	m	class:CodeGenerator	file:
mem	sysdep/x86/CodeGenerator.java	/^    private IndirectMemoryReference mem(Symbol offset, Register reg) {$/;"	m	class:CodeGenerator	file:
mem	sysdep/x86/CodeGenerator.java	/^    private IndirectMemoryReference mem(long offset, Register reg) {$/;"	m	class:CodeGenerator	file:
member	ast/MemberNode.java	/^    private String member;$/;"	f	class:MemberNode	file:
member	ast/MemberNode.java	/^    public String member() {$/;"	m	class:MemberNode
member	ast/PtrMemberNode.java	/^    public String member() {$/;"	m	class:PtrMemberNode
member	ast/PtrMemberNode.java	/^    public String member;$/;"	f	class:PtrMemberNode
memberOffset	type/CompositeType.java	/^    public long memberOffset(String name) {$/;"	m	class:CompositeType
memberType	type/CompositeType.java	/^    public Type memberType(String name) {$/;"	m	class:CompositeType
memberTypes	type/CompositeType.java	/^    public List<Type> memberTypes() {$/;"	m	class:CompositeType
members	ast/CompositeTypeDefinition.java	/^    protected List<Slot> members;$/;"	f	class:CompositeTypeDefinition
members	ast/CompositeTypeDefinition.java	/^    public List<Slot> members() {$/;"	m	class:CompositeTypeDefinition
members	type/CompositeType.java	/^    protected List<Slot> members;$/;"	f	class:CompositeType
members	type/CompositeType.java	/^    public List<Slot> members() {$/;"	m	class:CompositeType
memref	entity/ConstantEntry.java	/^    protected MemoryReference memref;$/;"	f	class:ConstantEntry
memref	entity/ConstantEntry.java	/^    public MemoryReference memref() {$/;"	m	class:ConstantEntry
memref	entity/Entity.java	/^    protected MemoryReference memref;$/;"	f	class:Entity
memref	entity/Entity.java	/^    public MemoryReference memref() {$/;"	m	class:Entity
memref	ir/Addr.java	/^    public MemoryReference memref() {$/;"	m	class:Addr
memref	ir/Expr.java	/^    public MemoryReference memref() {$/;"	m	class:Expr
memref	ir/Int.java	/^    public MemoryReference memref() {$/;"	m	class:Int
memref	ir/Str.java	/^    public MemoryReference memref() {$/;"	m	class:Str
memref	ir/Var.java	/^    public MemoryReference memref() {$/;"	m	class:Var
memrefs	sysdep/x86/AssemblyCode.java	/^        private List<IndirectMemoryReference> memrefs =$/;"	f	class:AssemblyCode.VirtualStack	file:
minArgc	entity/ParamSlots.java	/^    public int minArgc() {$/;"	m	class:ParamSlots
minValue	type/IntegerType.java	/^    public long minValue() {$/;"	m	class:IntegerType
mnemonic	asm/Instruction.java	/^    protected String mnemonic;$/;"	f	class:Instruction
mnemonic	asm/Instruction.java	/^    public String mnemonic() {$/;"	m	class:Instruction
mode	compiler/Options.java	/^    CompilerMode mode() {$/;"	m	class:Options
mode	compiler/Options.java	/^    private CompilerMode mode;$/;"	f	class:Options	file:
modes	compiler/CompilerMode.java	/^    static private Map<String, CompilerMode> modes;$/;"	f	class:CompilerMode	file:
mov	sysdep/x86/AssemblyCode.java	/^    void mov(Operand src, Register dest) {$/;"	m	class:AssemblyCode
mov	sysdep/x86/AssemblyCode.java	/^    void mov(Register src, Operand dest) {$/;"	m	class:AssemblyCode
mov	sysdep/x86/AssemblyCode.java	/^    void mov(Register src, Register dest) {$/;"	m	class:AssemblyCode
movsx	sysdep/x86/AssemblyCode.java	/^    void movsx(Register src, Register dest) {$/;"	m	class:AssemblyCode
movzb	sysdep/x86/AssemblyCode.java	/^    void movzb(Register src, Register dest) {$/;"	m	class:AssemblyCode
movzx	sysdep/x86/AssemblyCode.java	/^    void movzx(Register src, Register dest) {$/;"	m	class:AssemblyCode
mustBeInteger	compiler/TypeChecker.java	/^    private boolean mustBeInteger(ExprNode expr, String op) {$/;"	m	class:TypeChecker	file:
mustBeScalar	compiler/TypeChecker.java	/^    private boolean mustBeScalar(ExprNode expr, String op) {$/;"	m	class:TypeChecker	file:
nError	utils/ErrorHandler.java	/^    protected long nError;$/;"	f	class:ErrorHandler
nIndent	ast/Dumper.java	/^    protected int nIndent;$/;"	f	class:Dumper
nRefered	entity/Entity.java	/^    protected long nRefered;$/;"	f	class:Entity
nWarning	utils/ErrorHandler.java	/^    protected long nWarning;$/;"	f	class:ErrorHandler
name	asm/NamedSymbol.java	/^    protected String name;$/;"	f	class:NamedSymbol
name	asm/NamedSymbol.java	/^    public String name() {$/;"	m	class:NamedSymbol
name	asm/SuffixedSymbol.java	/^    public String name() {$/;"	m	class:SuffixedSymbol
name	asm/Symbol.java	/^    public String name();$/;"	m	interface:Symbol
name	asm/UnnamedSymbol.java	/^    public String name() {$/;"	m	class:UnnamedSymbol
name	ast/LabelNode.java	/^    protected String name;$/;"	f	class:LabelNode
name	ast/LabelNode.java	/^    public String name() {$/;"	m	class:LabelNode
name	ast/Slot.java	/^    protected String name;$/;"	f	class:Slot
name	ast/Slot.java	/^    public String name() {$/;"	m	class:Slot
name	ast/TypeDefinition.java	/^    protected String name;$/;"	f	class:TypeDefinition
name	ast/TypeDefinition.java	/^    public String name() {$/;"	m	class:TypeDefinition
name	ast/VariableNode.java	/^    private String name;$/;"	f	class:VariableNode	file:
name	ast/VariableNode.java	/^    public String name() {$/;"	m	class:VariableNode
name	entity/Constant.java	/^    private String name;$/;"	f	class:Constant	file:
name	entity/Entity.java	/^    protected String name;$/;"	f	class:Entity
name	entity/Entity.java	/^    public String name() {$/;"	m	class:Entity
name	ir/Var.java	/^    public String name() { return entity.name(); }$/;"	m	class:Var
name	sysdep/x86/CodeGenerator.java	/^        String name;$/;"	f	class:CodeGenerator.MemInfo
name	sysdep/x86/PeepholeOptimizer.java	/^        private String name;$/;"	f	class:PeepholeOptimizer.InsnPattern	file:
name	type/IntegerType.java	/^    protected String name;$/;"	f	class:IntegerType
name	type/IntegerTypeRef.java	/^    protected String name;$/;"	f	class:IntegerTypeRef
name	type/IntegerTypeRef.java	/^    public String name() {$/;"	m	class:IntegerTypeRef
name	type/NamedType.java	/^    protected String name;$/;"	f	class:NamedType
name	type/NamedType.java	/^    public String name() {$/;"	m	class:NamedType
name	type/StructTypeRef.java	/^    protected String name;$/;"	f	class:StructTypeRef
name	type/StructTypeRef.java	/^    public String name() {$/;"	m	class:StructTypeRef
name	type/UnionTypeRef.java	/^    protected String name;$/;"	f	class:UnionTypeRef
name	type/UnionTypeRef.java	/^    public String name() {$/;"	m	class:UnionTypeRef
name	type/UserTypeRef.java	/^    protected String name;$/;"	f	class:UserTypeRef
name	type/UserTypeRef.java	/^    public String name() {$/;"	m	class:UserTypeRef
naturalType	sysdep/X86Linux.java	/^    private Type naturalType() {$/;"	m	class:X86Linux	file:
naturalType	sysdep/x86/AssemblyCode.java	/^    final Type naturalType;$/;"	f	class:AssemblyCode
naturalType	sysdep/x86/CodeGenerator.java	/^    final Type naturalType;$/;"	f	class:CodeGenerator
needRelocation	asm/Instruction.java	/^    protected boolean needRelocation;$/;"	f	class:Instruction
neg	sysdep/x86/AssemblyCode.java	/^    void neg(Register reg) {$/;"	m	class:AssemblyCode
net.loveruby.cflat.asm	asm/AbsoluteAddress.java	/^package net.loveruby.cflat.asm;$/;"	p
net.loveruby.cflat.asm	asm/Assembly.java	/^package net.loveruby.cflat.asm;$/;"	p
net.loveruby.cflat.asm	asm/BaseSymbol.java	/^package net.loveruby.cflat.asm;$/;"	p
net.loveruby.cflat.asm	asm/Comment.java	/^package net.loveruby.cflat.asm;$/;"	p
net.loveruby.cflat.asm	asm/DirectMemoryReference.java	/^package net.loveruby.cflat.asm;$/;"	p
net.loveruby.cflat.asm	asm/Directive.java	/^package net.loveruby.cflat.asm;$/;"	p
net.loveruby.cflat.asm	asm/ImmediateValue.java	/^package net.loveruby.cflat.asm;$/;"	p
net.loveruby.cflat.asm	asm/IndirectMemoryReference.java	/^package net.loveruby.cflat.asm;$/;"	p
net.loveruby.cflat.asm	asm/Instruction.java	/^package net.loveruby.cflat.asm;$/;"	p
net.loveruby.cflat.asm	asm/IntegerLiteral.java	/^package net.loveruby.cflat.asm;$/;"	p
net.loveruby.cflat.asm	asm/Label.java	/^package net.loveruby.cflat.asm;$/;"	p
net.loveruby.cflat.asm	asm/Literal.java	/^package net.loveruby.cflat.asm;$/;"	p
net.loveruby.cflat.asm	asm/MemoryReference.java	/^package net.loveruby.cflat.asm;$/;"	p
net.loveruby.cflat.asm	asm/NamedSymbol.java	/^package net.loveruby.cflat.asm;$/;"	p
net.loveruby.cflat.asm	asm/Operand.java	/^package net.loveruby.cflat.asm;$/;"	p
net.loveruby.cflat.asm	asm/OperandPattern.java	/^package net.loveruby.cflat.asm;$/;"	p
net.loveruby.cflat.asm	asm/Register.java	/^package net.loveruby.cflat.asm;$/;"	p
net.loveruby.cflat.asm	asm/Statistics.java	/^package net.loveruby.cflat.asm;$/;"	p
net.loveruby.cflat.asm	asm/SuffixedSymbol.java	/^package net.loveruby.cflat.asm;$/;"	p
net.loveruby.cflat.asm	asm/Symbol.java	/^package net.loveruby.cflat.asm;$/;"	p
net.loveruby.cflat.asm	asm/SymbolTable.java	/^package net.loveruby.cflat.asm;$/;"	p
net.loveruby.cflat.asm	asm/Type.java	/^package net.loveruby.cflat.asm;$/;"	p
net.loveruby.cflat.asm	asm/UnnamedSymbol.java	/^package net.loveruby.cflat.asm;$/;"	p
net.loveruby.cflat.ast	ast/AST.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/ASTVisitor.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/AbstractAssignNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/AddressNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/ArefNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/AssignNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/BinaryOpNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/BlockNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/BreakNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/CaseNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/CastNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/CflatToken.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/CompositeTypeDefinition.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/CondExprNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/ContinueNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/DeclarationVisitor.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/Declarations.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/DereferenceNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/DoWhileNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/Dumpable.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/Dumper.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/ExprNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/ExprStmtNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/ForNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/FuncallNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/GotoNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/IfNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/IntegerLiteralNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/LHSNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/LabelNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/LiteralNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/Location.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/LogicalAndNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/LogicalOrNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/MemberNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/Node.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/OpAssignNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/PrefixOpNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/PtrMemberNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/ReturnNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/SizeofExprNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/SizeofTypeNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/Slot.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/StmtNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/StringLiteralNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/StructNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/SuffixOpNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/SwitchNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/TypeDefinition.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/TypeNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/TypedefNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/UnaryArithmeticOpNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/UnaryOpNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/UnionNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/VariableNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.ast	ast/WhileNode.java	/^package net.loveruby.cflat.ast;$/;"	p
net.loveruby.cflat.compiler	compiler/Compiler.java	/^package net.loveruby.cflat.compiler;$/;"	p
net.loveruby.cflat.compiler	compiler/CompilerMode.java	/^package net.loveruby.cflat.compiler;$/;"	p
net.loveruby.cflat.compiler	compiler/DereferenceChecker.java	/^package net.loveruby.cflat.compiler;$/;"	p
net.loveruby.cflat.compiler	compiler/IRGenerator.java	/^package net.loveruby.cflat.compiler;$/;"	p
net.loveruby.cflat.compiler	compiler/LdArg.java	/^package net.loveruby.cflat.compiler;$/;"	p
net.loveruby.cflat.compiler	compiler/LdOption.java	/^package net.loveruby.cflat.compiler;$/;"	p
net.loveruby.cflat.compiler	compiler/LocalResolver.java	/^package net.loveruby.cflat.compiler;$/;"	p
net.loveruby.cflat.compiler	compiler/Options.java	/^package net.loveruby.cflat.compiler;$/;"	p
net.loveruby.cflat.compiler	compiler/SourceFile.java	/^package net.loveruby.cflat.compiler;$/;"	p
net.loveruby.cflat.compiler	compiler/TypeChecker.java	/^package net.loveruby.cflat.compiler;$/;"	p
net.loveruby.cflat.compiler	compiler/TypeResolver.java	/^package net.loveruby.cflat.compiler;$/;"	p
net.loveruby.cflat.compiler	compiler/Visitor.java	/^package net.loveruby.cflat.compiler;$/;"	p
net.loveruby.cflat.entity	entity/Constant.java	/^package net.loveruby.cflat.entity;$/;"	p
net.loveruby.cflat.entity	entity/ConstantEntry.java	/^package net.loveruby.cflat.entity;$/;"	p
net.loveruby.cflat.entity	entity/ConstantTable.java	/^package net.loveruby.cflat.entity;$/;"	p
net.loveruby.cflat.entity	entity/DefinedFunction.java	/^package net.loveruby.cflat.entity;$/;"	p
net.loveruby.cflat.entity	entity/DefinedVariable.java	/^package net.loveruby.cflat.entity;$/;"	p
net.loveruby.cflat.entity	entity/Entity.java	/^package net.loveruby.cflat.entity;$/;"	p
net.loveruby.cflat.entity	entity/EntityVisitor.java	/^package net.loveruby.cflat.entity;$/;"	p
net.loveruby.cflat.entity	entity/Function.java	/^package net.loveruby.cflat.entity;$/;"	p
net.loveruby.cflat.entity	entity/LocalScope.java	/^package net.loveruby.cflat.entity;$/;"	p
net.loveruby.cflat.entity	entity/ParamSlots.java	/^package net.loveruby.cflat.entity;$/;"	p
net.loveruby.cflat.entity	entity/Parameter.java	/^package net.loveruby.cflat.entity;$/;"	p
net.loveruby.cflat.entity	entity/Params.java	/^package net.loveruby.cflat.entity;$/;"	p
net.loveruby.cflat.entity	entity/Scope.java	/^package net.loveruby.cflat.entity;$/;"	p
net.loveruby.cflat.entity	entity/ToplevelScope.java	/^package net.loveruby.cflat.entity;$/;"	p
net.loveruby.cflat.entity	entity/UndefinedFunction.java	/^package net.loveruby.cflat.entity;$/;"	p
net.loveruby.cflat.entity	entity/UndefinedVariable.java	/^package net.loveruby.cflat.entity;$/;"	p
net.loveruby.cflat.entity	entity/Variable.java	/^package net.loveruby.cflat.entity;$/;"	p
net.loveruby.cflat.exception	exception/CompileException.java	/^package net.loveruby.cflat.exception;$/;"	p
net.loveruby.cflat.exception	exception/FileException.java	/^package net.loveruby.cflat.exception;$/;"	p
net.loveruby.cflat.exception	exception/IPCException.java	/^package net.loveruby.cflat.exception;$/;"	p
net.loveruby.cflat.exception	exception/JumpError.java	/^package net.loveruby.cflat.exception;$/;"	p
net.loveruby.cflat.exception	exception/OptionParseError.java	/^package net.loveruby.cflat.exception;$/;"	p
net.loveruby.cflat.exception	exception/SemanticError.java	/^package net.loveruby.cflat.exception;$/;"	p
net.loveruby.cflat.exception	exception/SemanticException.java	/^package net.loveruby.cflat.exception;$/;"	p
net.loveruby.cflat.exception	exception/SyntaxException.java	/^package net.loveruby.cflat.exception;$/;"	p
net.loveruby.cflat.ir	ir/Addr.java	/^package net.loveruby.cflat.ir;$/;"	p
net.loveruby.cflat.ir	ir/Assign.java	/^package net.loveruby.cflat.ir;$/;"	p
net.loveruby.cflat.ir	ir/Bin.java	/^package net.loveruby.cflat.ir;$/;"	p
net.loveruby.cflat.ir	ir/CJump.java	/^package net.loveruby.cflat.ir;$/;"	p
net.loveruby.cflat.ir	ir/Call.java	/^package net.loveruby.cflat.ir;$/;"	p
net.loveruby.cflat.ir	ir/Case.java	/^package net.loveruby.cflat.ir;$/;"	p
net.loveruby.cflat.ir	ir/Dumpable.java	/^package net.loveruby.cflat.ir;$/;"	p
net.loveruby.cflat.ir	ir/Dumper.java	/^package net.loveruby.cflat.ir;$/;"	p
net.loveruby.cflat.ir	ir/Expr.java	/^package net.loveruby.cflat.ir;$/;"	p
net.loveruby.cflat.ir	ir/ExprStmt.java	/^package net.loveruby.cflat.ir;$/;"	p
net.loveruby.cflat.ir	ir/IR.java	/^package net.loveruby.cflat.ir;$/;"	p
net.loveruby.cflat.ir	ir/IRVisitor.java	/^package net.loveruby.cflat.ir;$/;"	p
net.loveruby.cflat.ir	ir/Int.java	/^package net.loveruby.cflat.ir;$/;"	p
net.loveruby.cflat.ir	ir/Jump.java	/^package net.loveruby.cflat.ir;$/;"	p
net.loveruby.cflat.ir	ir/LabelStmt.java	/^package net.loveruby.cflat.ir;$/;"	p
net.loveruby.cflat.ir	ir/Mem.java	/^package net.loveruby.cflat.ir;$/;"	p
net.loveruby.cflat.ir	ir/Op.java	/^package net.loveruby.cflat.ir;$/;"	p
net.loveruby.cflat.ir	ir/Return.java	/^package net.loveruby.cflat.ir;$/;"	p
net.loveruby.cflat.ir	ir/Stmt.java	/^package net.loveruby.cflat.ir;$/;"	p
net.loveruby.cflat.ir	ir/Str.java	/^package net.loveruby.cflat.ir;$/;"	p
net.loveruby.cflat.ir	ir/Switch.java	/^package net.loveruby.cflat.ir;$/;"	p
net.loveruby.cflat.ir	ir/Uni.java	/^package net.loveruby.cflat.ir;$/;"	p
net.loveruby.cflat.ir	ir/Var.java	/^package net.loveruby.cflat.ir;$/;"	p
net.loveruby.cflat.parser	parser/LibraryLoader.java	/^package net.loveruby.cflat.parser;$/;"	p
net.loveruby.cflat.sysdep	sysdep/Assembler.java	/^package net.loveruby.cflat.sysdep;$/;"	p
net.loveruby.cflat.sysdep	sysdep/AssemblerOptions.java	/^package net.loveruby.cflat.sysdep;$/;"	p
net.loveruby.cflat.sysdep	sysdep/AssemblyCode.java	/^package net.loveruby.cflat.sysdep;$/;"	p
net.loveruby.cflat.sysdep	sysdep/CodeGenerator.java	/^package net.loveruby.cflat.sysdep;$/;"	p
net.loveruby.cflat.sysdep	sysdep/CodeGeneratorOptions.java	/^package net.loveruby.cflat.sysdep;$/;"	p
net.loveruby.cflat.sysdep	sysdep/GNUAssembler.java	/^package net.loveruby.cflat.sysdep;$/;"	p
net.loveruby.cflat.sysdep	sysdep/GNULinker.java	/^package net.loveruby.cflat.sysdep;$/;"	p
net.loveruby.cflat.sysdep	sysdep/Linker.java	/^package net.loveruby.cflat.sysdep;$/;"	p
net.loveruby.cflat.sysdep	sysdep/LinkerOptions.java	/^package net.loveruby.cflat.sysdep;$/;"	p
net.loveruby.cflat.sysdep	sysdep/Platform.java	/^package net.loveruby.cflat.sysdep;$/;"	p
net.loveruby.cflat.sysdep	sysdep/X86Linux.java	/^package net.loveruby.cflat.sysdep;$/;"	p
net.loveruby.cflat.sysdep.x86	sysdep/x86/AssemblyCode.java	/^package net.loveruby.cflat.sysdep.x86;$/;"	p
net.loveruby.cflat.sysdep.x86	sysdep/x86/CodeGenerator.java	/^package net.loveruby.cflat.sysdep.x86;$/;"	p
net.loveruby.cflat.sysdep.x86	sysdep/x86/ELFConstants.java	/^package net.loveruby.cflat.sysdep.x86;$/;"	p
net.loveruby.cflat.sysdep.x86	sysdep/x86/PeepholeOptimizer.java	/^package net.loveruby.cflat.sysdep.x86;$/;"	p
net.loveruby.cflat.sysdep.x86	sysdep/x86/Register.java	/^package net.loveruby.cflat.sysdep.x86;$/;"	p
net.loveruby.cflat.sysdep.x86	sysdep/x86/RegisterClass.java	/^package net.loveruby.cflat.sysdep.x86;$/;"	p
net.loveruby.cflat.type	type/ArrayType.java	/^package net.loveruby.cflat.type;$/;"	p
net.loveruby.cflat.type	type/ArrayTypeRef.java	/^package net.loveruby.cflat.type;$/;"	p
net.loveruby.cflat.type	type/CompositeType.java	/^package net.loveruby.cflat.type;$/;"	p
net.loveruby.cflat.type	type/FunctionType.java	/^package net.loveruby.cflat.type;$/;"	p
net.loveruby.cflat.type	type/FunctionTypeRef.java	/^package net.loveruby.cflat.type;$/;"	p
net.loveruby.cflat.type	type/IntegerType.java	/^package net.loveruby.cflat.type;$/;"	p
net.loveruby.cflat.type	type/IntegerTypeRef.java	/^package net.loveruby.cflat.type;$/;"	p
net.loveruby.cflat.type	type/NamedType.java	/^package net.loveruby.cflat.type;$/;"	p
net.loveruby.cflat.type	type/ParamTypeRefs.java	/^package net.loveruby.cflat.type;$/;"	p
net.loveruby.cflat.type	type/ParamTypes.java	/^package net.loveruby.cflat.type;$/;"	p
net.loveruby.cflat.type	type/PointerType.java	/^package net.loveruby.cflat.type;$/;"	p
net.loveruby.cflat.type	type/PointerTypeRef.java	/^package net.loveruby.cflat.type;$/;"	p
net.loveruby.cflat.type	type/StructType.java	/^package net.loveruby.cflat.type;$/;"	p
net.loveruby.cflat.type	type/StructTypeRef.java	/^package net.loveruby.cflat.type;$/;"	p
net.loveruby.cflat.type	type/Type.java	/^package net.loveruby.cflat.type;$/;"	p
net.loveruby.cflat.type	type/TypeRef.java	/^package net.loveruby.cflat.type;$/;"	p
net.loveruby.cflat.type	type/TypeTable.java	/^package net.loveruby.cflat.type;$/;"	p
net.loveruby.cflat.type	type/UnionType.java	/^package net.loveruby.cflat.type;$/;"	p
net.loveruby.cflat.type	type/UnionTypeRef.java	/^package net.loveruby.cflat.type;$/;"	p
net.loveruby.cflat.type	type/UserType.java	/^package net.loveruby.cflat.type;$/;"	p
net.loveruby.cflat.type	type/UserTypeRef.java	/^package net.loveruby.cflat.type;$/;"	p
net.loveruby.cflat.type	type/VoidType.java	/^package net.loveruby.cflat.type;$/;"	p
net.loveruby.cflat.type	type/VoidTypeRef.java	/^package net.loveruby.cflat.type;$/;"	p
net.loveruby.cflat.utils	utils/AsmUtils.java	/^package net.loveruby.cflat.utils;$/;"	p
net.loveruby.cflat.utils	utils/CommandUtils.java	/^package net.loveruby.cflat.utils;$/;"	p
net.loveruby.cflat.utils	utils/Cursor.java	/^package net.loveruby.cflat.utils;$/;"	p
net.loveruby.cflat.utils	utils/ErrorHandler.java	/^package net.loveruby.cflat.utils;$/;"	p
net.loveruby.cflat.utils	utils/ListUtils.java	/^package net.loveruby.cflat.utils;$/;"	p
net.loveruby.cflat.utils	utils/TextUtils.java	/^package net.loveruby.cflat.utils;$/;"	p
newAssemblyCode	sysdep/x86/CodeGenerator.java	/^    private AssemblyCode newAssemblyCode() {$/;"	m	class:CodeGenerator	file:
newString	asm/SymbolTable.java	/^    protected String newString() {$/;"	m	class:SymbolTable
newSymbol	asm/SymbolTable.java	/^    public Symbol newSymbol() {$/;"	m	class:SymbolTable
newTable	type/TypeTable.java	/^    static private TypeTable newTable(int charsize, int shortsize,$/;"	m	class:TypeTable	file:
next	utils/Cursor.java	/^    public T next() {$/;"	m	class:Cursor
nextArg	compiler/Options.java	/^    private String nextArg(String opt, ListIterator<String> args) {$/;"	m	class:Options	file:
noDefaultLibs	sysdep/LinkerOptions.java	/^    public boolean noDefaultLibs = false;$/;"	f	class:LinkerOptions
noStartFiles	sysdep/LinkerOptions.java	/^    public boolean noStartFiles = false;$/;"	f	class:LinkerOptions
not	sysdep/x86/AssemblyCode.java	/^    void not(Register reg) {$/;"	m	class:AssemblyCode
numArgs	ast/FuncallNode.java	/^    public long numArgs() {$/;"	m	class:FuncallNode
numArgs	ir/Call.java	/^    public long numArgs() {$/;"	m	class:Call
numIndent	ir/Dumper.java	/^    private int numIndent;$/;"	f	class:Dumper	file:
numInstructionUsage	asm/Statistics.java	/^    public int numInstructionUsage(String insn) {$/;"	m	class:Statistics
numOperands	asm/Instruction.java	/^    public int numOperands() {$/;"	m	class:Instruction
numRefered	compiler/IRGenerator.java	/^        public long numRefered;$/;"	f	class:IRGenerator.JumpEntry
numRegisterUsed	asm/Statistics.java	/^    public int numRegisterUsed(Register reg) {$/;"	m	class:Statistics
numSymbolUsed	asm/Statistics.java	/^    public int numSymbolUsed(Symbol sym) {$/;"	m	class:Statistics
numberedLine	ast/Location.java	/^    public String numberedLine() {$/;"	m	class:Location
objFileName	compiler/SourceFile.java	/^    String objFileName() {$/;"	m	class:SourceFile
objFileNameOf	compiler/Options.java	/^    String objFileNameOf(SourceFile src) {$/;"	m	class:Options
offset	asm/IndirectMemoryReference.java	/^    Literal offset;$/;"	f	class:IndirectMemoryReference
offset	asm/IndirectMemoryReference.java	/^    public Literal offset() {$/;"	m	class:IndirectMemoryReference
offset	ast/MemberNode.java	/^    public long offset() {$/;"	m	class:MemberNode
offset	ast/PtrMemberNode.java	/^    public long offset() {$/;"	m	class:PtrMemberNode
offset	ast/Slot.java	/^    protected long offset;$/;"	f	class:Slot
offset	ast/Slot.java	/^    public long offset() {$/;"	m	class:Slot
offset	sysdep/x86/AssemblyCode.java	/^        private long offset;$/;"	f	class:AssemblyCode.VirtualStack	file:
op	ir/Bin.java	/^    protected Op op;$/;"	f	class:Bin
op	ir/Bin.java	/^    public Op op() { return op; }$/;"	m	class:Bin
op	ir/Uni.java	/^    protected Op op;$/;"	f	class:Uni
op	ir/Uni.java	/^    public Op op() { return op; }$/;"	m	class:Uni
opType	ast/UnaryOpNode.java	/^    protected Type opType;$/;"	f	class:UnaryOpNode
opType	ast/UnaryOpNode.java	/^    public Type opType() {$/;"	m	class:UnaryOpNode
operand	ast/SizeofTypeNode.java	/^    protected TypeNode operand;$/;"	f	class:SizeofTypeNode
operand	ast/SizeofTypeNode.java	/^    public Type operand() {$/;"	m	class:SizeofTypeNode
operand1	asm/Instruction.java	/^    public Operand operand1() {$/;"	m	class:Instruction
operand2	asm/Instruction.java	/^    public Operand operand2() {$/;"	m	class:Instruction
operandTypeNode	ast/SizeofTypeNode.java	/^    public TypeNode operandTypeNode() {$/;"	m	class:SizeofTypeNode
operands	asm/Instruction.java	/^    protected Operand[] operands;$/;"	f	class:Instruction
operator	ast/BinaryOpNode.java	/^    protected String operator;$/;"	f	class:BinaryOpNode
operator	ast/BinaryOpNode.java	/^    public String operator() {$/;"	m	class:BinaryOpNode
operator	ast/OpAssignNode.java	/^    protected String operator;$/;"	f	class:OpAssignNode
operator	ast/OpAssignNode.java	/^    public String operator() {$/;"	m	class:OpAssignNode
operator	ast/UnaryOpNode.java	/^    protected String operator;$/;"	f	class:UnaryOpNode
operator	ast/UnaryOpNode.java	/^    public String operator() {$/;"	m	class:UnaryOpNode
optimize	sysdep/x86/CodeGenerator.java	/^    private AssemblyCode optimize(AssemblyCode body) {$/;"	m	class:CodeGenerator	file:
optimize	sysdep/x86/PeepholeOptimizer.java	/^        abstract public void optimize(Cursor<Assembly> src, List<Assembly> dest);$/;"	m	class:PeepholeOptimizer.Filter
optimize	sysdep/x86/PeepholeOptimizer.java	/^        public void optimize(Cursor<Assembly> src, List<Assembly> dest) {$/;"	m	class:PeepholeOptimizer.JumpEliminationFilter
optimize	sysdep/x86/PeepholeOptimizer.java	/^        public void optimize(Cursor<Assembly> src, List<Assembly> dest) {$/;"	m	class:PeepholeOptimizer.SingleInsnFilter
optimize	sysdep/x86/PeepholeOptimizer.java	/^    public List<Assembly> optimize(List<Assembly> assemblies) {$/;"	m	class:PeepholeOptimizer
optimizeGvarAccess	sysdep/x86/CodeGenerator.java	/^    private boolean optimizeGvarAccess(Entity ent) {$/;"	m	class:CodeGenerator	file:
optimizeLevel	sysdep/CodeGeneratorOptions.java	/^    protected int optimizeLevel;$/;"	f	class:CodeGeneratorOptions
optimizeLevel	sysdep/CodeGeneratorOptions.java	/^    public int optimizeLevel() {$/;"	m	class:CodeGeneratorOptions
option	compiler/CompilerMode.java	/^    private final String option;$/;"	f	class:CompilerMode	file:
options	sysdep/x86/CodeGenerator.java	/^    final CodeGeneratorOptions options;$/;"	f	class:CodeGenerator
or	sysdep/x86/AssemblyCode.java	/^    void or(Operand bits, Register base) {$/;"	m	class:AssemblyCode
origType	ast/ArefNode.java	/^    protected Type origType() {$/;"	m	class:ArefNode
origType	ast/DereferenceNode.java	/^    protected Type origType() {$/;"	m	class:DereferenceNode
origType	ast/ExprNode.java	/^    protected Type origType() { return type(); }$/;"	m	class:ExprNode
origType	ast/LHSNode.java	/^    abstract protected Type origType();$/;"	m	class:LHSNode
origType	ast/LHSNode.java	/^    protected Type type, origType;$/;"	f	class:LHSNode
origType	ast/MemberNode.java	/^    protected Type origType() {$/;"	m	class:MemberNode
origType	ast/PtrMemberNode.java	/^    protected Type origType() {$/;"	m	class:PtrMemberNode
origType	ast/VariableNode.java	/^    protected Type origType() {$/;"	m	class:VariableNode
originalName	compiler/SourceFile.java	/^    private final String originalName;$/;"	f	class:SourceFile	file:
outputFileName	compiler/Options.java	/^    String outputFileName() {$/;"	m	class:Options
outputFileName	compiler/Options.java	/^    private String outputFileName;$/;"	f	class:Options	file:
paramDescriptors	entity/ParamSlots.java	/^    protected List<T> paramDescriptors;$/;"	f	class:ParamSlots
paramTypes	type/FunctionType.java	/^    protected ParamTypes paramTypes;$/;"	f	class:FunctionType
paramTypes	type/FunctionType.java	/^    public List<Type> paramTypes() {$/;"	m	class:FunctionType
parameters	entity/DefinedFunction.java	/^    public List<Parameter> parameters() {$/;"	m	class:DefinedFunction
parameters	entity/Function.java	/^    abstract public List<Parameter> parameters();$/;"	m	class:Function
parameters	entity/Params.java	/^    public List<Parameter> parameters() {$/;"	m	class:Params
parameters	entity/UndefinedFunction.java	/^    public List<Parameter> parameters() {$/;"	m	class:UndefinedFunction
parametersTypeRef	entity/Params.java	/^    public ParamTypeRefs parametersTypeRef() {$/;"	m	class:Params
params	entity/DefinedFunction.java	/^    protected Params params;$/;"	f	class:DefinedFunction
params	entity/UndefinedFunction.java	/^    protected Params params;$/;"	f	class:UndefinedFunction
params	type/FunctionTypeRef.java	/^    protected ParamTypeRefs params;$/;"	f	class:FunctionTypeRef
params	type/FunctionTypeRef.java	/^    public ParamTypeRefs params() {$/;"	m	class:FunctionTypeRef
parent	entity/LocalScope.java	/^    protected Scope parent;$/;"	f	class:LocalScope
parent	entity/LocalScope.java	/^    public Scope parent() {$/;"	m	class:LocalScope
parent	entity/Scope.java	/^    abstract public Scope parent();$/;"	m	class:Scope
parent	entity/ToplevelScope.java	/^    public Scope parent() {$/;"	m	class:ToplevelScope
parse	compiler/Options.java	/^    static Options parse(String[] args) {$/;"	m	class:Options
parseArgs	compiler/Options.java	/^    void parseArgs(String[] origArgs) {$/;"	m	class:Options
parseCommaSeparatedOptions	compiler/Options.java	/^    private List<String> parseCommaSeparatedOptions(String opt) {$/;"	m	class:Options	file:
parseError	compiler/Options.java	/^    private void parseError(String msg) {$/;"	m	class:Options	file:
parseFile	compiler/Compiler.java	/^    public AST parseFile(String path, Options opts)$/;"	m	class:Compiler
parseOptions	compiler/Compiler.java	/^    private Options parseOptions(String[] args) {$/;"	m	class:Compiler	file:
passThrough	utils/CommandUtils.java	/^    static private void passThrough(InputStream s) throws IOException {$/;"	m	class:CommandUtils	file:
path	compiler/SourceFile.java	/^    String path() {$/;"	m	class:SourceFile
pattern	sysdep/x86/PeepholeOptimizer.java	/^        private InsnPattern pattern;$/;"	f	class:PeepholeOptimizer.SingleInsnFilter	file:
pattern1	sysdep/x86/PeepholeOptimizer.java	/^        private OperandPattern pattern1;$/;"	f	class:PeepholeOptimizer.InsnPattern	file:
pattern2	sysdep/x86/PeepholeOptimizer.java	/^        private OperandPattern pattern2;$/;"	f	class:PeepholeOptimizer.InsnPattern	file:
patternHeads	sysdep/x86/PeepholeOptimizer.java	/^        abstract public String[] patternHeads();$/;"	m	class:PeepholeOptimizer.Filter
patternHeads	sysdep/x86/PeepholeOptimizer.java	/^        public String[] patternHeads() {$/;"	m	class:PeepholeOptimizer.JumpEliminationFilter
patternHeads	sysdep/x86/PeepholeOptimizer.java	/^        public String[] patternHeads() {$/;"	m	class:PeepholeOptimizer.SingleInsnFilter
platform	compiler/Options.java	/^    private Platform platform = new X86Linux();$/;"	f	class:Options	file:
plus	asm/BaseSymbol.java	/^    public Literal plus(long n) {$/;"	m	class:BaseSymbol
plus	asm/IntegerLiteral.java	/^    public IntegerLiteral plus(long diff) {$/;"	m	class:IntegerLiteral
plus	asm/Literal.java	/^    public Literal plus(long diff);$/;"	m	interface:Literal
plus	asm/SuffixedSymbol.java	/^    public Literal plus(long n) {$/;"	m	class:SuffixedSymbol
pointerSize	type/ArrayType.java	/^    protected long pointerSize;$/;"	f	class:ArrayType
pointerSize	type/TypeTable.java	/^    private int pointerSize;$/;"	f	class:TypeTable	file:
pointerSize	type/TypeTable.java	/^    public int pointerSize() {$/;"	m	class:TypeTable
pointerTo	compiler/IRGenerator.java	/^    private Type pointerTo(Type t) {$/;"	m	class:IRGenerator	file:
pointerTo	type/TypeTable.java	/^    public PointerType pointerTo(Type baseType) {$/;"	m	class:TypeTable
pop	sysdep/x86/AssemblyCode.java	/^    void pop(Register reg) {$/;"	m	class:AssemblyCode
popBreak	compiler/IRGenerator.java	/^    private void popBreak() {$/;"	m	class:IRGenerator	file:
popContinue	compiler/IRGenerator.java	/^    private void popContinue() {$/;"	m	class:IRGenerator	file:
popScope	compiler/LocalResolver.java	/^    private LocalScope popScope() {$/;"	m	class:LocalResolver	file:
printAsm	compiler/Compiler.java	/^    private boolean printAsm(AssemblyCode asm, CompilerMode mode) {$/;"	m	class:Compiler	file:
printClass	ast/Dumper.java	/^    public void printClass(Object obj, Location loc) {$/;"	m	class:Dumper
printClass	ir/Dumper.java	/^    public void printClass(Object obj) {$/;"	m	class:Dumper
printClass	ir/Dumper.java	/^    public void printClass(Object obj, Location loc) {$/;"	m	class:Dumper
printFuncs	ir/Dumper.java	/^    public void printFuncs(String name, List<DefinedFunction> funcs) {$/;"	m	class:Dumper
printIndent	ast/Dumper.java	/^    protected void printIndent() {$/;"	m	class:Dumper
printIndent	ir/Dumper.java	/^    private void printIndent() {$/;"	m	class:Dumper	file:
printMember	ast/Dumper.java	/^    public void printMember(String name, Dumpable n) {$/;"	m	class:Dumper
printMember	ast/Dumper.java	/^    public void printMember(String name, String str) {$/;"	m	class:Dumper
printMember	ast/Dumper.java	/^    public void printMember(String name, String str, boolean isResolved) {$/;"	m	class:Dumper
printMember	ast/Dumper.java	/^    public void printMember(String name, Type t) {$/;"	m	class:Dumper
printMember	ast/Dumper.java	/^    public void printMember(String name, TypeNode n) {$/;"	m	class:Dumper
printMember	ast/Dumper.java	/^    public void printMember(String name, TypeRef ref) {$/;"	m	class:Dumper
printMember	ast/Dumper.java	/^    public void printMember(String name, boolean b) {$/;"	m	class:Dumper
printMember	ast/Dumper.java	/^    public void printMember(String name, int n) {$/;"	m	class:Dumper
printMember	ast/Dumper.java	/^    public void printMember(String name, long n) {$/;"	m	class:Dumper
printMember	ir/Dumper.java	/^    public void printMember(String name, Dumpable memb) {$/;"	m	class:Dumper
printMember	ir/Dumper.java	/^    public void printMember(String name, Label memb) {$/;"	m	class:Dumper
printMember	ir/Dumper.java	/^    public void printMember(String name, String memb) {$/;"	m	class:Dumper
printMember	ir/Dumper.java	/^    public void printMember(String name, boolean memb) {$/;"	m	class:Dumper
printMember	ir/Dumper.java	/^    public void printMember(String name, int memb) {$/;"	m	class:Dumper
printMember	ir/Dumper.java	/^    public void printMember(String name, long memb) {$/;"	m	class:Dumper
printMember	ir/Dumper.java	/^    public void printMember(String name, net.loveruby.cflat.asm.Type memb) {$/;"	m	class:Dumper
printMember	ir/Dumper.java	/^    public void printMember(String name, net.loveruby.cflat.type.Type memb) {$/;"	m	class:Dumper
printMembers	ir/Dumper.java	/^    public void printMembers(String name, List<? extends Dumpable> elems) {$/;"	m	class:Dumper
printNodeList	ast/Dumper.java	/^    public void printNodeList(String name, List<? extends Dumpable> nodes) {$/;"	m	class:Dumper
printPair	ast/AST.java	/^    private void printPair(String key, String value, PrintStream s) {$/;"	m	class:AST	file:
printPair	ast/Dumper.java	/^    protected void printPair(String name, String value) {$/;"	m	class:Dumper
printPair	ir/Dumper.java	/^    private void printPair(String name, String value) {$/;"	m	class:Dumper	file:
printStackFrameLayout	sysdep/x86/CodeGenerator.java	/^    private void printStackFrameLayout(AssemblyCode file,$/;"	m	class:CodeGenerator	file:
printUsage	compiler/Options.java	/^    void printUsage(PrintStream out) {$/;"	m	class:Options
printVars	ir/Dumper.java	/^    public void printVars(String name, List<DefinedVariable> vars) {$/;"	m	class:Dumper
privateSymbol	sysdep/x86/CodeGenerator.java	/^    private Symbol privateSymbol(String sym) {$/;"	m	class:CodeGenerator	file:
programId	utils/ErrorHandler.java	/^    protected String programId;$/;"	f	class:ErrorHandler
prologue	sysdep/x86/CodeGenerator.java	/^    private void prologue(AssemblyCode file,$/;"	m	class:CodeGenerator	file:
ptrBaseSize	compiler/IRGenerator.java	/^    private Expr ptrBaseSize(Type t) {$/;"	m	class:IRGenerator	file:
ptrDiffType	type/TypeTable.java	/^    public Type ptrDiffType() {$/;"	m	class:TypeTable
ptrDiffTypeName	type/TypeTable.java	/^    protected String ptrDiffTypeName() {$/;"	m	class:TypeTable
ptrDiffTypeRef	type/TypeTable.java	/^    public TypeRef ptrDiffTypeRef() {$/;"	m	class:TypeTable
ptr_t	compiler/IRGenerator.java	/^    private net.loveruby.cflat.asm.Type ptr_t() {$/;"	m	class:IRGenerator	file:
ptrdiff	compiler/IRGenerator.java	/^    private Int ptrdiff(long n) {$/;"	m	class:IRGenerator	file:
ptrdiff_t	compiler/IRGenerator.java	/^    private net.loveruby.cflat.asm.Type ptrdiff_t() {$/;"	m	class:IRGenerator	file:
push	sysdep/x86/AssemblyCode.java	/^    void push(Register reg) {$/;"	m	class:AssemblyCode
pushBreak	compiler/IRGenerator.java	/^    private void pushBreak(Label label) {$/;"	m	class:IRGenerator	file:
pushContinue	compiler/IRGenerator.java	/^    private void pushContinue(Label label) {$/;"	m	class:IRGenerator	file:
pushScope	compiler/LocalResolver.java	/^    private void pushScope(List<? extends DefinedVariable> vars) {$/;"	m	class:LocalResolver	file:
put	type/TypeTable.java	/^    public void put(TypeRef ref, Type t) {$/;"	m	class:TypeTable
real	ast/TypedefNode.java	/^    protected TypeNode real;$/;"	f	class:TypedefNode
real	type/UserType.java	/^    protected TypeNode real;$/;"	f	class:UserType
realType	ast/TypedefNode.java	/^    public Type realType() {$/;"	m	class:TypedefNode
realType	type/UserType.java	/^    public Type realType() {$/;"	m	class:UserType
realTypeNode	ast/TypedefNode.java	/^    public TypeNode realTypeNode() {$/;"	m	class:TypedefNode
realTypeRef	ast/TypedefNode.java	/^    public TypeRef realTypeRef() {$/;"	m	class:TypedefNode
reduceLabels	sysdep/x86/AssemblyCode.java	/^    void reduceLabels() {$/;"	m	class:AssemblyCode
ref	compiler/IRGenerator.java	/^    private Var ref(Entity ent) {$/;"	m	class:IRGenerator	file:
referLabel	compiler/IRGenerator.java	/^    private Label referLabel(String name) {$/;"	m	class:IRGenerator	file:
refered	entity/Entity.java	/^    public void refered() {$/;"	m	class:Entity
reg	sysdep/x86/PeepholeOptimizer.java	/^    private OperandPattern reg() {$/;"	m	class:PeepholeOptimizer	file:
register	asm/AbsoluteAddress.java	/^    protected Register register;$/;"	f	class:AbsoluteAddress
register	asm/AbsoluteAddress.java	/^    public Operand register() {$/;"	m	class:AbsoluteAddress
registerClass	sysdep/x86/Register.java	/^    RegisterClass registerClass() {$/;"	m	class:Register
registerUsage	asm/Statistics.java	/^    protected Map<Register, Integer> registerUsage;$/;"	f	class:Statistics
registerUsed	asm/Statistics.java	/^    public void registerUsed(Register reg) {$/;"	m	class:Statistics
relocatable	asm/IndirectMemoryReference.java	/^    static public IndirectMemoryReference relocatable(long offset, Register base) {$/;"	m	class:IndirectMemoryReference
relocatableMem	sysdep/x86/AssemblyCode.java	/^        private IndirectMemoryReference relocatableMem(long offset, Register base) {$/;"	m	class:AssemblyCode.VirtualStack	file:
relocatableMem	sysdep/x86/CodeGenerator.java	/^    private IndirectMemoryReference relocatableMem(long offset, Register base) {$/;"	m	class:CodeGenerator	file:
relocatableMov	sysdep/x86/AssemblyCode.java	/^    void relocatableMov(Operand src, Operand dest) {$/;"	m	class:AssemblyCode
remove	utils/Cursor.java	/^    public void remove() {$/;"	m	class:Cursor
replaceArgs	ast/FuncallNode.java	/^    public void replaceArgs(List<ExprNode> args) {$/;"	m	class:FuncallNode
replaceExt	compiler/SourceFile.java	/^    private String replaceExt(String ext) {$/;"	m	class:SourceFile	file:
requires	compiler/CompilerMode.java	/^    boolean requires(CompilerMode m) {$/;"	m	class:CompilerMode
reset	sysdep/x86/AssemblyCode.java	/^        void reset() {$/;"	m	class:AssemblyCode.VirtualStack
resolve	compiler/LocalResolver.java	/^    private void resolve(ExprNode n) {$/;"	m	class:LocalResolver	file:
resolve	compiler/LocalResolver.java	/^    private void resolve(StmtNode n) {$/;"	m	class:LocalResolver	file:
resolve	compiler/LocalResolver.java	/^    public void resolve(AST ast) throws SemanticException {$/;"	m	class:LocalResolver
resolve	compiler/TypeResolver.java	/^    public void resolve(AST ast) {$/;"	m	class:TypeResolver
resolveCompositeType	compiler/TypeResolver.java	/^    public void resolveCompositeType(CompositeTypeDefinition def) {$/;"	m	class:TypeResolver
resolveConstantValues	compiler/LocalResolver.java	/^    private void resolveConstantValues(List<Constant> consts) {$/;"	m	class:LocalResolver	file:
resolveFunctionHeader	compiler/TypeResolver.java	/^    private void resolveFunctionHeader(Function func) {$/;"	m	class:TypeResolver	file:
resolveFunctions	compiler/LocalResolver.java	/^    private void resolveFunctions(List<DefinedFunction> funcs) {$/;"	m	class:LocalResolver	file:
resolveGvarInitializers	compiler/LocalResolver.java	/^    private void resolveGvarInitializers(List<DefinedVariable> gvars) {$/;"	m	class:LocalResolver	file:
ret	sysdep/x86/AssemblyCode.java	/^    void ret() {$/;"	m	class:AssemblyCode
returnType	entity/Function.java	/^    public Type returnType() {$/;"	m	class:Function
returnType	type/FunctionType.java	/^    protected Type returnType;$/;"	f	class:FunctionType
returnType	type/FunctionType.java	/^    public Type returnType() {$/;"	m	class:FunctionType
returnType	type/FunctionTypeRef.java	/^    protected TypeRef returnType;$/;"	f	class:FunctionTypeRef
returnType	type/FunctionTypeRef.java	/^    public TypeRef returnType() {$/;"	m	class:FunctionTypeRef
reverse	utils/ListUtils.java	/^    static public <T> List<T> reverse(List<T> list) {$/;"	m	class:ListUtils
rewind	sysdep/x86/AssemblyCode.java	/^        void rewind(long len) {$/;"	m	class:AssemblyCode.VirtualStack
rewindStack	sysdep/x86/CodeGenerator.java	/^    private void rewindStack(AssemblyCode file, long len) {$/;"	m	class:CodeGenerator	file:
rhs	ast/AbstractAssignNode.java	/^    ExprNode lhs, rhs;$/;"	f	class:AbstractAssignNode
rhs	ast/AbstractAssignNode.java	/^    public ExprNode rhs() {$/;"	m	class:AbstractAssignNode
rhs	ir/Assign.java	/^    protected Expr lhs, rhs;$/;"	f	class:Assign
rhs	ir/Assign.java	/^    public Expr rhs() {$/;"	m	class:Assign
right	ast/BinaryOpNode.java	/^    protected ExprNode left, right;$/;"	f	class:BinaryOpNode
right	ast/BinaryOpNode.java	/^    public ExprNode right() {$/;"	m	class:BinaryOpNode
right	ir/Bin.java	/^    protected Expr left, right;$/;"	f	class:Bin
right	ir/Bin.java	/^    public Expr right() { return right; }$/;"	m	class:Bin
sal	sysdep/x86/AssemblyCode.java	/^    void sal(Register bits, Register base) {$/;"	m	class:AssemblyCode
sar	sysdep/x86/AssemblyCode.java	/^    void sar(Register bits, Register base) {$/;"	m	class:AssemblyCode
saveRegs	sysdep/x86/CodeGenerator.java	/^        List<Register> saveRegs;$/;"	f	class:CodeGenerator.StackFrameInfo
saveRegsSize	sysdep/x86/CodeGenerator.java	/^        long saveRegsSize() { return saveRegs.size() * STACK_WORD_SIZE; }$/;"	m	class:CodeGenerator.StackFrameInfo
scope	ast/AST.java	/^    protected ToplevelScope scope;$/;"	f	class:AST
scope	ast/AST.java	/^    public ToplevelScope scope() {$/;"	m	class:AST
scope	ast/BlockNode.java	/^    protected LocalScope scope;$/;"	f	class:BlockNode
scope	ast/BlockNode.java	/^    public LocalScope scope() {$/;"	m	class:BlockNode
scope	entity/DefinedFunction.java	/^    protected LocalScope scope;$/;"	f	class:DefinedFunction
scope	ir/IR.java	/^    ToplevelScope scope;$/;"	f	class:IR
scope	ir/IR.java	/^    public ToplevelScope scope() {$/;"	m	class:IR
scopeStack	compiler/IRGenerator.java	/^    LinkedList<LocalScope> scopeStack;$/;"	f	class:IRGenerator
scopeStack	compiler/LocalResolver.java	/^    private final LinkedList<Scope> scopeStack;$/;"	f	class:LocalResolver	file:
searchLibrary	parser/LibraryLoader.java	/^    public File searchLibrary(String libid) throws FileException {$/;"	m	class:LibraryLoader
selectSourceFiles	compiler/Options.java	/^    private List<SourceFile> selectSourceFiles(List<LdArg> args) {$/;"	m	class:Options	file:
semanticAnalyze	compiler/Compiler.java	/^    public AST semanticAnalyze(AST ast, TypeTable types,$/;"	m	class:Compiler
semanticCheck	type/TypeTable.java	/^    public void semanticCheck(ErrorHandler h) {$/;"	m	class:TypeTable
semanticError	compiler/DereferenceChecker.java	/^    private void semanticError(Location loc, String msg) {$/;"	m	class:DereferenceChecker	file:
semanticError	compiler/DereferenceChecker.java	/^    private void semanticError(Node n, String msg) {$/;"	m	class:DereferenceChecker	file:
seq	asm/SymbolTable.java	/^    protected long seq = 0;$/;"	f	class:SymbolTable
sequence	entity/DefinedVariable.java	/^    protected long sequence;$/;"	f	class:DefinedVariable
setAddress	entity/ConstantEntry.java	/^    public void setAddress(ImmediateValue imm) {$/;"	m	class:ConstantEntry
setAddress	entity/Entity.java	/^    public void setAddress(ImmediateValue imm) {$/;"	m	class:Entity
setAddress	entity/Entity.java	/^    public void setAddress(MemoryReference mem) {$/;"	m	class:Entity
setAmount	ast/UnaryArithmeticOpNode.java	/^    public void setAmount(long amount) {$/;"	m	class:UnaryArithmeticOpNode
setCallingSymbol	entity/Function.java	/^    public void setCallingSymbol(Symbol sym) {$/;"	m	class:Function
setConstantTable	ast/AST.java	/^    public void setConstantTable(ConstantTable table) {$/;"	m	class:AST
setCurrentName	compiler/SourceFile.java	/^    void setCurrentName(String name) {$/;"	m	class:SourceFile
setElseExpr	ast/CondExprNode.java	/^    public void setElseExpr(ExprNode expr) {$/;"	m	class:CondExprNode
setEntity	ast/VariableNode.java	/^    public void setEntity(Entity ent) {$/;"	m	class:VariableNode
setEntry	ast/StringLiteralNode.java	/^    public void setEntry(ConstantEntry ent) {$/;"	m	class:StringLiteralNode
setExpr	ast/DereferenceNode.java	/^    public void setExpr(ExprNode expr) {$/;"	m	class:DereferenceNode
setExpr	ast/ExprStmtNode.java	/^    public void setExpr(ExprNode expr) {$/;"	m	class:ExprStmtNode
setExpr	ast/ReturnNode.java	/^    public void setExpr(ExprNode expr) {$/;"	m	class:ReturnNode
setExpr	ast/SizeofExprNode.java	/^    public void setExpr(ExprNode expr) {$/;"	m	class:SizeofExprNode
setExpr	ast/UnaryArithmeticOpNode.java	/^    public void setExpr(ExprNode expr) {$/;"	m	class:UnaryArithmeticOpNode
setExpr	ast/UnaryOpNode.java	/^    public void setExpr(ExprNode expr) {$/;"	m	class:UnaryOpNode
setIR	entity/DefinedFunction.java	/^    public void setIR(List<Stmt> ir) {$/;"	m	class:DefinedFunction
setIR	entity/DefinedVariable.java	/^    public void setIR(Expr expr) {$/;"	m	class:DefinedVariable
setInitializer	entity/DefinedVariable.java	/^    public void setInitializer(ExprNode expr) {$/;"	m	class:DefinedVariable
setLeft	ast/BinaryOpNode.java	/^    public void setLeft(ExprNode left) {$/;"	m	class:BinaryOpNode
setMemref	entity/ConstantEntry.java	/^    public void setMemref(MemoryReference mem) {$/;"	m	class:ConstantEntry
setMemref	entity/Entity.java	/^    public void setMemref(MemoryReference mem) {$/;"	m	class:Entity
setOffset	ast/Slot.java	/^    public void setOffset(long offset) {$/;"	m	class:Slot
setOpType	ast/UnaryOpNode.java	/^    public void setOpType(Type t) {$/;"	m	class:UnaryOpNode
setOptimizationLevel	sysdep/CodeGeneratorOptions.java	/^    public void setOptimizationLevel(int level) {$/;"	m	class:CodeGeneratorOptions
setRHS	ast/AbstractAssignNode.java	/^    public void setRHS(ExprNode expr) {$/;"	m	class:AbstractAssignNode
setRight	ast/BinaryOpNode.java	/^    public void setRight(ExprNode right) {$/;"	m	class:BinaryOpNode
setScope	ast/AST.java	/^    public void setScope(ToplevelScope scope) {$/;"	m	class:AST
setScope	ast/BlockNode.java	/^    public void setScope(LocalScope scope) {$/;"	m	class:BlockNode
setScope	entity/DefinedFunction.java	/^    public void setScope(LocalScope scope) {$/;"	m	class:DefinedFunction
setSequence	entity/DefinedVariable.java	/^    public void setSequence(long seq) {$/;"	m	class:DefinedVariable
setSymbol	entity/ConstantEntry.java	/^    public void setSymbol(Symbol sym) {$/;"	m	class:ConstantEntry
setThenExpr	ast/CondExprNode.java	/^    public void setThenExpr(ExprNode expr) {$/;"	m	class:CondExprNode
setType	ast/AddressNode.java	/^    public void setType(Type type) {$/;"	m	class:AddressNode
setType	ast/BinaryOpNode.java	/^    public void setType(Type type) {$/;"	m	class:BinaryOpNode
setType	ast/LHSNode.java	/^    public void setType(Type t) {$/;"	m	class:LHSNode
setType	ast/TypeNode.java	/^    public void setType(Type t) {$/;"	m	class:TypeNode
seta	sysdep/x86/AssemblyCode.java	/^    void seta(Register reg) {$/;"	m	class:AssemblyCode
setae	sysdep/x86/AssemblyCode.java	/^    void setae(Register reg) {$/;"	m	class:AssemblyCode
setb	sysdep/x86/AssemblyCode.java	/^    void setb(Register reg) {$/;"	m	class:AssemblyCode
setbe	sysdep/x86/AssemblyCode.java	/^    void setbe(Register reg) {$/;"	m	class:AssemblyCode
sete	sysdep/x86/AssemblyCode.java	/^    void sete(Register reg) {$/;"	m	class:AssemblyCode
setg	sysdep/x86/AssemblyCode.java	/^    void setg(Register reg) {$/;"	m	class:AssemblyCode
setge	sysdep/x86/AssemblyCode.java	/^    void setge(Register reg) {$/;"	m	class:AssemblyCode
setl	sysdep/x86/AssemblyCode.java	/^    void setl(Register reg) {$/;"	m	class:AssemblyCode
setle	sysdep/x86/AssemblyCode.java	/^    void setle(Register reg) {$/;"	m	class:AssemblyCode
setne	sysdep/x86/AssemblyCode.java	/^    void setne(Register reg) {$/;"	m	class:AssemblyCode
shortRef	type/IntegerTypeRef.java	/^    static public IntegerTypeRef shortRef() {$/;"	m	class:IntegerTypeRef
shortRef	type/IntegerTypeRef.java	/^    static public IntegerTypeRef shortRef(Location loc) {$/;"	m	class:IntegerTypeRef
shouldUsePLT	sysdep/x86/CodeGenerator.java	/^    private boolean shouldUsePLT(Entity ent) {$/;"	m	class:CodeGenerator	file:
shr	sysdep/x86/AssemblyCode.java	/^    void shr(Register bits, Register base) {$/;"	m	class:AssemblyCode
si	sysdep/x86/CodeGenerator.java	/^    private Register si() {$/;"	m	class:CodeGenerator	file:
signedChar	type/TypeTable.java	/^    public IntegerType signedChar() {$/;"	m	class:TypeTable
signedInt	type/TypeTable.java	/^    public IntegerType signedInt() {$/;"	m	class:TypeTable
signedLong	type/TypeTable.java	/^    public IntegerType signedLong() {$/;"	m	class:TypeTable
signedShort	type/TypeTable.java	/^    public IntegerType signedShort() {$/;"	m	class:TypeTable
signedStackType	type/TypeTable.java	/^    public Type signedStackType() {$/;"	m	class:TypeTable
size	asm/Type.java	/^    public int size() {$/;"	m	class:Type
size	ast/Slot.java	/^    public long size() {$/;"	m	class:Slot
size	compiler/IRGenerator.java	/^    private Int size(long n) {$/;"	m	class:IRGenerator	file:
size	type/ArrayType.java	/^    public long size() {$/;"	m	class:ArrayType
size	type/CompositeType.java	/^    public long size() {$/;"	m	class:CompositeType
size	type/FunctionType.java	/^    public long size() {$/;"	m	class:FunctionType
size	type/IntegerType.java	/^    protected long size;$/;"	f	class:IntegerType
size	type/IntegerType.java	/^    public long size() {$/;"	m	class:IntegerType
size	type/PointerType.java	/^    protected long size;$/;"	f	class:PointerType
size	type/PointerType.java	/^    public long size() {$/;"	m	class:PointerType
size	type/Type.java	/^    abstract public long size();$/;"	m	class:Type
size	type/UserType.java	/^    public long size() { return realType().size(); }$/;"	m	class:UserType
size	type/VoidType.java	/^    public long size() {$/;"	m	class:VoidType
sizeUnknown	type/Type.java	/^    static final public long sizeUnknown = -1;$/;"	f	class:Type
size_t	compiler/IRGenerator.java	/^    private net.loveruby.cflat.asm.Type size_t() {$/;"	m	class:IRGenerator	file:
soFileName	compiler/Options.java	/^    String soFileName() {$/;"	m	class:Options
source	ast/AST.java	/^    protected Location source;$/;"	f	class:AST
source	ir/IR.java	/^    Location source;$/;"	f	class:IR
sourceFiles	compiler/Options.java	/^    List<SourceFile> sourceFiles() {$/;"	m	class:Options
sourceFiles	compiler/Options.java	/^    private List<SourceFile> sourceFiles;$/;"	f	class:Options	file:
sourceName	ast/Location.java	/^    protected String sourceName;$/;"	f	class:Location
sourceName	ast/Location.java	/^    public String sourceName() {$/;"	m	class:Location
sp	sysdep/x86/CodeGenerator.java	/^    private Register sp() {$/;"	m	class:CodeGenerator	file:
specialTokenHead	ast/CflatToken.java	/^    protected Token specialTokenHead(Token firstSpecial) {$/;"	m	class:CflatToken
stackSizeFromWordNum	sysdep/x86/CodeGenerator.java	/^    private long stackSizeFromWordNum(long numWords) {$/;"	m	class:CodeGenerator	file:
stackWordSize	sysdep/x86/AssemblyCode.java	/^    final long stackWordSize;$/;"	f	class:AssemblyCode
staticLocalVariables	entity/LocalScope.java	/^    public List<DefinedVariable> staticLocalVariables() {$/;"	m	class:LocalScope
staticLocalVariables	entity/ToplevelScope.java	/^    protected List<DefinedVariable> staticLocalVariables;   \/\/ cache$/;"	f	class:ToplevelScope
staticLocalVariables	entity/ToplevelScope.java	/^    public List<DefinedVariable> staticLocalVariables() {$/;"	m	class:ToplevelScope
statistics	sysdep/x86/AssemblyCode.java	/^    private Statistics statistics() {$/;"	m	class:AssemblyCode	file:
statistics	sysdep/x86/AssemblyCode.java	/^    private Statistics statistics;$/;"	f	class:AssemblyCode	file:
stmt	ast/LabelNode.java	/^    protected StmtNode stmt;$/;"	f	class:LabelNode
stmt	ast/LabelNode.java	/^    public StmtNode stmt() {$/;"	m	class:LabelNode
stmts	ast/BlockNode.java	/^    protected List<StmtNode> stmts;$/;"	f	class:BlockNode
stmts	ast/BlockNode.java	/^    public List<StmtNode> stmts() {$/;"	m	class:BlockNode
stmts	compiler/IRGenerator.java	/^    List<Stmt> stmts;$/;"	f	class:IRGenerator
store	sysdep/x86/CodeGenerator.java	/^    private void store(Register reg, MemoryReference mem) {$/;"	m	class:CodeGenerator	file:
stream	ast/Dumper.java	/^    protected PrintStream stream;$/;"	f	class:Dumper
stream	ir/Dumper.java	/^    PrintStream stream;$/;"	f	class:Dumper
stream	utils/ErrorHandler.java	/^    protected PrintStream stream;$/;"	f	class:ErrorHandler
string	asm/Comment.java	/^    protected String string;$/;"	f	class:Comment
sub	sysdep/x86/AssemblyCode.java	/^    void sub(Operand diff, Register base) {$/;"	m	class:AssemblyCode
suffix	asm/Instruction.java	/^    protected String suffix;$/;"	f	class:Instruction
suffix	asm/SuffixedSymbol.java	/^    protected String suffix;$/;"	f	class:SuffixedSymbol
symbol	asm/Label.java	/^    protected Symbol symbol;$/;"	f	class:Label
symbol	asm/Label.java	/^    public Symbol symbol() {$/;"	m	class:Label
symbol	entity/ConstantEntry.java	/^    protected Symbol symbol;$/;"	f	class:ConstantEntry
symbol	entity/ConstantEntry.java	/^    public Symbol symbol() {$/;"	m	class:ConstantEntry
symbol	entity/DefinedVariable.java	/^    protected Symbol symbol;$/;"	f	class:DefinedVariable
symbol	ir/Str.java	/^    public Symbol symbol() {$/;"	m	class:Str
symbol	sysdep/x86/CodeGenerator.java	/^    private Symbol symbol(String sym, boolean isPrivate) {$/;"	m	class:CodeGenerator	file:
symbolString	asm/SymbolTable.java	/^    public String symbolString(UnnamedSymbol sym) {$/;"	m	class:SymbolTable
symbolString	entity/DefinedVariable.java	/^    public String symbolString() {$/;"	m	class:DefinedVariable
symbolString	entity/Entity.java	/^    public String symbolString() {$/;"	m	class:Entity
symbolUsage	asm/Statistics.java	/^    protected Map<Symbol, Integer> symbolUsage;$/;"	f	class:Statistics
symbolUsed	asm/Statistics.java	/^    public void symbolUsed(Symbol sym) {$/;"	m	class:Statistics
table	entity/ConstantTable.java	/^    protected Map<String, ConstantEntry> table;$/;"	f	class:ConstantTable
table	type/TypeTable.java	/^    private Map<TypeRef, Type> table;$/;"	f	class:TypeTable	file:
tailStmt	ast/BlockNode.java	/^    public StmtNode tailStmt() {$/;"	m	class:BlockNode
target	ast/GotoNode.java	/^    protected String target;$/;"	f	class:GotoNode
target	ast/GotoNode.java	/^    public String target() {$/;"	m	class:GotoNode
tempOffset	sysdep/x86/CodeGenerator.java	/^        long tempOffset() { return saveRegsSize() + lvarSize; }$/;"	m	class:CodeGenerator.StackFrameInfo
tempSize	sysdep/x86/CodeGenerator.java	/^        long tempSize;$/;"	f	class:CodeGenerator.StackFrameInfo
test	sysdep/x86/AssemblyCode.java	/^    void test(Register a, Register b) {$/;"	m	class:AssemblyCode
thenBody	ast/IfNode.java	/^    protected StmtNode thenBody;$/;"	f	class:IfNode
thenBody	ast/IfNode.java	/^    public StmtNode thenBody() {$/;"	m	class:IfNode
thenExpr	ast/CondExprNode.java	/^    protected ExprNode cond, thenExpr, elseExpr;$/;"	f	class:CondExprNode
thenExpr	ast/CondExprNode.java	/^    public ExprNode thenExpr() {$/;"	m	class:CondExprNode
thenLabel	ir/CJump.java	/^    protected Label thenLabel;$/;"	f	class:CJump
thenLabel	ir/CJump.java	/^    public Label thenLabel() {$/;"	m	class:CJump
tmp	entity/DefinedVariable.java	/^    static public DefinedVariable tmp(Type t) {$/;"	m	class:DefinedVariable
tmpSeq	entity/DefinedVariable.java	/^    static private long tmpSeq = 0;$/;"	f	class:DefinedVariable	file:
tmpVar	compiler/IRGenerator.java	/^    private DefinedVariable tmpVar(Type t) {$/;"	m	class:IRGenerator	file:
toOption	compiler/CompilerMode.java	/^    public String toOption() {$/;"	m	class:CompilerMode
toSource	asm/AbsoluteAddress.java	/^    public String toSource(SymbolTable table) {$/;"	m	class:AbsoluteAddress
toSource	asm/Assembly.java	/^    abstract public String toSource(SymbolTable table);$/;"	m	class:Assembly
toSource	asm/Comment.java	/^    public String toSource(SymbolTable table) {$/;"	m	class:Comment
toSource	asm/DirectMemoryReference.java	/^    public String toSource(SymbolTable table) {$/;"	m	class:DirectMemoryReference
toSource	asm/Directive.java	/^    public String toSource(SymbolTable table) {$/;"	m	class:Directive
toSource	asm/ImmediateValue.java	/^    public String toSource(SymbolTable table) {$/;"	m	class:ImmediateValue
toSource	asm/IndirectMemoryReference.java	/^    public String toSource(SymbolTable table) {$/;"	m	class:IndirectMemoryReference
toSource	asm/Instruction.java	/^    public String toSource(SymbolTable table) {$/;"	m	class:Instruction
toSource	asm/IntegerLiteral.java	/^    public String toSource() {$/;"	m	class:IntegerLiteral
toSource	asm/IntegerLiteral.java	/^    public String toSource(SymbolTable table) {$/;"	m	class:IntegerLiteral
toSource	asm/Label.java	/^    public String toSource(SymbolTable table) {$/;"	m	class:Label
toSource	asm/Literal.java	/^    public String toSource();$/;"	m	interface:Literal
toSource	asm/Literal.java	/^    public String toSource(SymbolTable table);$/;"	m	interface:Literal
toSource	asm/NamedSymbol.java	/^    public String toSource() {$/;"	m	class:NamedSymbol
toSource	asm/NamedSymbol.java	/^    public String toSource(SymbolTable table) {$/;"	m	class:NamedSymbol
toSource	asm/Operand.java	/^    abstract public String toSource(SymbolTable table);$/;"	m	class:Operand
toSource	asm/Register.java	/^    abstract public String toSource(SymbolTable syms);$/;"	m	class:Register
toSource	asm/SuffixedSymbol.java	/^    public String toSource() {$/;"	m	class:SuffixedSymbol
toSource	asm/SuffixedSymbol.java	/^    public String toSource(SymbolTable table) {$/;"	m	class:SuffixedSymbol
toSource	asm/UnnamedSymbol.java	/^    public String toSource() {$/;"	m	class:UnnamedSymbol
toSource	asm/UnnamedSymbol.java	/^    public String toSource(SymbolTable table) {$/;"	m	class:UnnamedSymbol
toSource	sysdep/AssemblyCode.java	/^    String toSource();$/;"	m	interface:AssemblyCode
toSource	sysdep/x86/AssemblyCode.java	/^    public String toSource() {$/;"	m	class:AssemblyCode
toSource	sysdep/x86/Register.java	/^    public String toSource(SymbolTable table) {$/;"	m	class:Register
toString	asm/DirectMemoryReference.java	/^    public String toString() {$/;"	m	class:DirectMemoryReference
toString	asm/IndirectMemoryReference.java	/^    public String toString() {$/;"	m	class:IndirectMemoryReference
toString	asm/Instruction.java	/^    public String toString() {$/;"	m	class:Instruction
toString	asm/IntegerLiteral.java	/^    public String toString() {$/;"	m	class:IntegerLiteral
toString	asm/NamedSymbol.java	/^    public String toString() {$/;"	m	class:NamedSymbol
toString	asm/SuffixedSymbol.java	/^    public String toString() {$/;"	m	class:SuffixedSymbol
toString	asm/Symbol.java	/^    public String toString();$/;"	m	interface:Symbol
toString	asm/UnnamedSymbol.java	/^    public String toString() {$/;"	m	class:UnnamedSymbol
toString	ast/CflatToken.java	/^    public String toString() {$/;"	m	class:CflatToken
toString	ast/Location.java	/^    public String toString() {$/;"	m	class:Location
toString	compiler/LdArg.java	/^    String toString();$/;"	m	interface:LdArg
toString	compiler/LdOption.java	/^    public String toString() {$/;"	m	class:LdOption
toString	compiler/SourceFile.java	/^    public String toString() {$/;"	m	class:SourceFile
toString	type/ArrayType.java	/^    public String toString() {$/;"	m	class:ArrayType
toString	type/ArrayTypeRef.java	/^    public String toString() {$/;"	m	class:ArrayTypeRef
toString	type/FunctionType.java	/^    public String toString() {$/;"	m	class:FunctionType
toString	type/FunctionTypeRef.java	/^    public String toString() {$/;"	m	class:FunctionTypeRef
toString	type/IntegerType.java	/^    public String toString() {$/;"	m	class:IntegerType
toString	type/IntegerTypeRef.java	/^    public String toString() {$/;"	m	class:IntegerTypeRef
toString	type/PointerType.java	/^    public String toString() {$/;"	m	class:PointerType
toString	type/PointerTypeRef.java	/^    public String toString() {$/;"	m	class:PointerTypeRef
toString	type/StructType.java	/^    public String toString() {$/;"	m	class:StructType
toString	type/StructTypeRef.java	/^    public String toString() {$/;"	m	class:StructTypeRef
toString	type/UnionType.java	/^    public String toString() {$/;"	m	class:UnionType
toString	type/UnionTypeRef.java	/^    public String toString() {$/;"	m	class:UnionTypeRef
toString	type/UserType.java	/^    public String toString() {$/;"	m	class:UserType
toString	type/UserTypeRef.java	/^    public String toString() {$/;"	m	class:UserTypeRef
toString	type/VoidType.java	/^    public String toString() {$/;"	m	class:VoidType
toString	type/VoidTypeRef.java	/^    public String toString() {$/;"	m	class:VoidTypeRef
toString	utils/Cursor.java	/^    public String toString() {$/;"	m	class:Cursor
toUnsigned	utils/TextUtils.java	/^    static private int toUnsigned(byte b) {$/;"	m	class:TextUtils	file:
token	ast/CflatToken.java	/^    protected Token token;$/;"	f	class:CflatToken
token	ast/Location.java	/^    protected CflatToken token;$/;"	f	class:Location
token	ast/Location.java	/^    public CflatToken token() {$/;"	m	class:Location
tokensWithoutFirstSpecials	ast/CflatToken.java	/^    protected List<CflatToken> tokensWithoutFirstSpecials() {$/;"	m	class:CflatToken
top	sysdep/x86/AssemblyCode.java	/^        IndirectMemoryReference top() {$/;"	m	class:AssemblyCode.VirtualStack
toplevel	entity/LocalScope.java	/^    public ToplevelScope toplevel() {$/;"	m	class:LocalScope
toplevel	entity/Scope.java	/^    abstract public ToplevelScope toplevel();$/;"	m	class:Scope
toplevel	entity/ToplevelScope.java	/^    public ToplevelScope toplevel() {$/;"	m	class:ToplevelScope
transform	sysdep/x86/PeepholeOptimizer.java	/^        private InsnTransform transform;$/;"	f	class:PeepholeOptimizer.SingleInsnFilter	file:
transformExpr	compiler/IRGenerator.java	/^    private Expr transformExpr(ExprNode node) {$/;"	m	class:IRGenerator	file:
transformIndex	compiler/IRGenerator.java	/^    private Expr transformIndex(ArefNode node) {$/;"	m	class:IRGenerator	file:
transformOpAssign	compiler/IRGenerator.java	/^    private Expr transformOpAssign(Location loc,$/;"	m	class:IRGenerator	file:
transformStmt	compiler/IRGenerator.java	/^    private void transformStmt(ExprNode node) {$/;"	m	class:IRGenerator	file:
transformStmt	compiler/IRGenerator.java	/^    private void transformStmt(StmtNode node) {$/;"	m	class:IRGenerator	file:
type	ast/AbstractAssignNode.java	/^    public Type type() {$/;"	m	class:AbstractAssignNode
type	ast/AddressNode.java	/^    Type type;$/;"	f	class:AddressNode
type	ast/AddressNode.java	/^    public Type type() {$/;"	m	class:AddressNode
type	ast/BinaryOpNode.java	/^    protected Type type;$/;"	f	class:BinaryOpNode
type	ast/BinaryOpNode.java	/^    public Type type() {$/;"	m	class:BinaryOpNode
type	ast/CastNode.java	/^    public Type type() {$/;"	m	class:CastNode
type	ast/CondExprNode.java	/^    public Type type() {$/;"	m	class:CondExprNode
type	ast/ExprNode.java	/^    abstract public Type type();$/;"	m	class:ExprNode
type	ast/FuncallNode.java	/^    public Type type() {$/;"	m	class:FuncallNode
type	ast/LHSNode.java	/^    protected Type type, origType;$/;"	f	class:LHSNode
type	ast/LHSNode.java	/^    public Type type() {$/;"	m	class:LHSNode
type	ast/LiteralNode.java	/^    public Type type() {$/;"	m	class:LiteralNode
type	ast/SizeofExprNode.java	/^    protected TypeNode type;$/;"	f	class:SizeofExprNode
type	ast/SizeofExprNode.java	/^    public Type type() {$/;"	m	class:SizeofExprNode
type	ast/SizeofTypeNode.java	/^    protected TypeNode type;$/;"	f	class:SizeofTypeNode
type	ast/SizeofTypeNode.java	/^    public Type type() {$/;"	m	class:SizeofTypeNode
type	ast/Slot.java	/^    public Type type() {$/;"	m	class:Slot
type	ast/TypeDefinition.java	/^    public Type type() {$/;"	m	class:TypeDefinition
type	ast/TypeNode.java	/^    Type type;$/;"	f	class:TypeNode
type	ast/TypeNode.java	/^    public Type type() {$/;"	m	class:TypeNode
type	ast/UnaryOpNode.java	/^    public Type type() {$/;"	m	class:UnaryOpNode
type	entity/Constant.java	/^    private TypeNode type;$/;"	f	class:Constant	file:
type	entity/Entity.java	/^    public Type type() {$/;"	m	class:Entity
type	ir/Expr.java	/^    final Type type;$/;"	f	class:Expr
type	ir/Expr.java	/^    public Type type() { return type; }$/;"	m	class:Expr
type	ir/Var.java	/^    public Type type() {$/;"	m	class:Var
type	sysdep/x86/Register.java	/^    Type type;$/;"	f	class:Register
typeNode	ast/CastNode.java	/^    protected TypeNode typeNode;$/;"	f	class:CastNode
typeNode	ast/CastNode.java	/^    public TypeNode typeNode() {$/;"	m	class:CastNode
typeNode	ast/LiteralNode.java	/^    protected TypeNode typeNode;$/;"	f	class:LiteralNode
typeNode	ast/LiteralNode.java	/^    public TypeNode typeNode() {$/;"	m	class:LiteralNode
typeNode	ast/SizeofExprNode.java	/^    public TypeNode typeNode() {$/;"	m	class:SizeofExprNode
typeNode	ast/SizeofTypeNode.java	/^    public TypeNode typeNode() {$/;"	m	class:SizeofTypeNode
typeNode	ast/Slot.java	/^    protected TypeNode typeNode;$/;"	f	class:Slot
typeNode	ast/Slot.java	/^    public TypeNode typeNode() {$/;"	m	class:Slot
typeNode	ast/TypeDefinition.java	/^    protected TypeNode typeNode;$/;"	f	class:TypeDefinition
typeNode	ast/TypeDefinition.java	/^    public TypeNode typeNode() {$/;"	m	class:TypeDefinition
typeNode	ast/VariableNode.java	/^    public TypeNode typeNode() {$/;"	m	class:VariableNode
typeNode	entity/Entity.java	/^    protected TypeNode typeNode;$/;"	f	class:Entity
typeNode	entity/Entity.java	/^    public TypeNode typeNode() {$/;"	m	class:Entity
typeRef	ast/Slot.java	/^    public TypeRef typeRef() {$/;"	m	class:Slot
typeRef	ast/TypeDefinition.java	/^    public TypeRef typeRef() {$/;"	m	class:TypeDefinition
typeRef	ast/TypeNode.java	/^    TypeRef typeRef;$/;"	f	class:TypeNode
typeRef	ast/TypeNode.java	/^    public TypeRef typeRef() {$/;"	m	class:TypeNode
typeSuffix	sysdep/x86/AssemblyCode.java	/^    protected String typeSuffix(Type t) {$/;"	m	class:AssemblyCode
typeSuffix	sysdep/x86/AssemblyCode.java	/^    protected String typeSuffix(Type t1, Type t2) {$/;"	m	class:AssemblyCode
typeTable	compiler/DereferenceChecker.java	/^    private final TypeTable typeTable;$/;"	f	class:DereferenceChecker	file:
typeTable	compiler/IRGenerator.java	/^    private final TypeTable typeTable;$/;"	f	class:IRGenerator	file:
typeTable	compiler/Options.java	/^    TypeTable typeTable() {$/;"	m	class:Options
typeTable	compiler/TypeChecker.java	/^    private final TypeTable typeTable;$/;"	f	class:TypeChecker	file:
typeTable	compiler/TypeResolver.java	/^    private final TypeTable typeTable;$/;"	f	class:TypeResolver	file:
typeTable	sysdep/Platform.java	/^    TypeTable typeTable();$/;"	m	interface:Platform
typeTable	sysdep/X86Linux.java	/^    public TypeTable typeTable() {$/;"	m	class:X86Linux
typedName	sysdep/x86/Register.java	/^    private String typedName() {$/;"	m	class:Register	file:
typedefs	ast/Declarations.java	/^    Set<TypedefNode> typedefs = new LinkedHashSet<TypedefNode>();$/;"	f	class:Declarations
typedefs	ast/Declarations.java	/^    public List<TypedefNode> typedefs() {$/;"	m	class:Declarations
typerefs	type/ParamTypeRefs.java	/^    public List<TypeRef> typerefs() {$/;"	m	class:ParamTypeRefs
types	ast/AST.java	/^    public List<TypeDefinition> types() {$/;"	m	class:AST
types	type/ParamTypes.java	/^    public List<Type> types() {$/;"	m	class:ParamTypes
types	type/TypeTable.java	/^    public Collection<Type> types() {$/;"	m	class:TypeTable
ucharRef	type/IntegerTypeRef.java	/^    static public IntegerTypeRef ucharRef() {$/;"	m	class:IntegerTypeRef
ucharRef	type/IntegerTypeRef.java	/^    static public IntegerTypeRef ucharRef(Location loc) {$/;"	m	class:IntegerTypeRef
uintRef	type/IntegerTypeRef.java	/^    static public IntegerTypeRef uintRef() {$/;"	m	class:IntegerTypeRef
uintRef	type/IntegerTypeRef.java	/^    static public IntegerTypeRef uintRef(Location loc) {$/;"	m	class:IntegerTypeRef
ulongRef	type/IntegerTypeRef.java	/^    static public IntegerTypeRef ulongRef() {$/;"	m	class:IntegerTypeRef
ulongRef	type/IntegerTypeRef.java	/^    static public IntegerTypeRef ulongRef(Location loc) {$/;"	m	class:IntegerTypeRef
undefined	type/ArrayType.java	/^    static final protected long undefined = -1;$/;"	f	class:ArrayType
undefined	type/ArrayTypeRef.java	/^    static final protected long undefined = -1;$/;"	f	class:ArrayTypeRef
undereferableError	compiler/DereferenceChecker.java	/^    private void undereferableError(Location loc) {$/;"	m	class:DereferenceChecker	file:
unindent	ast/Dumper.java	/^    protected void unindent() { nIndent--; }$/;"	m	class:Dumper
unindent	ir/Dumper.java	/^    private void unindent() { numIndent--; }$/;"	m	class:Dumper	file:
unindentComment	sysdep/x86/AssemblyCode.java	/^    void unindentComment() {$/;"	m	class:AssemblyCode
unsignedChar	type/TypeTable.java	/^    public IntegerType unsignedChar() {$/;"	m	class:TypeTable
unsignedInt	type/TypeTable.java	/^    public IntegerType unsignedInt() {$/;"	m	class:TypeTable
unsignedLong	type/TypeTable.java	/^    public IntegerType unsignedLong() {$/;"	m	class:TypeTable
unsignedShort	type/TypeTable.java	/^    public IntegerType unsignedShort() {$/;"	m	class:TypeTable
unsignedStackType	type/TypeTable.java	/^    public Type unsignedStackType() {$/;"	m	class:TypeTable
usedCalleeSaveRegisters	sysdep/x86/CodeGenerator.java	/^    private List<Register> usedCalleeSaveRegisters(AssemblyCode body) {$/;"	m	class:CodeGenerator	file:
ushortRef	type/IntegerTypeRef.java	/^    static public IntegerTypeRef ushortRef() {$/;"	m	class:IntegerTypeRef
ushortRef	type/IntegerTypeRef.java	/^    static public IntegerTypeRef ushortRef(Location loc) {$/;"	m	class:IntegerTypeRef
usualArithmeticConversion	compiler/TypeChecker.java	/^    private Type usualArithmeticConversion(Type l, Type r) {$/;"	m	class:TypeChecker	file:
value	asm/DirectMemoryReference.java	/^    protected Literal value;$/;"	f	class:DirectMemoryReference
value	asm/DirectMemoryReference.java	/^    public Literal value() {$/;"	m	class:DirectMemoryReference
value	asm/IntegerLiteral.java	/^    protected long value;$/;"	f	class:IntegerLiteral
value	asm/IntegerLiteral.java	/^    public long value() {$/;"	m	class:IntegerLiteral
value	ast/IntegerLiteralNode.java	/^    protected long value;$/;"	f	class:IntegerLiteralNode
value	ast/IntegerLiteralNode.java	/^    public long value() {$/;"	m	class:IntegerLiteralNode
value	ast/StringLiteralNode.java	/^    protected String value;$/;"	f	class:StringLiteralNode
value	ast/StringLiteralNode.java	/^    public String value() {$/;"	m	class:StringLiteralNode
value	entity/Constant.java	/^    private ExprNode value;$/;"	f	class:Constant	file:
value	entity/Constant.java	/^    public ExprNode value() { return value; }$/;"	m	class:Constant
value	entity/ConstantEntry.java	/^    protected String value;$/;"	f	class:ConstantEntry
value	entity/ConstantEntry.java	/^    public String value() {$/;"	m	class:ConstantEntry
value	entity/Entity.java	/^    public ExprNode value() {$/;"	m	class:Entity
value	ir/Case.java	/^    public long value;$/;"	f	class:Case
value	ir/Int.java	/^    protected long value;$/;"	f	class:Int
value	ir/Int.java	/^    public long value() { return value; }$/;"	m	class:Int
values	ast/CaseNode.java	/^    protected List<ExprNode> values;$/;"	f	class:CaseNode
values	ast/CaseNode.java	/^    public List<ExprNode> values() {$/;"	m	class:CaseNode
varType	compiler/IRGenerator.java	/^    private net.loveruby.cflat.asm.Type varType(Type t) {$/;"	m	class:IRGenerator	file:
vararg	entity/ParamSlots.java	/^    protected boolean vararg;$/;"	f	class:ParamSlots
vardecls	ast/Declarations.java	/^    Set<UndefinedVariable> vardecls = new LinkedHashSet<UndefinedVariable>();$/;"	f	class:Declarations
vardecls	ast/Declarations.java	/^    public List<UndefinedVariable> vardecls() {$/;"	m	class:Declarations
variables	ast/BlockNode.java	/^    protected List<DefinedVariable> variables;$/;"	f	class:BlockNode
variables	ast/BlockNode.java	/^    public List<DefinedVariable> variables() {$/;"	m	class:BlockNode
variables	entity/LocalScope.java	/^    protected Map<String, DefinedVariable> variables;$/;"	f	class:LocalScope
verbose	compiler/Options.java	/^    private boolean verbose = false;$/;"	f	class:Options	file:
verbose	sysdep/AssemblerOptions.java	/^    public boolean verbose = false;$/;"	f	class:AssemblerOptions
verbose	sysdep/LinkerOptions.java	/^    public boolean verbose = false;$/;"	f	class:LinkerOptions
verbose	sysdep/x86/AssemblyCode.java	/^    final boolean verbose;$/;"	f	class:AssemblyCode
verboseAsm	sysdep/CodeGeneratorOptions.java	/^    protected boolean verboseAsm;$/;"	f	class:CodeGeneratorOptions
virtualPop	sysdep/x86/AssemblyCode.java	/^    void virtualPop(Register reg) {$/;"	m	class:AssemblyCode
virtualPush	sysdep/x86/AssemblyCode.java	/^    void virtualPush(Register reg) {$/;"	m	class:AssemblyCode
virtualStack	sysdep/x86/AssemblyCode.java	/^    final VirtualStack virtualStack = new VirtualStack();$/;"	f	class:AssemblyCode
visit	ast/ASTVisitor.java	/^    public E visit(AddressNode node);$/;"	m	interface:ASTVisitor
visit	ast/ASTVisitor.java	/^    public E visit(ArefNode node);$/;"	m	interface:ASTVisitor
visit	ast/ASTVisitor.java	/^    public E visit(AssignNode node);$/;"	m	interface:ASTVisitor
visit	ast/ASTVisitor.java	/^    public E visit(BinaryOpNode node);$/;"	m	interface:ASTVisitor
visit	ast/ASTVisitor.java	/^    public E visit(CastNode node);$/;"	m	interface:ASTVisitor
visit	ast/ASTVisitor.java	/^    public E visit(CondExprNode node);$/;"	m	interface:ASTVisitor
visit	ast/ASTVisitor.java	/^    public E visit(DereferenceNode node);$/;"	m	interface:ASTVisitor
visit	ast/ASTVisitor.java	/^    public E visit(FuncallNode node);$/;"	m	interface:ASTVisitor
visit	ast/ASTVisitor.java	/^    public E visit(IntegerLiteralNode node);$/;"	m	interface:ASTVisitor
visit	ast/ASTVisitor.java	/^    public E visit(LogicalAndNode node);$/;"	m	interface:ASTVisitor
visit	ast/ASTVisitor.java	/^    public E visit(LogicalOrNode node);$/;"	m	interface:ASTVisitor
visit	ast/ASTVisitor.java	/^    public E visit(MemberNode node);$/;"	m	interface:ASTVisitor
visit	ast/ASTVisitor.java	/^    public E visit(OpAssignNode node);$/;"	m	interface:ASTVisitor
visit	ast/ASTVisitor.java	/^    public E visit(PrefixOpNode node);$/;"	m	interface:ASTVisitor
visit	ast/ASTVisitor.java	/^    public E visit(PtrMemberNode node);$/;"	m	interface:ASTVisitor
visit	ast/ASTVisitor.java	/^    public E visit(SizeofExprNode node);$/;"	m	interface:ASTVisitor
visit	ast/ASTVisitor.java	/^    public E visit(SizeofTypeNode node);$/;"	m	interface:ASTVisitor
visit	ast/ASTVisitor.java	/^    public E visit(StringLiteralNode node);$/;"	m	interface:ASTVisitor
visit	ast/ASTVisitor.java	/^    public E visit(SuffixOpNode node);$/;"	m	interface:ASTVisitor
visit	ast/ASTVisitor.java	/^    public E visit(UnaryOpNode node);$/;"	m	interface:ASTVisitor
visit	ast/ASTVisitor.java	/^    public E visit(VariableNode node);$/;"	m	interface:ASTVisitor
visit	ast/ASTVisitor.java	/^    public S visit(BlockNode node);$/;"	m	interface:ASTVisitor
visit	ast/ASTVisitor.java	/^    public S visit(BreakNode node);$/;"	m	interface:ASTVisitor
visit	ast/ASTVisitor.java	/^    public S visit(CaseNode node);$/;"	m	interface:ASTVisitor
visit	ast/ASTVisitor.java	/^    public S visit(ContinueNode node);$/;"	m	interface:ASTVisitor
visit	ast/ASTVisitor.java	/^    public S visit(DoWhileNode node);$/;"	m	interface:ASTVisitor
visit	ast/ASTVisitor.java	/^    public S visit(ExprStmtNode node);$/;"	m	interface:ASTVisitor
visit	ast/ASTVisitor.java	/^    public S visit(ForNode node);$/;"	m	interface:ASTVisitor
visit	ast/ASTVisitor.java	/^    public S visit(GotoNode node);$/;"	m	interface:ASTVisitor
visit	ast/ASTVisitor.java	/^    public S visit(IfNode node);$/;"	m	interface:ASTVisitor
visit	ast/ASTVisitor.java	/^    public S visit(LabelNode node);$/;"	m	interface:ASTVisitor
visit	ast/ASTVisitor.java	/^    public S visit(ReturnNode node);$/;"	m	interface:ASTVisitor
visit	ast/ASTVisitor.java	/^    public S visit(SwitchNode node);$/;"	m	interface:ASTVisitor
visit	ast/ASTVisitor.java	/^    public S visit(WhileNode node);$/;"	m	interface:ASTVisitor
visit	ast/DeclarationVisitor.java	/^    public T visit(StructNode struct);$/;"	m	interface:DeclarationVisitor
visit	ast/DeclarationVisitor.java	/^    public T visit(TypedefNode typedef);$/;"	m	interface:DeclarationVisitor
visit	ast/DeclarationVisitor.java	/^    public T visit(UnionNode union);$/;"	m	interface:DeclarationVisitor
visit	compiler/DereferenceChecker.java	/^    public Void visit(AddressNode node) {$/;"	m	class:DereferenceChecker
visit	compiler/DereferenceChecker.java	/^    public Void visit(ArefNode node) {$/;"	m	class:DereferenceChecker
visit	compiler/DereferenceChecker.java	/^    public Void visit(AssignNode node) {$/;"	m	class:DereferenceChecker
visit	compiler/DereferenceChecker.java	/^    public Void visit(BlockNode node) {$/;"	m	class:DereferenceChecker
visit	compiler/DereferenceChecker.java	/^    public Void visit(CastNode node) {$/;"	m	class:DereferenceChecker
visit	compiler/DereferenceChecker.java	/^    public Void visit(DereferenceNode node) {$/;"	m	class:DereferenceChecker
visit	compiler/DereferenceChecker.java	/^    public Void visit(FuncallNode node) {$/;"	m	class:DereferenceChecker
visit	compiler/DereferenceChecker.java	/^    public Void visit(MemberNode node) {$/;"	m	class:DereferenceChecker
visit	compiler/DereferenceChecker.java	/^    public Void visit(OpAssignNode node) {$/;"	m	class:DereferenceChecker
visit	compiler/DereferenceChecker.java	/^    public Void visit(PrefixOpNode node) {$/;"	m	class:DereferenceChecker
visit	compiler/DereferenceChecker.java	/^    public Void visit(PtrMemberNode node) {$/;"	m	class:DereferenceChecker
visit	compiler/DereferenceChecker.java	/^    public Void visit(SuffixOpNode node) {$/;"	m	class:DereferenceChecker
visit	compiler/DereferenceChecker.java	/^    public Void visit(VariableNode node) {$/;"	m	class:DereferenceChecker
visit	compiler/IRGenerator.java	/^    public Expr visit(AddressNode node) {$/;"	m	class:IRGenerator
visit	compiler/IRGenerator.java	/^    public Expr visit(ArefNode node) {$/;"	m	class:IRGenerator
visit	compiler/IRGenerator.java	/^    public Expr visit(AssignNode node) {$/;"	m	class:IRGenerator
visit	compiler/IRGenerator.java	/^    public Expr visit(BinaryOpNode node) {$/;"	m	class:IRGenerator
visit	compiler/IRGenerator.java	/^    public Expr visit(CastNode node) {$/;"	m	class:IRGenerator
visit	compiler/IRGenerator.java	/^    public Expr visit(CondExprNode node) {$/;"	m	class:IRGenerator
visit	compiler/IRGenerator.java	/^    public Expr visit(DereferenceNode node) {$/;"	m	class:IRGenerator
visit	compiler/IRGenerator.java	/^    public Expr visit(FuncallNode node) {$/;"	m	class:IRGenerator
visit	compiler/IRGenerator.java	/^    public Expr visit(IntegerLiteralNode node) {$/;"	m	class:IRGenerator
visit	compiler/IRGenerator.java	/^    public Expr visit(LogicalAndNode node) {$/;"	m	class:IRGenerator
visit	compiler/IRGenerator.java	/^    public Expr visit(LogicalOrNode node) {$/;"	m	class:IRGenerator
visit	compiler/IRGenerator.java	/^    public Expr visit(MemberNode node) {$/;"	m	class:IRGenerator
visit	compiler/IRGenerator.java	/^    public Expr visit(OpAssignNode node) {$/;"	m	class:IRGenerator
visit	compiler/IRGenerator.java	/^    public Expr visit(PrefixOpNode node) {$/;"	m	class:IRGenerator
visit	compiler/IRGenerator.java	/^    public Expr visit(PtrMemberNode node) {$/;"	m	class:IRGenerator
visit	compiler/IRGenerator.java	/^    public Expr visit(SizeofExprNode node) {$/;"	m	class:IRGenerator
visit	compiler/IRGenerator.java	/^    public Expr visit(SizeofTypeNode node) {$/;"	m	class:IRGenerator
visit	compiler/IRGenerator.java	/^    public Expr visit(StringLiteralNode node) {$/;"	m	class:IRGenerator
visit	compiler/IRGenerator.java	/^    public Expr visit(SuffixOpNode node) {$/;"	m	class:IRGenerator
visit	compiler/IRGenerator.java	/^    public Expr visit(UnaryOpNode node) {$/;"	m	class:IRGenerator
visit	compiler/IRGenerator.java	/^    public Expr visit(VariableNode node) {$/;"	m	class:IRGenerator
visit	compiler/IRGenerator.java	/^    public Void visit(BlockNode node) {$/;"	m	class:IRGenerator
visit	compiler/IRGenerator.java	/^    public Void visit(BreakNode node) {$/;"	m	class:IRGenerator
visit	compiler/IRGenerator.java	/^    public Void visit(CaseNode node) {$/;"	m	class:IRGenerator
visit	compiler/IRGenerator.java	/^    public Void visit(ContinueNode node) {$/;"	m	class:IRGenerator
visit	compiler/IRGenerator.java	/^    public Void visit(DoWhileNode node) {$/;"	m	class:IRGenerator
visit	compiler/IRGenerator.java	/^    public Void visit(ExprStmtNode node) {$/;"	m	class:IRGenerator
visit	compiler/IRGenerator.java	/^    public Void visit(ForNode node) {$/;"	m	class:IRGenerator
visit	compiler/IRGenerator.java	/^    public Void visit(GotoNode node) {$/;"	m	class:IRGenerator
visit	compiler/IRGenerator.java	/^    public Void visit(IfNode node) {$/;"	m	class:IRGenerator
visit	compiler/IRGenerator.java	/^    public Void visit(LabelNode node) {$/;"	m	class:IRGenerator
visit	compiler/IRGenerator.java	/^    public Void visit(ReturnNode node) {$/;"	m	class:IRGenerator
visit	compiler/IRGenerator.java	/^    public Void visit(SwitchNode node) {$/;"	m	class:IRGenerator
visit	compiler/IRGenerator.java	/^    public Void visit(WhileNode node) {$/;"	m	class:IRGenerator
visit	compiler/LocalResolver.java	/^    public Void visit(BlockNode node) {$/;"	m	class:LocalResolver
visit	compiler/LocalResolver.java	/^    public Void visit(StringLiteralNode node) {$/;"	m	class:LocalResolver
visit	compiler/LocalResolver.java	/^    public Void visit(VariableNode node) {$/;"	m	class:LocalResolver
visit	compiler/TypeChecker.java	/^    public Void visit(ArefNode node) {$/;"	m	class:TypeChecker
visit	compiler/TypeChecker.java	/^    public Void visit(AssignNode node) {$/;"	m	class:TypeChecker
visit	compiler/TypeChecker.java	/^    public Void visit(BinaryOpNode node) {$/;"	m	class:TypeChecker
visit	compiler/TypeChecker.java	/^    public Void visit(BlockNode node) {$/;"	m	class:TypeChecker
visit	compiler/TypeChecker.java	/^    public Void visit(CastNode node) {$/;"	m	class:TypeChecker
visit	compiler/TypeChecker.java	/^    public Void visit(CondExprNode node) {$/;"	m	class:TypeChecker
visit	compiler/TypeChecker.java	/^    public Void visit(ExprStmtNode node) {$/;"	m	class:TypeChecker
visit	compiler/TypeChecker.java	/^    public Void visit(ForNode node) {$/;"	m	class:TypeChecker
visit	compiler/TypeChecker.java	/^    public Void visit(FuncallNode node) {$/;"	m	class:TypeChecker
visit	compiler/TypeChecker.java	/^    public Void visit(IfNode node) {$/;"	m	class:TypeChecker
visit	compiler/TypeChecker.java	/^    public Void visit(LogicalAndNode node) {$/;"	m	class:TypeChecker
visit	compiler/TypeChecker.java	/^    public Void visit(LogicalOrNode node) {$/;"	m	class:TypeChecker
visit	compiler/TypeChecker.java	/^    public Void visit(OpAssignNode node) {$/;"	m	class:TypeChecker
visit	compiler/TypeChecker.java	/^    public Void visit(PrefixOpNode node) {$/;"	m	class:TypeChecker
visit	compiler/TypeChecker.java	/^    public Void visit(ReturnNode node) {$/;"	m	class:TypeChecker
visit	compiler/TypeChecker.java	/^    public Void visit(SuffixOpNode node) {$/;"	m	class:TypeChecker
visit	compiler/TypeChecker.java	/^    public Void visit(SwitchNode node) {$/;"	m	class:TypeChecker
visit	compiler/TypeChecker.java	/^    public Void visit(UnaryOpNode node) {$/;"	m	class:TypeChecker
visit	compiler/TypeChecker.java	/^    public Void visit(WhileNode node) {$/;"	m	class:TypeChecker
visit	compiler/TypeResolver.java	/^    public Void visit(BlockNode node) {$/;"	m	class:TypeResolver
visit	compiler/TypeResolver.java	/^    public Void visit(CastNode node) {$/;"	m	class:TypeResolver
visit	compiler/TypeResolver.java	/^    public Void visit(Constant c) {$/;"	m	class:TypeResolver
visit	compiler/TypeResolver.java	/^    public Void visit(DefinedFunction func) {$/;"	m	class:TypeResolver
visit	compiler/TypeResolver.java	/^    public Void visit(DefinedVariable var) {$/;"	m	class:TypeResolver
visit	compiler/TypeResolver.java	/^    public Void visit(IntegerLiteralNode node) {$/;"	m	class:TypeResolver
visit	compiler/TypeResolver.java	/^    public Void visit(SizeofExprNode node) {$/;"	m	class:TypeResolver
visit	compiler/TypeResolver.java	/^    public Void visit(SizeofTypeNode node) {$/;"	m	class:TypeResolver
visit	compiler/TypeResolver.java	/^    public Void visit(StringLiteralNode node) {$/;"	m	class:TypeResolver
visit	compiler/TypeResolver.java	/^    public Void visit(StructNode struct) {$/;"	m	class:TypeResolver
visit	compiler/TypeResolver.java	/^    public Void visit(TypedefNode typedef) {$/;"	m	class:TypeResolver
visit	compiler/TypeResolver.java	/^    public Void visit(UndefinedFunction func) {$/;"	m	class:TypeResolver
visit	compiler/TypeResolver.java	/^    public Void visit(UndefinedVariable var) {$/;"	m	class:TypeResolver
visit	compiler/TypeResolver.java	/^    public Void visit(UnionNode union) {$/;"	m	class:TypeResolver
visit	compiler/Visitor.java	/^    public Void visit(AddressNode node) {$/;"	m	class:Visitor
visit	compiler/Visitor.java	/^    public Void visit(ArefNode node) {$/;"	m	class:Visitor
visit	compiler/Visitor.java	/^    public Void visit(AssignNode n) {$/;"	m	class:Visitor
visit	compiler/Visitor.java	/^    public Void visit(BinaryOpNode n) {$/;"	m	class:Visitor
visit	compiler/Visitor.java	/^    public Void visit(BlockNode node) {$/;"	m	class:Visitor
visit	compiler/Visitor.java	/^    public Void visit(BreakNode n) {$/;"	m	class:Visitor
visit	compiler/Visitor.java	/^    public Void visit(CaseNode n) {$/;"	m	class:Visitor
visit	compiler/Visitor.java	/^    public Void visit(CastNode node) {$/;"	m	class:Visitor
visit	compiler/Visitor.java	/^    public Void visit(CondExprNode n) {$/;"	m	class:Visitor
visit	compiler/Visitor.java	/^    public Void visit(ContinueNode n) {$/;"	m	class:Visitor
visit	compiler/Visitor.java	/^    public Void visit(DereferenceNode node) {$/;"	m	class:Visitor
visit	compiler/Visitor.java	/^    public Void visit(DoWhileNode n) {$/;"	m	class:Visitor
visit	compiler/Visitor.java	/^    public Void visit(ExprStmtNode node) {$/;"	m	class:Visitor
visit	compiler/Visitor.java	/^    public Void visit(ForNode n) {$/;"	m	class:Visitor
visit	compiler/Visitor.java	/^    public Void visit(FuncallNode node) {$/;"	m	class:Visitor
visit	compiler/Visitor.java	/^    public Void visit(GotoNode n) {$/;"	m	class:Visitor
visit	compiler/Visitor.java	/^    public Void visit(IfNode n) {$/;"	m	class:Visitor
visit	compiler/Visitor.java	/^    public Void visit(IntegerLiteralNode node) {$/;"	m	class:Visitor
visit	compiler/Visitor.java	/^    public Void visit(LabelNode n) {$/;"	m	class:Visitor
visit	compiler/Visitor.java	/^    public Void visit(LogicalAndNode node) {$/;"	m	class:Visitor
visit	compiler/Visitor.java	/^    public Void visit(LogicalOrNode node) {$/;"	m	class:Visitor
visit	compiler/Visitor.java	/^    public Void visit(MemberNode node) {$/;"	m	class:Visitor
visit	compiler/Visitor.java	/^    public Void visit(OpAssignNode n) {$/;"	m	class:Visitor
visit	compiler/Visitor.java	/^    public Void visit(PrefixOpNode node) {$/;"	m	class:Visitor
visit	compiler/Visitor.java	/^    public Void visit(PtrMemberNode node) {$/;"	m	class:Visitor
visit	compiler/Visitor.java	/^    public Void visit(ReturnNode n) {$/;"	m	class:Visitor
visit	compiler/Visitor.java	/^    public Void visit(SizeofExprNode node) {$/;"	m	class:Visitor
visit	compiler/Visitor.java	/^    public Void visit(SizeofTypeNode node) {$/;"	m	class:Visitor
visit	compiler/Visitor.java	/^    public Void visit(StringLiteralNode node) {$/;"	m	class:Visitor
visit	compiler/Visitor.java	/^    public Void visit(SuffixOpNode node) {$/;"	m	class:Visitor
visit	compiler/Visitor.java	/^    public Void visit(SwitchNode n) {$/;"	m	class:Visitor
visit	compiler/Visitor.java	/^    public Void visit(UnaryOpNode node) {$/;"	m	class:Visitor
visit	compiler/Visitor.java	/^    public Void visit(VariableNode node) {$/;"	m	class:Visitor
visit	compiler/Visitor.java	/^    public Void visit(WhileNode n) {$/;"	m	class:Visitor
visit	entity/EntityVisitor.java	/^    public T visit(Constant c);$/;"	m	interface:EntityVisitor
visit	entity/EntityVisitor.java	/^    public T visit(DefinedFunction func);$/;"	m	interface:EntityVisitor
visit	entity/EntityVisitor.java	/^    public T visit(DefinedVariable var);$/;"	m	interface:EntityVisitor
visit	entity/EntityVisitor.java	/^    public T visit(UndefinedFunction func);$/;"	m	interface:EntityVisitor
visit	entity/EntityVisitor.java	/^    public T visit(UndefinedVariable var);$/;"	m	interface:EntityVisitor
visit	ir/IRVisitor.java	/^    public E visit(Addr s);$/;"	m	interface:IRVisitor
visit	ir/IRVisitor.java	/^    public E visit(Bin s);$/;"	m	interface:IRVisitor
visit	ir/IRVisitor.java	/^    public E visit(Call s);$/;"	m	interface:IRVisitor
visit	ir/IRVisitor.java	/^    public E visit(Int s);$/;"	m	interface:IRVisitor
visit	ir/IRVisitor.java	/^    public E visit(Mem s);$/;"	m	interface:IRVisitor
visit	ir/IRVisitor.java	/^    public E visit(Str s);$/;"	m	interface:IRVisitor
visit	ir/IRVisitor.java	/^    public E visit(Uni s);$/;"	m	interface:IRVisitor
visit	ir/IRVisitor.java	/^    public E visit(Var s);$/;"	m	interface:IRVisitor
visit	ir/IRVisitor.java	/^    public S visit(Assign s);$/;"	m	interface:IRVisitor
visit	ir/IRVisitor.java	/^    public S visit(CJump s);$/;"	m	interface:IRVisitor
visit	ir/IRVisitor.java	/^    public S visit(ExprStmt s);$/;"	m	interface:IRVisitor
visit	ir/IRVisitor.java	/^    public S visit(Jump s);$/;"	m	interface:IRVisitor
visit	ir/IRVisitor.java	/^    public S visit(LabelStmt s);$/;"	m	interface:IRVisitor
visit	ir/IRVisitor.java	/^    public S visit(Return s);$/;"	m	interface:IRVisitor
visit	ir/IRVisitor.java	/^    public S visit(Switch s);$/;"	m	interface:IRVisitor
visit	sysdep/x86/CodeGenerator.java	/^    public Void visit(Addr node) {$/;"	m	class:CodeGenerator
visit	sysdep/x86/CodeGenerator.java	/^    public Void visit(Assign node) {$/;"	m	class:CodeGenerator
visit	sysdep/x86/CodeGenerator.java	/^    public Void visit(Bin node) {$/;"	m	class:CodeGenerator
visit	sysdep/x86/CodeGenerator.java	/^    public Void visit(CJump node) {$/;"	m	class:CodeGenerator
visit	sysdep/x86/CodeGenerator.java	/^    public Void visit(Call node) {$/;"	m	class:CodeGenerator
visit	sysdep/x86/CodeGenerator.java	/^    public Void visit(ExprStmt stmt) {$/;"	m	class:CodeGenerator
visit	sysdep/x86/CodeGenerator.java	/^    public Void visit(Int node) {$/;"	m	class:CodeGenerator
visit	sysdep/x86/CodeGenerator.java	/^    public Void visit(Jump node) {$/;"	m	class:CodeGenerator
visit	sysdep/x86/CodeGenerator.java	/^    public Void visit(LabelStmt node) {$/;"	m	class:CodeGenerator
visit	sysdep/x86/CodeGenerator.java	/^    public Void visit(Mem node) {$/;"	m	class:CodeGenerator
visit	sysdep/x86/CodeGenerator.java	/^    public Void visit(Return node) {$/;"	m	class:CodeGenerator
visit	sysdep/x86/CodeGenerator.java	/^    public Void visit(Str node) {$/;"	m	class:CodeGenerator
visit	sysdep/x86/CodeGenerator.java	/^    public Void visit(Switch node) {$/;"	m	class:CodeGenerator
visit	sysdep/x86/CodeGenerator.java	/^    public Void visit(Uni node) {$/;"	m	class:CodeGenerator
visit	sysdep/x86/CodeGenerator.java	/^    public Void visit(Var node) {$/;"	m	class:CodeGenerator
visitExpr	compiler/Visitor.java	/^    protected void visitExpr(ExprNode expr) {$/;"	m	class:Visitor
visitExprs	compiler/Visitor.java	/^    protected void visitExprs(List<? extends ExprNode> exprs) {$/;"	m	class:Visitor
visitStmt	compiler/Visitor.java	/^    protected void visitStmt(StmtNode stmt) {$/;"	m	class:Visitor
visitStmts	compiler/Visitor.java	/^    protected void visitStmts(List<? extends StmtNode> stmts) {$/;"	m	class:Visitor
voidType	type/TypeTable.java	/^    public VoidType voidType() {$/;"	m	class:TypeTable
vtab	utils/TextUtils.java	/^    static final private byte vtab = 013;$/;"	f	class:TextUtils	file:
warn	compiler/TypeChecker.java	/^    private void warn(Node n, String msg) {$/;"	m	class:TypeChecker	file:
warn	utils/ErrorHandler.java	/^    public void warn(Location loc, String msg) {$/;"	m	class:ErrorHandler
warn	utils/ErrorHandler.java	/^    public void warn(String msg) {$/;"	m	class:ErrorHandler
writeFile	compiler/Compiler.java	/^    private void writeFile(String path, String str) throws FileException {$/;"	m	class:Compiler	file:
wrongTypeError	compiler/TypeChecker.java	/^    private void wrongTypeError(ExprNode expr, String op) {$/;"	m	class:TypeChecker	file:
xor	sysdep/x86/AssemblyCode.java	/^    void xor(Operand bits, Register base) {$/;"	m	class:AssemblyCode
