!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Assemble	CompilerMode.java	/^    Assemble ("-c"),$/;"	e	enum:CompilerMode	file:
CheckSyntax	CompilerMode.java	/^    CheckSyntax ("--check-syntax"),$/;"	e	enum:CompilerMode	file:
Compile	CompilerMode.java	/^    Compile ("-S"),$/;"	e	enum:CompilerMode	file:
Compiler	Compiler.java	/^    public Compiler(String programName) {$/;"	m	class:Compiler
Compiler	Compiler.java	/^public class Compiler {$/;"	c
CompilerMode	CompilerMode.java	/^    CompilerMode(String option) {$/;"	m	class:CompilerMode
CompilerMode	CompilerMode.java	/^enum CompilerMode {$/;"	g
DEFAULT_LINKER_OUTPUT	Options.java	/^    static private final String DEFAULT_LINKER_OUTPUT = "a.out";$/;"	f	class:Options	file:
DereferenceChecker	DereferenceChecker.java	/^    public DereferenceChecker(TypeTable typeTable, ErrorHandler h) {$/;"	m	class:DereferenceChecker
DereferenceChecker	DereferenceChecker.java	/^class DereferenceChecker extends Visitor {$/;"	c
DumpAST	CompilerMode.java	/^    DumpAST ("--dump-ast"),$/;"	e	enum:CompilerMode	file:
DumpAsm	CompilerMode.java	/^    DumpAsm ("--dump-asm"),$/;"	e	enum:CompilerMode	file:
DumpExpr	CompilerMode.java	/^    DumpExpr ("--dump-expr"),$/;"	e	enum:CompilerMode	file:
DumpIR	CompilerMode.java	/^    DumpIR ("--dump-ir"),$/;"	e	enum:CompilerMode	file:
DumpReference	CompilerMode.java	/^    DumpReference ("--dump-reference"),$/;"	e	enum:CompilerMode	file:
DumpSemantic	CompilerMode.java	/^    DumpSemantic ("--dump-semantic"),$/;"	e	enum:CompilerMode	file:
DumpStmt	CompilerMode.java	/^    DumpStmt ("--dump-stmt"),$/;"	e	enum:CompilerMode	file:
DumpTokens	CompilerMode.java	/^    DumpTokens ("--dump-tokens"),$/;"	e	enum:CompilerMode	file:
EXT_ASSEMBLY_SOURCE	SourceFile.java	/^    static final String EXT_ASSEMBLY_SOURCE = ".s";$/;"	f	class:SourceFile
EXT_CFLAT_SOURCE	SourceFile.java	/^    static final String EXT_CFLAT_SOURCE = ".cb";$/;"	f	class:SourceFile
EXT_EXECUTABLE_FILE	SourceFile.java	/^    static final String EXT_EXECUTABLE_FILE = "";$/;"	f	class:SourceFile
EXT_OBJECT_FILE	SourceFile.java	/^    static final String EXT_OBJECT_FILE = ".o";$/;"	f	class:SourceFile
EXT_SHARED_LIBRARY	SourceFile.java	/^    static final String EXT_SHARED_LIBRARY = ".so";$/;"	f	class:SourceFile
EXT_STATIC_LIBRARY	SourceFile.java	/^    static final String EXT_STATIC_LIBRARY = ".a";$/;"	f	class:SourceFile
IRGenerator	IRGenerator.java	/^    public IRGenerator(TypeTable typeTable, ErrorHandler errorHandler) {$/;"	m	class:IRGenerator
IRGenerator	IRGenerator.java	/^class IRGenerator implements ASTVisitor<Void, Expr> {$/;"	c
JumpEntry	IRGenerator.java	/^        public JumpEntry(Label label) {$/;"	m	class:IRGenerator.JumpEntry
JumpEntry	IRGenerator.java	/^    class JumpEntry {$/;"	c	class:IRGenerator
KNOWN_EXTENSIONS	SourceFile.java	/^    static final String[] KNOWN_EXTENSIONS = {$/;"	f	class:SourceFile
LdArg	LdArg.java	/^interface LdArg {$/;"	i
LdOption	LdOption.java	/^    LdOption(String arg) {$/;"	m	class:LdOption
LdOption	LdOption.java	/^class LdOption implements LdArg {$/;"	c
Link	CompilerMode.java	/^    Link ("--link");$/;"	e	enum:CompilerMode	file:
LocalResolver	LocalResolver.java	/^    public LocalResolver(ErrorHandler h) {$/;"	m	class:LocalResolver
LocalResolver	LocalResolver.java	/^public class LocalResolver extends Visitor {$/;"	c
Options	Options.java	/^class Options {$/;"	c
PrintAsm	CompilerMode.java	/^    PrintAsm ("--print-asm"),$/;"	e	enum:CompilerMode	file:
ProgramName	Compiler.java	/^    static final public String ProgramName = "cbc";$/;"	f	class:Compiler
SourceFile	SourceFile.java	/^    SourceFile(String name) {$/;"	m	class:SourceFile
SourceFile	SourceFile.java	/^class SourceFile implements LdArg {$/;"	c
TypeChecker	TypeChecker.java	/^    public TypeChecker(TypeTable typeTable, ErrorHandler errorHandler) {$/;"	m	class:TypeChecker
TypeChecker	TypeChecker.java	/^class TypeChecker extends Visitor {$/;"	c
TypeResolver	TypeResolver.java	/^    public TypeResolver(TypeTable typeTable, ErrorHandler errorHandler) {$/;"	m	class:TypeResolver
TypeResolver	TypeResolver.java	/^public class TypeResolver extends Visitor$/;"	c
Version	Compiler.java	/^    static final public String Version = "1.0.0";$/;"	f	class:Compiler
Visitor	Visitor.java	/^    public Visitor() {$/;"	m	class:Visitor
Visitor	Visitor.java	/^abstract public class Visitor implements ASTVisitor<Void, Void> {$/;"	c
addLdArg	Options.java	/^    private void addLdArg(String arg) {$/;"	m	class:Options	file:
addressOf	IRGenerator.java	/^    private Expr addressOf(Expr expr) {$/;"	m	class:IRGenerator	file:
arg	LdOption.java	/^    private final String arg;$/;"	f	class:LdOption	file:
arithmeticImplicitCast	TypeChecker.java	/^    private void arithmeticImplicitCast(BinaryOpNode node) {$/;"	m	class:TypeChecker	file:
asOptions	Options.java	/^    AssemblerOptions asOptions() {$/;"	m	class:Options
asOptions	Options.java	/^    private AssemblerOptions asOptions = new AssemblerOptions();$/;"	f	class:Options	file:
asmFileName	SourceFile.java	/^    String asmFileName() {$/;"	m	class:SourceFile
asmFileNameOf	Options.java	/^    String asmFileNameOf(SourceFile src) {$/;"	m	class:Options
asmType	IRGenerator.java	/^    private net.loveruby.cflat.asm.Type asmType(Type t) {$/;"	m	class:IRGenerator	file:
assemble	Compiler.java	/^    public void assemble(String srcPath, String destPath,$/;"	m	class:Compiler
assembler	Options.java	/^    Assembler assembler(ErrorHandler h) {$/;"	m	class:Options
assign	IRGenerator.java	/^    private void assign(Location loc, Expr lhs, Expr rhs) {$/;"	m	class:IRGenerator	file:
baseName	SourceFile.java	/^    private String baseName(String path) {$/;"	m	class:SourceFile	file:
baseName	SourceFile.java	/^    private String baseName(String path, boolean stripExt) {$/;"	m	class:SourceFile	file:
bin	IRGenerator.java	/^    private Bin bin(Op op, Type leftType, Expr left, Expr right) {$/;"	m	class:IRGenerator	file:
binOp	IRGenerator.java	/^    private Op binOp(String uniOp) {$/;"	m	class:IRGenerator	file:
bindType	TypeResolver.java	/^    private void bindType(TypeNode n) {$/;"	m	class:TypeResolver	file:
breakStack	IRGenerator.java	/^    LinkedList<Label> breakStack;$/;"	f	class:IRGenerator
build	Compiler.java	/^    public void build(List<SourceFile> srcs, Options opts)$/;"	m	class:Compiler
castOptionalArg	TypeChecker.java	/^    private ExprNode castOptionalArg(ExprNode arg) {$/;"	m	class:TypeChecker	file:
check	DereferenceChecker.java	/^    private void check(ExprNode node) {$/;"	m	class:DereferenceChecker	file:
check	DereferenceChecker.java	/^    private void check(StmtNode node) {$/;"	m	class:DereferenceChecker	file:
check	DereferenceChecker.java	/^    public void check(AST ast) throws SemanticException {$/;"	m	class:DereferenceChecker
check	TypeChecker.java	/^    private void check(ExprNode node) {$/;"	m	class:TypeChecker	file:
check	TypeChecker.java	/^    private void check(StmtNode node) {$/;"	m	class:TypeChecker	file:
check	TypeChecker.java	/^    public void check(AST ast) throws SemanticException {$/;"	m	class:TypeChecker
checkAssignment	DereferenceChecker.java	/^    private void checkAssignment(AbstractAssignNode node) {$/;"	m	class:DereferenceChecker	file:
checkCond	TypeChecker.java	/^    private void checkCond(ExprNode cond) {$/;"	m	class:TypeChecker	file:
checkConstant	DereferenceChecker.java	/^    private void checkConstant(ExprNode expr) {$/;"	m	class:DereferenceChecker	file:
checkJumpLinks	IRGenerator.java	/^    private void checkJumpLinks(Map<String, JumpEntry> jumpMap) {$/;"	m	class:IRGenerator	file:
checkLHS	TypeChecker.java	/^    private boolean checkLHS(ExprNode lhs) {$/;"	m	class:TypeChecker	file:
checkMemberRef	DereferenceChecker.java	/^    private void checkMemberRef(Location loc, Type t, String memb) {$/;"	m	class:DereferenceChecker	file:
checkParamTypes	TypeChecker.java	/^    private void checkParamTypes(DefinedFunction f) {$/;"	m	class:TypeChecker	file:
checkRHS	TypeChecker.java	/^    private boolean checkRHS(ExprNode rhs) {$/;"	m	class:TypeChecker	file:
checkReturnType	TypeChecker.java	/^    private void checkReturnType(DefinedFunction f) {$/;"	m	class:TypeChecker	file:
checkSyntax	Compiler.java	/^    private boolean checkSyntax(Options opts) {$/;"	m	class:Compiler	file:
checkToplevelVariable	DereferenceChecker.java	/^    private void checkToplevelVariable(DefinedVariable var) {$/;"	m	class:DereferenceChecker	file:
checkVariable	DereferenceChecker.java	/^    private void checkVariable(DefinedVariable var) {$/;"	m	class:DereferenceChecker	file:
checkVariable	TypeChecker.java	/^    private void checkVariable(DefinedVariable var) {$/;"	m	class:TypeChecker	file:
cjump	IRGenerator.java	/^    private void cjump(Location loc, Expr cond, Label thenLabel, Label elseLabel) {$/;"	m	class:IRGenerator	file:
codeGenerator	Options.java	/^    CodeGenerator codeGenerator(ErrorHandler h) {$/;"	m	class:Options
commandMain	Compiler.java	/^    public void commandMain(String[] args) {$/;"	m	class:Compiler
compile	Compiler.java	/^    public void compile(String srcPath, String destPath,$/;"	m	class:Compiler
compileFunctionBody	IRGenerator.java	/^    public List<Stmt> compileFunctionBody(DefinedFunction f) {$/;"	m	class:IRGenerator
constantTable	LocalResolver.java	/^    private final ConstantTable constantTable;$/;"	f	class:LocalResolver	file:
continueStack	IRGenerator.java	/^    LinkedList<Label> continueStack;$/;"	f	class:IRGenerator
currentBreakTarget	IRGenerator.java	/^    private Label currentBreakTarget() {$/;"	m	class:IRGenerator	file:
currentContinueTarget	IRGenerator.java	/^    private Label currentContinueTarget() {$/;"	m	class:IRGenerator	file:
currentFunction	TypeChecker.java	/^    DefinedFunction currentFunction;$/;"	f	class:TypeChecker
currentName	SourceFile.java	/^    String currentName() {$/;"	m	class:SourceFile
currentName	SourceFile.java	/^    private String currentName;$/;"	f	class:SourceFile	file:
currentScope	LocalResolver.java	/^    private Scope currentScope() {$/;"	m	class:LocalResolver	file:
debugParser	Options.java	/^    private boolean debugParser = false;$/;"	f	class:Options	file:
defineLabel	IRGenerator.java	/^    private Label defineLabel(String name, Location loc)$/;"	m	class:IRGenerator	file:
defineTypes	TypeResolver.java	/^    private void defineTypes(List<TypeDefinition> deftypes) {$/;"	m	class:TypeResolver	file:
doesDebugParser	Options.java	/^    boolean doesDebugParser() {$/;"	m	class:Options
dumpAST	Compiler.java	/^    private boolean dumpAST(AST ast, CompilerMode mode) {$/;"	m	class:Compiler	file:
dumpAsm	Compiler.java	/^    private boolean dumpAsm(AssemblyCode asm, CompilerMode mode) {$/;"	m	class:Compiler	file:
dumpIR	Compiler.java	/^    private boolean dumpIR(IR ir, CompilerMode mode) {$/;"	m	class:Compiler	file:
dumpSemant	Compiler.java	/^    private boolean dumpSemant(AST ast, CompilerMode mode) {$/;"	m	class:Compiler	file:
error	IRGenerator.java	/^    private void error(Node n, String msg) {$/;"	m	class:IRGenerator	file:
error	LocalResolver.java	/^    private void error(Location loc, String message) {$/;"	m	class:LocalResolver	file:
error	LocalResolver.java	/^    private void error(Node node, String message) {$/;"	m	class:LocalResolver	file:
error	TypeChecker.java	/^    private void error(Location loc, String msg) {$/;"	m	class:TypeChecker	file:
error	TypeChecker.java	/^    private void error(Node n, String msg) {$/;"	m	class:TypeChecker	file:
error	TypeResolver.java	/^    private void error(Node node, String msg) {$/;"	m	class:TypeResolver	file:
errorExit	Compiler.java	/^    private void errorExit(String msg) {$/;"	m	class:Compiler	file:
errorHandler	Compiler.java	/^    private final ErrorHandler errorHandler;$/;"	f	class:Compiler	file:
errorHandler	DereferenceChecker.java	/^    private final ErrorHandler errorHandler;$/;"	f	class:DereferenceChecker	file:
errorHandler	IRGenerator.java	/^    private final ErrorHandler errorHandler;$/;"	f	class:IRGenerator	file:
errorHandler	LocalResolver.java	/^    private final ErrorHandler errorHandler;$/;"	f	class:LocalResolver	file:
errorHandler	TypeChecker.java	/^    private final ErrorHandler errorHandler;$/;"	f	class:TypeChecker	file:
errorHandler	TypeResolver.java	/^    private final ErrorHandler errorHandler;$/;"	f	class:TypeResolver	file:
exeFileName	Options.java	/^    String exeFileName() {$/;"	m	class:Options
expectsComparableScalars	TypeChecker.java	/^    private void expectsComparableScalars(BinaryOpNode node) {$/;"	m	class:TypeChecker	file:
expectsSameInteger	TypeChecker.java	/^    private void expectsSameInteger(BinaryOpNode node) {$/;"	m	class:TypeChecker	file:
expectsSameIntegerOrPointerDiff	TypeChecker.java	/^    private void expectsSameIntegerOrPointerDiff(BinaryOpNode node) {$/;"	m	class:TypeChecker	file:
expectsScalarLHS	TypeChecker.java	/^    private void expectsScalarLHS(UnaryArithmeticOpNode node) {$/;"	m	class:TypeChecker	file:
exprNestLevel	IRGenerator.java	/^    private int exprNestLevel = 0;$/;"	f	class:IRGenerator	file:
extName	SourceFile.java	/^    private String extName(String path) {$/;"	m	class:SourceFile	file:
findExpr	Compiler.java	/^    private ExprNode findExpr(AST ast) {$/;"	m	class:Compiler	file:
findStmt	Compiler.java	/^    private StmtNode findStmt(AST ast) {$/;"	m	class:Compiler	file:
forcePointerType	TypeChecker.java	/^    private ExprNode forcePointerType(ExprNode master, ExprNode slave) {$/;"	m	class:TypeChecker	file:
fromOption	CompilerMode.java	/^    static public CompilerMode fromOption(String opt) {$/;"	m	class:CompilerMode
genOptions	Options.java	/^    private CodeGeneratorOptions genOptions = new CodeGeneratorOptions();$/;"	f	class:Options	file:
generate	IRGenerator.java	/^    public IR generate(AST ast) throws SemanticException {$/;"	m	class:IRGenerator
generateAssembly	Compiler.java	/^    public AssemblyCode generateAssembly(IR ir, Options opts) {$/;"	m	class:Compiler
generateExecutable	Compiler.java	/^    public void generateExecutable(Options opts) throws IPCException {$/;"	m	class:Compiler
generateSharedLibrary	Compiler.java	/^    public void generateSharedLibrary(Options opts) throws IPCException {$/;"	m	class:Compiler
getJumpEntry	IRGenerator.java	/^    private JumpEntry getJumpEntry(String name) {$/;"	m	class:IRGenerator	file:
getOptArg	Options.java	/^    private String getOptArg(String opt, ListIterator<String> args) {$/;"	m	class:Options	file:
handleImplicitAddress	DereferenceChecker.java	/^    private void handleImplicitAddress(LHSNode node) {$/;"	m	class:DereferenceChecker	file:
imm	IRGenerator.java	/^    private Int imm(Type operandType, long n) {$/;"	m	class:IRGenerator	file:
implicitCast	TypeChecker.java	/^    private ExprNode implicitCast(Type targetType, ExprNode expr) {$/;"	m	class:TypeChecker	file:
int_t	IRGenerator.java	/^    private net.loveruby.cflat.asm.Type int_t() {$/;"	m	class:IRGenerator	file:
integralPromotedExpr	TypeChecker.java	/^    private ExprNode integralPromotedExpr(ExprNode expr) {$/;"	m	class:TypeChecker	file:
integralPromotion	TypeChecker.java	/^    private Type integralPromotion(Type t) {$/;"	m	class:TypeChecker	file:
invalidCastError	TypeChecker.java	/^    private void invalidCastError(Node n, Type l, Type r) {$/;"	m	class:TypeChecker	file:
isAssembleRequired	Options.java	/^    boolean isAssembleRequired() {$/;"	m	class:Options
isAssemblySource	SourceFile.java	/^    boolean isAssemblySource() {$/;"	m	class:SourceFile
isCflatSource	SourceFile.java	/^    boolean isCflatSource() {$/;"	m	class:SourceFile
isDefined	IRGenerator.java	/^        public boolean isDefined;$/;"	f	class:IRGenerator.JumpEntry
isExecutable	SourceFile.java	/^    boolean isExecutable() {$/;"	m	class:SourceFile
isGeneratingSharedLibrary	Options.java	/^    boolean isGeneratingSharedLibrary() {$/;"	m	class:Options
isInvalidLHSType	TypeChecker.java	/^    private boolean isInvalidLHSType(Type t) {$/;"	m	class:TypeChecker	file:
isInvalidParameterType	TypeChecker.java	/^    private boolean isInvalidParameterType(Type t) {$/;"	m	class:TypeChecker	file:
isInvalidRHSType	TypeChecker.java	/^    private boolean isInvalidRHSType(Type t) {$/;"	m	class:TypeChecker	file:
isInvalidReturnType	TypeChecker.java	/^    private boolean isInvalidReturnType(Type t) {$/;"	m	class:TypeChecker	file:
isInvalidStatementType	TypeChecker.java	/^    private boolean isInvalidStatementType(Type t) {$/;"	m	class:TypeChecker	file:
isInvalidVariableType	TypeChecker.java	/^    private boolean isInvalidVariableType(Type t) {$/;"	m	class:TypeChecker	file:
isKnownFileType	SourceFile.java	/^    boolean isKnownFileType() {$/;"	m	class:SourceFile
isLinkRequired	Options.java	/^    boolean isLinkRequired() {$/;"	m	class:Options
isModeOption	CompilerMode.java	/^    static public boolean isModeOption(String opt) {$/;"	m	class:CompilerMode
isObjectFile	SourceFile.java	/^    boolean isObjectFile() {$/;"	m	class:SourceFile
isPointerArithmetic	IRGenerator.java	/^    private boolean isPointerArithmetic(Op op, Type operandType) {$/;"	m	class:IRGenerator	file:
isPointerDiff	IRGenerator.java	/^    private boolean isPointerDiff(Op op, Type l, Type r) {$/;"	m	class:IRGenerator	file:
isSafeIntegerCast	TypeChecker.java	/^    private boolean isSafeIntegerCast(Node node, Type type) {$/;"	m	class:TypeChecker	file:
isSharedLibrary	SourceFile.java	/^    boolean isSharedLibrary() {$/;"	m	class:SourceFile
isSourceFile	LdArg.java	/^    boolean isSourceFile();$/;"	m	interface:LdArg
isSourceFile	LdOption.java	/^    public boolean isSourceFile() {$/;"	m	class:LdOption
isSourceFile	SourceFile.java	/^    public boolean isSourceFile() {$/;"	m	class:SourceFile
isStatement	IRGenerator.java	/^    private boolean isStatement() {$/;"	m	class:IRGenerator	file:
isStaticLibrary	SourceFile.java	/^    boolean isStaticLibrary() {$/;"	m	class:SourceFile
isValidSyntax	Compiler.java	/^    private boolean isValidSyntax(String path, Options opts) {$/;"	m	class:Compiler	file:
isVerboseMode	Options.java	/^    boolean isVerboseMode() {$/;"	m	class:Options
jump	IRGenerator.java	/^    private void jump(Label target) {$/;"	m	class:IRGenerator	file:
jump	IRGenerator.java	/^    private void jump(Location loc, Label target) {$/;"	m	class:IRGenerator	file:
jumpMap	IRGenerator.java	/^    Map<String, JumpEntry> jumpMap;$/;"	f	class:IRGenerator
label	IRGenerator.java	/^        public Label label;$/;"	f	class:IRGenerator.JumpEntry
label	IRGenerator.java	/^    private void label(Label label) {$/;"	m	class:IRGenerator	file:
ldArgs	Options.java	/^    List<String> ldArgs() {$/;"	m	class:Options
ldArgs	Options.java	/^    private List<LdArg> ldArgs;$/;"	f	class:Options	file:
ldOptions	Options.java	/^    LinkerOptions ldOptions() {$/;"	m	class:Options
ldOptions	Options.java	/^    private LinkerOptions ldOptions = new LinkerOptions();$/;"	f	class:Options	file:
link	Compiler.java	/^    public void link(Options opts) throws IPCException {$/;"	m	class:Compiler
linkedFileName	Options.java	/^    private String linkedFileName(String newExt) {$/;"	m	class:Options	file:
linkedFileName	SourceFile.java	/^    String linkedFileName(String newExt) {$/;"	m	class:SourceFile
linker	Options.java	/^    Linker linker(ErrorHandler h) {$/;"	m	class:Options
loader	Options.java	/^    LibraryLoader loader() {$/;"	m	class:Options
loader	Options.java	/^    private LibraryLoader loader = new LibraryLoader();$/;"	f	class:Options	file:
location	IRGenerator.java	/^        public Location location;$/;"	f	class:IRGenerator.JumpEntry
main	Compiler.java	/^    static public void main(String[] args) {$/;"	m	class:Compiler
mem	IRGenerator.java	/^    private Mem mem(Entity ent) {$/;"	m	class:IRGenerator	file:
mem	IRGenerator.java	/^    private Mem mem(Expr expr, Type t) {$/;"	m	class:IRGenerator	file:
mode	Options.java	/^    CompilerMode mode() {$/;"	m	class:Options
mode	Options.java	/^    private CompilerMode mode;$/;"	f	class:Options	file:
modes	CompilerMode.java	/^    static private Map<String, CompilerMode> modes;$/;"	f	class:CompilerMode	file:
mustBeInteger	TypeChecker.java	/^    private boolean mustBeInteger(ExprNode expr, String op) {$/;"	m	class:TypeChecker	file:
mustBeScalar	TypeChecker.java	/^    private boolean mustBeScalar(ExprNode expr, String op) {$/;"	m	class:TypeChecker	file:
net.loveruby.cflat.compiler	Compiler.java	/^package net.loveruby.cflat.compiler;$/;"	p
net.loveruby.cflat.compiler	CompilerMode.java	/^package net.loveruby.cflat.compiler;$/;"	p
net.loveruby.cflat.compiler	DereferenceChecker.java	/^package net.loveruby.cflat.compiler;$/;"	p
net.loveruby.cflat.compiler	IRGenerator.java	/^package net.loveruby.cflat.compiler;$/;"	p
net.loveruby.cflat.compiler	LdArg.java	/^package net.loveruby.cflat.compiler;$/;"	p
net.loveruby.cflat.compiler	LdOption.java	/^package net.loveruby.cflat.compiler;$/;"	p
net.loveruby.cflat.compiler	LocalResolver.java	/^package net.loveruby.cflat.compiler;$/;"	p
net.loveruby.cflat.compiler	Options.java	/^package net.loveruby.cflat.compiler;$/;"	p
net.loveruby.cflat.compiler	SourceFile.java	/^package net.loveruby.cflat.compiler;$/;"	p
net.loveruby.cflat.compiler	TypeChecker.java	/^package net.loveruby.cflat.compiler;$/;"	p
net.loveruby.cflat.compiler	TypeResolver.java	/^package net.loveruby.cflat.compiler;$/;"	p
net.loveruby.cflat.compiler	Visitor.java	/^package net.loveruby.cflat.compiler;$/;"	p
nextArg	Options.java	/^    private String nextArg(String opt, ListIterator<String> args) {$/;"	m	class:Options	file:
numRefered	IRGenerator.java	/^        public long numRefered;$/;"	f	class:IRGenerator.JumpEntry
objFileName	SourceFile.java	/^    String objFileName() {$/;"	m	class:SourceFile
objFileNameOf	Options.java	/^    String objFileNameOf(SourceFile src) {$/;"	m	class:Options
option	CompilerMode.java	/^    private final String option;$/;"	f	class:CompilerMode	file:
originalName	SourceFile.java	/^    private final String originalName;$/;"	f	class:SourceFile	file:
outputFileName	Options.java	/^    String outputFileName() {$/;"	m	class:Options
outputFileName	Options.java	/^    private String outputFileName;$/;"	f	class:Options	file:
parse	Options.java	/^    static Options parse(String[] args) {$/;"	m	class:Options
parseArgs	Options.java	/^    void parseArgs(String[] origArgs) {$/;"	m	class:Options
parseCommaSeparatedOptions	Options.java	/^    private List<String> parseCommaSeparatedOptions(String opt) {$/;"	m	class:Options	file:
parseError	Options.java	/^    private void parseError(String msg) {$/;"	m	class:Options	file:
parseFile	Compiler.java	/^    public AST parseFile(String path, Options opts)$/;"	m	class:Compiler
parseOptions	Compiler.java	/^    private Options parseOptions(String[] args) {$/;"	m	class:Compiler	file:
path	SourceFile.java	/^    String path() {$/;"	m	class:SourceFile
platform	Options.java	/^    private Platform platform = new X86Linux();$/;"	f	class:Options	file:
pointerTo	IRGenerator.java	/^    private Type pointerTo(Type t) {$/;"	m	class:IRGenerator	file:
popBreak	IRGenerator.java	/^    private void popBreak() {$/;"	m	class:IRGenerator	file:
popContinue	IRGenerator.java	/^    private void popContinue() {$/;"	m	class:IRGenerator	file:
popScope	LocalResolver.java	/^    private LocalScope popScope() {$/;"	m	class:LocalResolver	file:
printAsm	Compiler.java	/^    private boolean printAsm(AssemblyCode asm, CompilerMode mode) {$/;"	m	class:Compiler	file:
printUsage	Options.java	/^    void printUsage(PrintStream out) {$/;"	m	class:Options
ptrBaseSize	IRGenerator.java	/^    private Expr ptrBaseSize(Type t) {$/;"	m	class:IRGenerator	file:
ptr_t	IRGenerator.java	/^    private net.loveruby.cflat.asm.Type ptr_t() {$/;"	m	class:IRGenerator	file:
ptrdiff	IRGenerator.java	/^    private Int ptrdiff(long n) {$/;"	m	class:IRGenerator	file:
ptrdiff_t	IRGenerator.java	/^    private net.loveruby.cflat.asm.Type ptrdiff_t() {$/;"	m	class:IRGenerator	file:
pushBreak	IRGenerator.java	/^    private void pushBreak(Label label) {$/;"	m	class:IRGenerator	file:
pushContinue	IRGenerator.java	/^    private void pushContinue(Label label) {$/;"	m	class:IRGenerator	file:
pushScope	LocalResolver.java	/^    private void pushScope(List<? extends DefinedVariable> vars) {$/;"	m	class:LocalResolver	file:
ref	IRGenerator.java	/^    private Var ref(Entity ent) {$/;"	m	class:IRGenerator	file:
referLabel	IRGenerator.java	/^    private Label referLabel(String name) {$/;"	m	class:IRGenerator	file:
replaceExt	SourceFile.java	/^    private String replaceExt(String ext) {$/;"	m	class:SourceFile	file:
requires	CompilerMode.java	/^    boolean requires(CompilerMode m) {$/;"	m	class:CompilerMode
resolve	LocalResolver.java	/^    private void resolve(ExprNode n) {$/;"	m	class:LocalResolver	file:
resolve	LocalResolver.java	/^    private void resolve(StmtNode n) {$/;"	m	class:LocalResolver	file:
resolve	LocalResolver.java	/^    public void resolve(AST ast) throws SemanticException {$/;"	m	class:LocalResolver
resolve	TypeResolver.java	/^    public void resolve(AST ast) {$/;"	m	class:TypeResolver
resolveCompositeType	TypeResolver.java	/^    public void resolveCompositeType(CompositeTypeDefinition def) {$/;"	m	class:TypeResolver
resolveConstantValues	LocalResolver.java	/^    private void resolveConstantValues(List<Constant> consts) {$/;"	m	class:LocalResolver	file:
resolveFunctionHeader	TypeResolver.java	/^    private void resolveFunctionHeader(Function func) {$/;"	m	class:TypeResolver	file:
resolveFunctions	LocalResolver.java	/^    private void resolveFunctions(List<DefinedFunction> funcs) {$/;"	m	class:LocalResolver	file:
resolveGvarInitializers	LocalResolver.java	/^    private void resolveGvarInitializers(List<DefinedVariable> gvars) {$/;"	m	class:LocalResolver	file:
scopeStack	IRGenerator.java	/^    LinkedList<LocalScope> scopeStack;$/;"	f	class:IRGenerator
scopeStack	LocalResolver.java	/^    private final LinkedList<Scope> scopeStack;$/;"	f	class:LocalResolver	file:
selectSourceFiles	Options.java	/^    private List<SourceFile> selectSourceFiles(List<LdArg> args) {$/;"	m	class:Options	file:
semanticAnalyze	Compiler.java	/^    public AST semanticAnalyze(AST ast, TypeTable types,$/;"	m	class:Compiler
semanticError	DereferenceChecker.java	/^    private void semanticError(Location loc, String msg) {$/;"	m	class:DereferenceChecker	file:
semanticError	DereferenceChecker.java	/^    private void semanticError(Node n, String msg) {$/;"	m	class:DereferenceChecker	file:
setCurrentName	SourceFile.java	/^    void setCurrentName(String name) {$/;"	m	class:SourceFile
size	IRGenerator.java	/^    private Int size(long n) {$/;"	m	class:IRGenerator	file:
size_t	IRGenerator.java	/^    private net.loveruby.cflat.asm.Type size_t() {$/;"	m	class:IRGenerator	file:
soFileName	Options.java	/^    String soFileName() {$/;"	m	class:Options
sourceFiles	Options.java	/^    List<SourceFile> sourceFiles() {$/;"	m	class:Options
sourceFiles	Options.java	/^    private List<SourceFile> sourceFiles;$/;"	f	class:Options	file:
stmts	IRGenerator.java	/^    List<Stmt> stmts;$/;"	f	class:IRGenerator
tmpVar	IRGenerator.java	/^    private DefinedVariable tmpVar(Type t) {$/;"	m	class:IRGenerator	file:
toOption	CompilerMode.java	/^    public String toOption() {$/;"	m	class:CompilerMode
toString	LdArg.java	/^    String toString();$/;"	m	interface:LdArg
toString	LdOption.java	/^    public String toString() {$/;"	m	class:LdOption
toString	SourceFile.java	/^    public String toString() {$/;"	m	class:SourceFile
transformExpr	IRGenerator.java	/^    private Expr transformExpr(ExprNode node) {$/;"	m	class:IRGenerator	file:
transformIndex	IRGenerator.java	/^    private Expr transformIndex(ArefNode node) {$/;"	m	class:IRGenerator	file:
transformOpAssign	IRGenerator.java	/^    private Expr transformOpAssign(Location loc,$/;"	m	class:IRGenerator	file:
transformStmt	IRGenerator.java	/^    private void transformStmt(ExprNode node) {$/;"	m	class:IRGenerator	file:
transformStmt	IRGenerator.java	/^    private void transformStmt(StmtNode node) {$/;"	m	class:IRGenerator	file:
typeTable	DereferenceChecker.java	/^    private final TypeTable typeTable;$/;"	f	class:DereferenceChecker	file:
typeTable	IRGenerator.java	/^    private final TypeTable typeTable;$/;"	f	class:IRGenerator	file:
typeTable	Options.java	/^    TypeTable typeTable() {$/;"	m	class:Options
typeTable	TypeChecker.java	/^    private final TypeTable typeTable;$/;"	f	class:TypeChecker	file:
typeTable	TypeResolver.java	/^    private final TypeTable typeTable;$/;"	f	class:TypeResolver	file:
undereferableError	DereferenceChecker.java	/^    private void undereferableError(Location loc) {$/;"	m	class:DereferenceChecker	file:
usualArithmeticConversion	TypeChecker.java	/^    private Type usualArithmeticConversion(Type l, Type r) {$/;"	m	class:TypeChecker	file:
varType	IRGenerator.java	/^    private net.loveruby.cflat.asm.Type varType(Type t) {$/;"	m	class:IRGenerator	file:
verbose	Options.java	/^    private boolean verbose = false;$/;"	f	class:Options	file:
visit	DereferenceChecker.java	/^    public Void visit(AddressNode node) {$/;"	m	class:DereferenceChecker
visit	DereferenceChecker.java	/^    public Void visit(ArefNode node) {$/;"	m	class:DereferenceChecker
visit	DereferenceChecker.java	/^    public Void visit(AssignNode node) {$/;"	m	class:DereferenceChecker
visit	DereferenceChecker.java	/^    public Void visit(BlockNode node) {$/;"	m	class:DereferenceChecker
visit	DereferenceChecker.java	/^    public Void visit(CastNode node) {$/;"	m	class:DereferenceChecker
visit	DereferenceChecker.java	/^    public Void visit(DereferenceNode node) {$/;"	m	class:DereferenceChecker
visit	DereferenceChecker.java	/^    public Void visit(FuncallNode node) {$/;"	m	class:DereferenceChecker
visit	DereferenceChecker.java	/^    public Void visit(MemberNode node) {$/;"	m	class:DereferenceChecker
visit	DereferenceChecker.java	/^    public Void visit(OpAssignNode node) {$/;"	m	class:DereferenceChecker
visit	DereferenceChecker.java	/^    public Void visit(PrefixOpNode node) {$/;"	m	class:DereferenceChecker
visit	DereferenceChecker.java	/^    public Void visit(PtrMemberNode node) {$/;"	m	class:DereferenceChecker
visit	DereferenceChecker.java	/^    public Void visit(SuffixOpNode node) {$/;"	m	class:DereferenceChecker
visit	DereferenceChecker.java	/^    public Void visit(VariableNode node) {$/;"	m	class:DereferenceChecker
visit	IRGenerator.java	/^    public Expr visit(AddressNode node) {$/;"	m	class:IRGenerator
visit	IRGenerator.java	/^    public Expr visit(ArefNode node) {$/;"	m	class:IRGenerator
visit	IRGenerator.java	/^    public Expr visit(AssignNode node) {$/;"	m	class:IRGenerator
visit	IRGenerator.java	/^    public Expr visit(BinaryOpNode node) {$/;"	m	class:IRGenerator
visit	IRGenerator.java	/^    public Expr visit(CastNode node) {$/;"	m	class:IRGenerator
visit	IRGenerator.java	/^    public Expr visit(CondExprNode node) {$/;"	m	class:IRGenerator
visit	IRGenerator.java	/^    public Expr visit(DereferenceNode node) {$/;"	m	class:IRGenerator
visit	IRGenerator.java	/^    public Expr visit(FuncallNode node) {$/;"	m	class:IRGenerator
visit	IRGenerator.java	/^    public Expr visit(IntegerLiteralNode node) {$/;"	m	class:IRGenerator
visit	IRGenerator.java	/^    public Expr visit(LogicalAndNode node) {$/;"	m	class:IRGenerator
visit	IRGenerator.java	/^    public Expr visit(LogicalOrNode node) {$/;"	m	class:IRGenerator
visit	IRGenerator.java	/^    public Expr visit(MemberNode node) {$/;"	m	class:IRGenerator
visit	IRGenerator.java	/^    public Expr visit(OpAssignNode node) {$/;"	m	class:IRGenerator
visit	IRGenerator.java	/^    public Expr visit(PrefixOpNode node) {$/;"	m	class:IRGenerator
visit	IRGenerator.java	/^    public Expr visit(PtrMemberNode node) {$/;"	m	class:IRGenerator
visit	IRGenerator.java	/^    public Expr visit(SizeofExprNode node) {$/;"	m	class:IRGenerator
visit	IRGenerator.java	/^    public Expr visit(SizeofTypeNode node) {$/;"	m	class:IRGenerator
visit	IRGenerator.java	/^    public Expr visit(StringLiteralNode node) {$/;"	m	class:IRGenerator
visit	IRGenerator.java	/^    public Expr visit(SuffixOpNode node) {$/;"	m	class:IRGenerator
visit	IRGenerator.java	/^    public Expr visit(UnaryOpNode node) {$/;"	m	class:IRGenerator
visit	IRGenerator.java	/^    public Expr visit(VariableNode node) {$/;"	m	class:IRGenerator
visit	IRGenerator.java	/^    public Void visit(BlockNode node) {$/;"	m	class:IRGenerator
visit	IRGenerator.java	/^    public Void visit(BreakNode node) {$/;"	m	class:IRGenerator
visit	IRGenerator.java	/^    public Void visit(CaseNode node) {$/;"	m	class:IRGenerator
visit	IRGenerator.java	/^    public Void visit(ContinueNode node) {$/;"	m	class:IRGenerator
visit	IRGenerator.java	/^    public Void visit(DoWhileNode node) {$/;"	m	class:IRGenerator
visit	IRGenerator.java	/^    public Void visit(ExprStmtNode node) {$/;"	m	class:IRGenerator
visit	IRGenerator.java	/^    public Void visit(ForNode node) {$/;"	m	class:IRGenerator
visit	IRGenerator.java	/^    public Void visit(GotoNode node) {$/;"	m	class:IRGenerator
visit	IRGenerator.java	/^    public Void visit(IfNode node) {$/;"	m	class:IRGenerator
visit	IRGenerator.java	/^    public Void visit(LabelNode node) {$/;"	m	class:IRGenerator
visit	IRGenerator.java	/^    public Void visit(ReturnNode node) {$/;"	m	class:IRGenerator
visit	IRGenerator.java	/^    public Void visit(SwitchNode node) {$/;"	m	class:IRGenerator
visit	IRGenerator.java	/^    public Void visit(WhileNode node) {$/;"	m	class:IRGenerator
visit	LocalResolver.java	/^    public Void visit(BlockNode node) {$/;"	m	class:LocalResolver
visit	LocalResolver.java	/^    public Void visit(StringLiteralNode node) {$/;"	m	class:LocalResolver
visit	LocalResolver.java	/^    public Void visit(VariableNode node) {$/;"	m	class:LocalResolver
visit	TypeChecker.java	/^    public Void visit(ArefNode node) {$/;"	m	class:TypeChecker
visit	TypeChecker.java	/^    public Void visit(AssignNode node) {$/;"	m	class:TypeChecker
visit	TypeChecker.java	/^    public Void visit(BinaryOpNode node) {$/;"	m	class:TypeChecker
visit	TypeChecker.java	/^    public Void visit(BlockNode node) {$/;"	m	class:TypeChecker
visit	TypeChecker.java	/^    public Void visit(CastNode node) {$/;"	m	class:TypeChecker
visit	TypeChecker.java	/^    public Void visit(CondExprNode node) {$/;"	m	class:TypeChecker
visit	TypeChecker.java	/^    public Void visit(ExprStmtNode node) {$/;"	m	class:TypeChecker
visit	TypeChecker.java	/^    public Void visit(ForNode node) {$/;"	m	class:TypeChecker
visit	TypeChecker.java	/^    public Void visit(FuncallNode node) {$/;"	m	class:TypeChecker
visit	TypeChecker.java	/^    public Void visit(IfNode node) {$/;"	m	class:TypeChecker
visit	TypeChecker.java	/^    public Void visit(LogicalAndNode node) {$/;"	m	class:TypeChecker
visit	TypeChecker.java	/^    public Void visit(LogicalOrNode node) {$/;"	m	class:TypeChecker
visit	TypeChecker.java	/^    public Void visit(OpAssignNode node) {$/;"	m	class:TypeChecker
visit	TypeChecker.java	/^    public Void visit(PrefixOpNode node) {$/;"	m	class:TypeChecker
visit	TypeChecker.java	/^    public Void visit(ReturnNode node) {$/;"	m	class:TypeChecker
visit	TypeChecker.java	/^    public Void visit(SuffixOpNode node) {$/;"	m	class:TypeChecker
visit	TypeChecker.java	/^    public Void visit(SwitchNode node) {$/;"	m	class:TypeChecker
visit	TypeChecker.java	/^    public Void visit(UnaryOpNode node) {$/;"	m	class:TypeChecker
visit	TypeChecker.java	/^    public Void visit(WhileNode node) {$/;"	m	class:TypeChecker
visit	TypeResolver.java	/^    public Void visit(BlockNode node) {$/;"	m	class:TypeResolver
visit	TypeResolver.java	/^    public Void visit(CastNode node) {$/;"	m	class:TypeResolver
visit	TypeResolver.java	/^    public Void visit(Constant c) {$/;"	m	class:TypeResolver
visit	TypeResolver.java	/^    public Void visit(DefinedFunction func) {$/;"	m	class:TypeResolver
visit	TypeResolver.java	/^    public Void visit(DefinedVariable var) {$/;"	m	class:TypeResolver
visit	TypeResolver.java	/^    public Void visit(IntegerLiteralNode node) {$/;"	m	class:TypeResolver
visit	TypeResolver.java	/^    public Void visit(SizeofExprNode node) {$/;"	m	class:TypeResolver
visit	TypeResolver.java	/^    public Void visit(SizeofTypeNode node) {$/;"	m	class:TypeResolver
visit	TypeResolver.java	/^    public Void visit(StringLiteralNode node) {$/;"	m	class:TypeResolver
visit	TypeResolver.java	/^    public Void visit(StructNode struct) {$/;"	m	class:TypeResolver
visit	TypeResolver.java	/^    public Void visit(TypedefNode typedef) {$/;"	m	class:TypeResolver
visit	TypeResolver.java	/^    public Void visit(UndefinedFunction func) {$/;"	m	class:TypeResolver
visit	TypeResolver.java	/^    public Void visit(UndefinedVariable var) {$/;"	m	class:TypeResolver
visit	TypeResolver.java	/^    public Void visit(UnionNode union) {$/;"	m	class:TypeResolver
visit	Visitor.java	/^    public Void visit(AddressNode node) {$/;"	m	class:Visitor
visit	Visitor.java	/^    public Void visit(ArefNode node) {$/;"	m	class:Visitor
visit	Visitor.java	/^    public Void visit(AssignNode n) {$/;"	m	class:Visitor
visit	Visitor.java	/^    public Void visit(BinaryOpNode n) {$/;"	m	class:Visitor
visit	Visitor.java	/^    public Void visit(BlockNode node) {$/;"	m	class:Visitor
visit	Visitor.java	/^    public Void visit(BreakNode n) {$/;"	m	class:Visitor
visit	Visitor.java	/^    public Void visit(CaseNode n) {$/;"	m	class:Visitor
visit	Visitor.java	/^    public Void visit(CastNode node) {$/;"	m	class:Visitor
visit	Visitor.java	/^    public Void visit(CondExprNode n) {$/;"	m	class:Visitor
visit	Visitor.java	/^    public Void visit(ContinueNode n) {$/;"	m	class:Visitor
visit	Visitor.java	/^    public Void visit(DereferenceNode node) {$/;"	m	class:Visitor
visit	Visitor.java	/^    public Void visit(DoWhileNode n) {$/;"	m	class:Visitor
visit	Visitor.java	/^    public Void visit(ExprStmtNode node) {$/;"	m	class:Visitor
visit	Visitor.java	/^    public Void visit(ForNode n) {$/;"	m	class:Visitor
visit	Visitor.java	/^    public Void visit(FuncallNode node) {$/;"	m	class:Visitor
visit	Visitor.java	/^    public Void visit(GotoNode n) {$/;"	m	class:Visitor
visit	Visitor.java	/^    public Void visit(IfNode n) {$/;"	m	class:Visitor
visit	Visitor.java	/^    public Void visit(IntegerLiteralNode node) {$/;"	m	class:Visitor
visit	Visitor.java	/^    public Void visit(LabelNode n) {$/;"	m	class:Visitor
visit	Visitor.java	/^    public Void visit(LogicalAndNode node) {$/;"	m	class:Visitor
visit	Visitor.java	/^    public Void visit(LogicalOrNode node) {$/;"	m	class:Visitor
visit	Visitor.java	/^    public Void visit(MemberNode node) {$/;"	m	class:Visitor
visit	Visitor.java	/^    public Void visit(OpAssignNode n) {$/;"	m	class:Visitor
visit	Visitor.java	/^    public Void visit(PrefixOpNode node) {$/;"	m	class:Visitor
visit	Visitor.java	/^    public Void visit(PtrMemberNode node) {$/;"	m	class:Visitor
visit	Visitor.java	/^    public Void visit(ReturnNode n) {$/;"	m	class:Visitor
visit	Visitor.java	/^    public Void visit(SizeofExprNode node) {$/;"	m	class:Visitor
visit	Visitor.java	/^    public Void visit(SizeofTypeNode node) {$/;"	m	class:Visitor
visit	Visitor.java	/^    public Void visit(StringLiteralNode node) {$/;"	m	class:Visitor
visit	Visitor.java	/^    public Void visit(SuffixOpNode node) {$/;"	m	class:Visitor
visit	Visitor.java	/^    public Void visit(SwitchNode n) {$/;"	m	class:Visitor
visit	Visitor.java	/^    public Void visit(UnaryOpNode node) {$/;"	m	class:Visitor
visit	Visitor.java	/^    public Void visit(VariableNode node) {$/;"	m	class:Visitor
visit	Visitor.java	/^    public Void visit(WhileNode n) {$/;"	m	class:Visitor
visitExpr	Visitor.java	/^    protected void visitExpr(ExprNode expr) {$/;"	m	class:Visitor
visitExprs	Visitor.java	/^    protected void visitExprs(List<? extends ExprNode> exprs) {$/;"	m	class:Visitor
visitStmt	Visitor.java	/^    protected void visitStmt(StmtNode stmt) {$/;"	m	class:Visitor
visitStmts	Visitor.java	/^    protected void visitStmts(List<? extends StmtNode> stmts) {$/;"	m	class:Visitor
warn	TypeChecker.java	/^    private void warn(Node n, String msg) {$/;"	m	class:TypeChecker	file:
writeFile	Compiler.java	/^    private void writeFile(String path, String str) throws FileException {$/;"	m	class:Compiler	file:
wrongTypeError	TypeChecker.java	/^    private void wrongTypeError(ExprNode expr, String op) {$/;"	m	class:TypeChecker	file:
